// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/orange-protocol/orange-server-v1/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	APDataSetList struct {
		ApDataSetData func(childComplexity int) int
		CurPageNum    func(childComplexity int) int
		TotalNum      func(childComplexity int) int
	}

	APMethodWithAp struct {
		Did               func(childComplexity int) int
		Icon              func(childComplexity int) int
		Labels            func(childComplexity int) int
		Method            func(childComplexity int) int
		MethodDescription func(childComplexity int) int
		MethodName        func(childComplexity int) int
		Name              func(childComplexity int) int
		Used              func(childComplexity int) int
	}

	AlgorithmProvider struct {
		APIState        func(childComplexity int) int
		Author          func(childComplexity int) int
		CreateTime      func(childComplexity int) int
		Delay           func(childComplexity int) int
		Did             func(childComplexity int) int
		Icon            func(childComplexity int) int
		Introduction    func(childComplexity int) int
		InvokeFrequency func(childComplexity int) int
		Name            func(childComplexity int) int
		Popularity      func(childComplexity int) int
		Provider        func(childComplexity int) int
		Title           func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	ApDataSetRes struct {
		ApDid             func(childComplexity int) int
		DataSetDesc       func(childComplexity int) int
		DataSetID         func(childComplexity int) int
		DataSetMethodName func(childComplexity int) int
		DataSetName       func(childComplexity int) int
		HTTPMethod        func(childComplexity int) int
		HTTPURL           func(childComplexity int) int
		Labels            func(childComplexity int) int
		Params            func(childComplexity int) int
		ResDesc           func(childComplexity int) int
		Status            func(childComplexity int) int
	}

	ApInfoRes struct {
		ApDesc   func(childComplexity int) int
		ApDid    func(childComplexity int) int
		ApInfoID func(childComplexity int) int
		ApName   func(childComplexity int) int
		Avatar   func(childComplexity int) int
		ResDesc  func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	ApplicationInfo struct {
		Did     func(childComplexity int) int
		Name    func(childComplexity int) int
		Website func(childComplexity int) int
	}

	ChainAddress struct {
		Chain           func(childComplexity int) int
		ContractAddress func(childComplexity int) int
	}

	ClaimNFTRecord struct {
		Chain           func(childComplexity int) int
		ContractAddress func(childComplexity int) int
		CreateTime      func(childComplexity int) int
		NftType         func(childComplexity int) int
		Result          func(childComplexity int) int
		Score           func(childComplexity int) int
		TxHash          func(childComplexity int) int
		UserAddress     func(childComplexity int) int
		UserDid         func(childComplexity int) int
	}

	ClaimNFTRecordsResp struct {
		Count   func(childComplexity int) int
		Records func(childComplexity int) int
	}

	ClaimNFTResponse struct {
		Address   func(childComplexity int) int
		ErrorCode func(childComplexity int) int
		Param     func(childComplexity int) int
	}

	DPAndMethod struct {
		Dp     func(childComplexity int) int
		Method func(childComplexity int) int
	}

	DPDataSetList struct {
		CurPageNum    func(childComplexity int) int
		DpDataSetData func(childComplexity int) int
		TotalNum      func(childComplexity int) int
	}

	DPMethodWithDp struct {
		Did               func(childComplexity int) int
		Icon              func(childComplexity int) int
		Labels            func(childComplexity int) int
		Method            func(childComplexity int) int
		MethodDescription func(childComplexity int) int
		MethodName        func(childComplexity int) int
		Name              func(childComplexity int) int
		Used              func(childComplexity int) int
	}

	DataProvider struct {
		APIState        func(childComplexity int) int
		Author          func(childComplexity int) int
		CreateTime      func(childComplexity int) int
		Delay           func(childComplexity int) int
		Did             func(childComplexity int) int
		Icon            func(childComplexity int) int
		Introduction    func(childComplexity int) int
		InvokeFrequency func(childComplexity int) int
		Name            func(childComplexity int) int
		Popularity      func(childComplexity int) int
		Provider        func(childComplexity int) int
		Title           func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	DpDataSetRes struct {
		DataSetDesc       func(childComplexity int) int
		DataSetID         func(childComplexity int) int
		DataSetMethodName func(childComplexity int) int
		DataSetName       func(childComplexity int) int
		DpDid             func(childComplexity int) int
		HTTPMethod        func(childComplexity int) int
		HTTPURL           func(childComplexity int) int
		Labels            func(childComplexity int) int
		Params            func(childComplexity int) int
		ResDesc           func(childComplexity int) int
		Status            func(childComplexity int) int
	}

	DpInfoRes struct {
		Avatar   func(childComplexity int) int
		DpDesc   func(childComplexity int) int
		DpDid    func(childComplexity int) int
		DpInfoID func(childComplexity int) int
		DpName   func(childComplexity int) int
		ResDesc  func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	GenNFTCountResp struct {
		Count func(childComplexity int) int
	}

	GenReputationCountResp struct {
		Count func(childComplexity int) int
	}

	GetAllAlgorithmProviderMethodsResp struct {
		Data  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	GetAllAlgorithmProvidersResp struct {
		Data  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	GetAllDataProviderMethodsResp struct {
		Data  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	GetAllDataProviders struct {
		Data  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	GetUserTasksResp struct {
		Tasks      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	LabelsInfos struct {
		BlockChain func(childComplexity int) int
		Category   func(childComplexity int) int
		Scenario   func(childComplexity int) int
	}

	MethodDetail struct {
		CompositeData    func(childComplexity int) int
		CompositeSetting func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		Description      func(childComplexity int) int
		Did              func(childComplexity int) int
		HTTPMethod       func(childComplexity int) int
		Invoked          func(childComplexity int) int
		Labels           func(childComplexity int) int
		Latency          func(childComplexity int) int
		Method           func(childComplexity int) int
		Name             func(childComplexity int) int
		Param            func(childComplexity int) int
		ParamSchema      func(childComplexity int) int
		ResultSchema     func(childComplexity int) int
		Status           func(childComplexity int) int
		URL              func(childComplexity int) int
	}

	MethodInfo struct {
		Data  func(childComplexity int) int
		Did   func(childComplexity int) int
		Title func(childComplexity int) int
	}

	Mutation struct {
		AddNewOuterTask          func(childComplexity int, input model.AddNewOuterTaskReq) int
		AddTask                  func(childComplexity int, input model.AddTask, overwrite bool) int
		AddUserBasicInfo         func(childComplexity int, input model.AddUserBasicInfoReq) int
		BindAddress              func(childComplexity int, input model.BindAddress) int
		ChangeAddressVisible     func(childComplexity int, userDid string, chain string, address string, visible bool) int
		ClaimNft                 func(childComplexity int, did string, chain string, nftType int64) int
		DeleteAPDataSet          func(childComplexity int, userDid string, dataSetID int64) int
		DeleteDPDataSet          func(childComplexity int, userDid string, dataSetID int64) int
		EditAppNameAppInfo       func(childComplexity int, did string, appName string) int
		EditEmailAddrBasicInfo   func(childComplexity int, did string, email string, verifyCode string) int
		EditNickNameBasicInfo    func(childComplexity int, did string, nickName string) int
		EditWebsiteAppInfo       func(childComplexity int, did string, website string) int
		Login                    func(childComplexity int, input model.Login) int
		PublishAPDataSet         func(childComplexity int, userDid string, input *model.ApDataSetInfo) int
		PublishDPDataSet         func(childComplexity int, userDid string, input *model.DpDataSetInfo) int
		RefreshToken             func(childComplexity int, input model.RefreshTokenInput) int
		RequestEmailVCode        func(childComplexity int, did string, email string) int
		RequestOscore            func(childComplexity int, input *model.RequestOscoreReq) int
		RevokeAPDataSet          func(childComplexity int, userDid string, dataSetID int64) int
		RevokeAPInfo             func(childComplexity int, userDid string, apInfoID int64) int
		RevokeDPDataSet          func(childComplexity int, userDid string, dataSetID int64) int
		RevokeDPInfo             func(childComplexity int, userDid string, dpInfoID int64) int
		RevokePublishedAPDataSet func(childComplexity int, userDid string, dataSetID int64) int
		RevokePublishedDPDataSet func(childComplexity int, userDid string, dataSetID int64) int
		SaveAPDataSet            func(childComplexity int, userDid string, input *model.ApDataSetInfo) int
		SaveAPInfo               func(childComplexity int, userDid string, input *model.SubmitApInfo) int
		SaveDPDataSet            func(childComplexity int, userDid string, input *model.DpDataSetInfo) int
		SaveDPInfo               func(childComplexity int, userDid string, input *model.SubmitDpInfo) int
		SaveThirdPartyVc         func(childComplexity int, did string, mediaType string, credential string) int
		SaveUserKycInfo          func(childComplexity int, did string, kyc string) int
		SubmitAPInfo             func(childComplexity int, userDid string, input *model.SubmitApInfo) int
		SubmitChanllenge         func(childComplexity int, input model.ClientResponse) int
		SubmitClaimTxInfo        func(childComplexity int, did string, chain string, addr string, nftType int64, txhash string) int
		SubmitDPInfo             func(childComplexity int, userDid string, input *model.SubmitDpInfo) int
		UnBindThirdParty         func(childComplexity int, did string, mediaType string) int
		UnbindAddress            func(childComplexity int, input model.UnBindAddress) int
		UpdateApplicationInfo    func(childComplexity int, input *model.ApplicationInfoReq) int
		UpdateUserBasicInfo      func(childComplexity int, input *model.UpdateUserBasicInfoReq) int
		UploadAvatar             func(childComplexity int, file graphql.Upload) int
	}

	NFTClaimedCountResp struct {
		TotalCount func(childComplexity int) int
		UserCount  func(childComplexity int) int
	}

	NFTParam struct {
		Hash    func(childComplexity int) int
		NftType func(childComplexity int) int
		Score   func(childComplexity int) int
		Sig     func(childComplexity int) int
	}

	NFTSetting struct {
		ApDid          func(childComplexity int) int
		ApMethod       func(childComplexity int) int
		ApMethodName   func(childComplexity int) int
		ApName         func(childComplexity int) int
		ChainAddresses func(childComplexity int) int
		Description    func(childComplexity int) int
		DpDid          func(childComplexity int) int
		DpMethod       func(childComplexity int) int
		ID             func(childComplexity int) int
		Image          func(childComplexity int) int
		IssueBy        func(childComplexity int) int
		LowestScore    func(childComplexity int) int
		Name           func(childComplexity int) int
		Restriction    func(childComplexity int) int
		ValidDays      func(childComplexity int) int
	}

	NFTSettingResp struct {
		Count   func(childComplexity int) int
		Records func(childComplexity int) int
	}

	PriceInfo struct {
		ChargeType func(childComplexity int) int
		Price      func(childComplexity int) int
		PriceType  func(childComplexity int) int
	}

	ProviderMethod struct {
		CreateTime   func(childComplexity int) int
		Description  func(childComplexity int) int
		HasDataSet   func(childComplexity int) int
		Labels       func(childComplexity int) int
		Name         func(childComplexity int) int
		NftType      func(childComplexity int) int
		ParamSchema  func(childComplexity int) int
		ResultSchema func(childComplexity int) int
		Status       func(childComplexity int) int
		SupportMulti func(childComplexity int) int
		Title        func(childComplexity int) int
		TotalUsed    func(childComplexity int) int
	}

	Query struct {
		GetAlgorithmMethods           func(childComplexity int, did string) int
		GetAlgorithmProvider          func(childComplexity int, did string) int
		GetAlgorithmProviderMethod    func(childComplexity int, did string, name string) int
		GetAllAPInfo                  func(childComplexity int) int
		GetAllAlgorithmProviderMethod func(childComplexity int, first *int64, skip *int64, where *model.AlgorithmProviderMethodWhere, orderBy *string, orderDirection *string, labels model.LabelsInfo) int
		GetAllAlgorithmProviders      func(childComplexity int, first *int64, skip *int64, where *model.AlgorithmProviderWhere, orderBy *string, orderDirection *string) int
		GetAllDataProviderMethod      func(childComplexity int, first *int64, skip *int64, where *model.DataProviderMethodWhere, orderBy *string, orderDirection *string, labels model.LabelsInfo) int
		GetAllDataProviders           func(childComplexity int, first *int64, skip *int64, where *model.DataProviderWhere, orderBy *string, orderDirection *string) int
		GetApplicationInfo            func(childComplexity int, did string) int
		GetBasedVotingStrategy        func(childComplexity int, addrs []string, space string, snapshot string, network string, options *model.SnapShotOptions) int
		GetClaimNFTRecords            func(childComplexity int, first *int64, skip *int64, where *model.ClaimNFTWhere, orderBy *string, orderDirection *string) int
		GetCompositeDpInfo            func(childComplexity int, did string, method string) int
		GetDataMethods                func(childComplexity int, did string) int
		GetDataProvider               func(childComplexity int, did string) int
		GetDataProviderMethod         func(childComplexity int, did string, name string) int
		GetDataProvidersByAp          func(childComplexity int, did string, method string) int
		GetLatestOscore               func(childComplexity int, did string) int
		GetNFTClaimedCount            func(childComplexity int, nftType int64, userDid string) int
		GetNFTSettings                func(childComplexity int, first *int64, skip *int64, where *model.NFTSettingWhere, orderBy *string, orderDirection *string) int
		GetTokenPrice                 func(childComplexity int, input model.TokenPrice) int
		GetUserAssetBalance           func(childComplexity int, did string) int
		GetUserBasicInfo              func(childComplexity int, did string) int
		GetUserBindAddressInfo        func(childComplexity int, input string) int
		GetUserClaimedNft             func(childComplexity int, first *int64, skip *int64, where *model.UserClaimedNFTWhere, orderBy *string, orderDirection *string) int
		GetUserCredentials            func(childComplexity int, first *int64, skip *int64, where model.UserCredntialWhere, orderBy *string, orderDirection *string) int
		GetUserGenNFTCount            func(childComplexity int, did string) int
		GetUserGenReputationCount     func(childComplexity int, did string) int
		GetUserTask                   func(childComplexity int, key string, taskID int64) int
		GetUserTasks                  func(childComplexity int, first *int64, skip *int64, where *model.GetUserTasksWhere, orderBy *string, orderDirection *string) int
		GetUserTotalValue             func(childComplexity int, did string) int
		GetUserVisibleBindAddressInfo func(childComplexity int, input string) int
		QueryAPDataSetInfo            func(childComplexity int, userDid string, dataSetID int64) int
		QueryAPLabels                 func(childComplexity int) int
		QueryAllThirdPartyVcStatus    func(childComplexity int, did string) int
		QueryDPDataSetInfo            func(childComplexity int, userDid string, dataSetID int64) int
		QueryDPLabels                 func(childComplexity int) int
		QueryOuterTask                func(childComplexity int, input *model.OuterTaskReq) int
		QuerySig                      func(childComplexity int, addr string, nftType int64, score int64) int
		QueryTaskExist                func(childComplexity int, input *model.AddTask) int
		QueryThirdPartyVc             func(childComplexity int, did string, mediaType string) int
		QueryUserAPDataSetList        func(childComplexity int, userDid string, dataSetName string, status string, page int64, size int64, labels model.LabelsInfo) int
		QueryUserBasicInfo            func(childComplexity int, userDid string) int
		QueryUserDPDataSetList        func(childComplexity int, userDid string, dataSetName string, status string, page int64, size int64, labels model.LabelsInfo) int
		QueryUserKycInfo              func(childComplexity int, did string) int
		QueryUserLatestAPInfo         func(childComplexity int, userDid string) int
		QueryUserLatestDPInfo         func(childComplexity int, userDid string) int
		QueryUserPublishedAp          func(childComplexity int, userDid string) int
		QueryUserPublishedDp          func(childComplexity int, userDid string) int
		QueryUserSNSBinding           func(childComplexity int, callerDid string, address string, encrypt bool) int
		RequestChanllenge             func(childComplexity int, input *model.ClientHello) int
	}

	SNSBindingData struct {
		BrightID  func(childComplexity int) int
		Facebook  func(childComplexity int) int
		Github    func(childComplexity int) int
		Linkedin  func(childComplexity int) int
		ShuftiPro func(childComplexity int) int
		Tweeter   func(childComplexity int) int
	}

	SNSBindingDataWithSig struct {
		Data func(childComplexity int) int
		Sig  func(childComplexity int) int
	}

	SNSBindingResp struct {
		Data      func(childComplexity int) int
		Encrypted func(childComplexity int) int
	}

	ServerHello struct {
		Alg       func(childComplexity int) int
		Chain     func(childComplexity int) int
		Nonce     func(childComplexity int) int
		Server    func(childComplexity int) int
		Type      func(childComplexity int) int
		VcFilters func(childComplexity int) int
		Ver       func(childComplexity int) int
	}

	ServerInfo struct {
		Did                func(childComplexity int) int
		Icon               func(childComplexity int) int
		Name               func(childComplexity int) int
		URL                func(childComplexity int) int
		VerificationMethod func(childComplexity int) int
	}

	SigResp struct {
		Hash func(childComplexity int) int
		Sig  func(childComplexity int) int
	}

	StrategyResult struct {
		Address func(childComplexity int) int
		Score   func(childComplexity int) int
	}

	ThirdPartyVcStatus struct {
		MediaType func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	UserAddressInfo struct {
		Address    func(childComplexity int) int
		Chain      func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Visible    func(childComplexity int) int
	}

	UserAsset struct {
		Balance      func(childComplexity int) int
		Chain        func(childComplexity int) int
		Icon         func(childComplexity int) int
		Name         func(childComplexity int) int
		Price        func(childComplexity int) int
		TokenAddress func(childComplexity int) int
		Value        func(childComplexity int) int
	}

	UserBasicInfo struct {
		Avatar   func(childComplexity int) int
		Did      func(childComplexity int) int
		Email    func(childComplexity int) int
		NickName func(childComplexity int) int
	}

	UserBasicInfoResp struct {
		Credentials      func(childComplexity int) int
		DatasetPublished func(childComplexity int) int
		ModelPublished   func(childComplexity int) int
		Nfts             func(childComplexity int) int
		Verifications    func(childComplexity int) int
		WalletAddress    func(childComplexity int) int
	}

	UserClaimedNft struct {
		ApDid           func(childComplexity int) int
		ApMethod        func(childComplexity int) int
		ApMethodTitle   func(childComplexity int) int
		ApTitle         func(childComplexity int) int
		Chain           func(childComplexity int) int
		ClaimTime       func(childComplexity int) int
		ContractAddress func(childComplexity int) int
		Description     func(childComplexity int) int
		DpDid           func(childComplexity int) int
		DpMethod        func(childComplexity int) int
		DpMethodTitle   func(childComplexity int) int
		DpTitle         func(childComplexity int) int
		Image           func(childComplexity int) int
		IsExpired       func(childComplexity int) int
		IssueBy         func(childComplexity int) int
		LowestScore     func(childComplexity int) int
		Name            func(childComplexity int) int
		NftScore        func(childComplexity int) int
		NftType         func(childComplexity int) int
		Owner           func(childComplexity int) int
		Score           func(childComplexity int) int
		TokenID         func(childComplexity int) int
		TxHash          func(childComplexity int) int
		ValidDays       func(childComplexity int) int
		ValidTo         func(childComplexity int) int
	}

	UserClaimedNFTResp struct {
		Count   func(childComplexity int) int
		Records func(childComplexity int) int
	}

	UserCredential struct {
		ApMethodName func(childComplexity int) int
		ApName       func(childComplexity int) int
		CreateTime   func(childComplexity int) int
		DpMethodName func(childComplexity int) int
		DpName       func(childComplexity int) int
		Score        func(childComplexity int) int
		ValidTo      func(childComplexity int) int
	}

	UserCredentials struct {
		Data       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserLatestOscore struct {
		ApDid      func(childComplexity int) int
		CreateTime func(childComplexity int) int
		DpDid      func(childComplexity int) int
		Oscore     func(childComplexity int) int
	}

	UserTasks struct {
		ApDid             func(childComplexity int) int
		ApIcon            func(childComplexity int) int
		ApMethod          func(childComplexity int) int
		ApMethodName      func(childComplexity int) int
		ApName            func(childComplexity int) int
		CreateTime        func(childComplexity int) int
		DpDid             func(childComplexity int) int
		DpIcon            func(childComplexity int) int
		DpMethod          func(childComplexity int) int
		DpMethodName      func(childComplexity int) int
		DpName            func(childComplexity int) int
		InvolvedAddresses func(childComplexity int) int
		IssueTxhash       func(childComplexity int) int
		NftType           func(childComplexity int) int
		ResultFile        func(childComplexity int) int
		TaskID            func(childComplexity int) int
		TaskResult        func(childComplexity int) int
		TaskStatus        func(childComplexity int) int
		UpdateTime        func(childComplexity int) int
		UserDid           func(childComplexity int) int
		ValidTo           func(childComplexity int) int
	}

	VCFilter struct {
		Express    func(childComplexity int) int
		Required   func(childComplexity int) int
		TrustRoots func(childComplexity int) int
		Type       func(childComplexity int) int
	}
}

type MutationResolver interface {
	SubmitChanllenge(ctx context.Context, input model.ClientResponse) (string, error)
	Login(ctx context.Context, input model.Login) (string, error)
	RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error)
	BindAddress(ctx context.Context, input model.BindAddress) (string, error)
	UnbindAddress(ctx context.Context, input model.UnBindAddress) (string, error)
	AddTask(ctx context.Context, input model.AddTask, overwrite bool) (int64, error)
	ChangeAddressVisible(ctx context.Context, userDid string, chain string, address string, visible bool) (bool, error)
	RequestEmailVCode(ctx context.Context, did string, email string) (bool, error)
	AddUserBasicInfo(ctx context.Context, input model.AddUserBasicInfoReq) (bool, error)
	UpdateUserBasicInfo(ctx context.Context, input *model.UpdateUserBasicInfoReq) (bool, error)
	UpdateApplicationInfo(ctx context.Context, input *model.ApplicationInfoReq) (bool, error)
	EditNickNameBasicInfo(ctx context.Context, did string, nickName string) (bool, error)
	EditEmailAddrBasicInfo(ctx context.Context, did string, email string, verifyCode string) (bool, error)
	EditAppNameAppInfo(ctx context.Context, did string, appName string) (bool, error)
	EditWebsiteAppInfo(ctx context.Context, did string, website string) (bool, error)
	RequestOscore(ctx context.Context, input *model.RequestOscoreReq) (int64, error)
	AddNewOuterTask(ctx context.Context, input model.AddNewOuterTaskReq) (int64, error)
	SaveThirdPartyVc(ctx context.Context, did string, mediaType string, credential string) (bool, error)
	UnBindThirdParty(ctx context.Context, did string, mediaType string) (bool, error)
	SaveUserKycInfo(ctx context.Context, did string, kyc string) (bool, error)
	ClaimNft(ctx context.Context, did string, chain string, nftType int64) (*model.ClaimNFTResponse, error)
	SubmitClaimTxInfo(ctx context.Context, did string, chain string, addr string, nftType int64, txhash string) (bool, error)
	SaveDPInfo(ctx context.Context, userDid string, input *model.SubmitDpInfo) (bool, error)
	SubmitDPInfo(ctx context.Context, userDid string, input *model.SubmitDpInfo) (bool, error)
	RevokeDPInfo(ctx context.Context, userDid string, dpInfoID int64) (bool, error)
	UploadAvatar(ctx context.Context, file graphql.Upload) (string, error)
	SaveDPDataSet(ctx context.Context, userDid string, input *model.DpDataSetInfo) (bool, error)
	PublishDPDataSet(ctx context.Context, userDid string, input *model.DpDataSetInfo) (bool, error)
	RevokeDPDataSet(ctx context.Context, userDid string, dataSetID int64) (bool, error)
	DeleteDPDataSet(ctx context.Context, userDid string, dataSetID int64) (bool, error)
	RevokePublishedDPDataSet(ctx context.Context, userDid string, dataSetID int64) (bool, error)
	SaveAPInfo(ctx context.Context, userDid string, input *model.SubmitApInfo) (bool, error)
	SubmitAPInfo(ctx context.Context, userDid string, input *model.SubmitApInfo) (bool, error)
	RevokeAPInfo(ctx context.Context, userDid string, apInfoID int64) (bool, error)
	SaveAPDataSet(ctx context.Context, userDid string, input *model.ApDataSetInfo) (bool, error)
	PublishAPDataSet(ctx context.Context, userDid string, input *model.ApDataSetInfo) (bool, error)
	RevokeAPDataSet(ctx context.Context, userDid string, dataSetID int64) (bool, error)
	DeleteAPDataSet(ctx context.Context, userDid string, dataSetID int64) (bool, error)
	RevokePublishedAPDataSet(ctx context.Context, userDid string, dataSetID int64) (bool, error)
}
type QueryResolver interface {
	GetAllAlgorithmProviders(ctx context.Context, first *int64, skip *int64, where *model.AlgorithmProviderWhere, orderBy *string, orderDirection *string) (*model.GetAllAlgorithmProvidersResp, error)
	GetAllDataProviders(ctx context.Context, first *int64, skip *int64, where *model.DataProviderWhere, orderBy *string, orderDirection *string) (*model.GetAllDataProviders, error)
	GetDataProvidersByAp(ctx context.Context, did string, method string) ([]*model.DPAndMethod, error)
	GetUserAssetBalance(ctx context.Context, did string) ([]*model.UserAsset, error)
	GetUserTotalValue(ctx context.Context, did string) (string, error)
	GetTokenPrice(ctx context.Context, input model.TokenPrice) (string, error)
	GetUserBindAddressInfo(ctx context.Context, input string) ([]*model.UserAddressInfo, error)
	GetUserVisibleBindAddressInfo(ctx context.Context, input string) ([]*model.UserAddressInfo, error)
	GetUserTasks(ctx context.Context, first *int64, skip *int64, where *model.GetUserTasksWhere, orderBy *string, orderDirection *string) (*model.GetUserTasksResp, error)
	QueryTaskExist(ctx context.Context, input *model.AddTask) (bool, error)
	GetLatestOscore(ctx context.Context, did string) (*model.UserLatestOscore, error)
	GetAlgorithmMethods(ctx context.Context, did string) ([]*model.ProviderMethod, error)
	GetDataMethods(ctx context.Context, did string) ([]*model.ProviderMethod, error)
	GetAlgorithmProvider(ctx context.Context, did string) (*model.AlgorithmProvider, error)
	GetDataProvider(ctx context.Context, did string) (*model.DataProvider, error)
	GetUserTask(ctx context.Context, key string, taskID int64) (*model.UserTasks, error)
	GetAlgorithmProviderMethod(ctx context.Context, did string, name string) (*model.ProviderMethod, error)
	GetDataProviderMethod(ctx context.Context, did string, name string) (*model.ProviderMethod, error)
	GetUserGenNFTCount(ctx context.Context, did string) (*model.GenNFTCountResp, error)
	GetUserGenReputationCount(ctx context.Context, did string) (*model.GenReputationCountResp, error)
	GetUserCredentials(ctx context.Context, first *int64, skip *int64, where model.UserCredntialWhere, orderBy *string, orderDirection *string) (*model.UserCredentials, error)
	GetAllDataProviderMethod(ctx context.Context, first *int64, skip *int64, where *model.DataProviderMethodWhere, orderBy *string, orderDirection *string, labels model.LabelsInfo) (*model.GetAllDataProviderMethodsResp, error)
	GetAllAlgorithmProviderMethod(ctx context.Context, first *int64, skip *int64, where *model.AlgorithmProviderMethodWhere, orderBy *string, orderDirection *string, labels model.LabelsInfo) (*model.GetAllAlgorithmProviderMethodsResp, error)
	GetCompositeDpInfo(ctx context.Context, did string, method string) ([]*model.MethodInfo, error)
	GetAllAPInfo(ctx context.Context) ([]*model.MethodInfo, error)
	GetBasedVotingStrategy(ctx context.Context, addrs []string, space string, snapshot string, network string, options *model.SnapShotOptions) ([]*model.StrategyResult, error)
	GetUserBasicInfo(ctx context.Context, did string) (*model.UserBasicInfo, error)
	GetApplicationInfo(ctx context.Context, did string) (*model.ApplicationInfo, error)
	QueryOuterTask(ctx context.Context, input *model.OuterTaskReq) (*model.UserTasks, error)
	RequestChanllenge(ctx context.Context, input *model.ClientHello) (*model.ServerHello, error)
	QueryThirdPartyVc(ctx context.Context, did string, mediaType string) (string, error)
	QueryAllThirdPartyVcStatus(ctx context.Context, did string) ([]*model.ThirdPartyVcStatus, error)
	QueryUserKycInfo(ctx context.Context, did string) (string, error)
	QueryUserPublishedDp(ctx context.Context, userDid string) (*model.DpInfoRes, error)
	QueryUserLatestDPInfo(ctx context.Context, userDid string) (*model.DpInfoRes, error)
	QueryDPDataSetInfo(ctx context.Context, userDid string, dataSetID int64) (*model.DpDataSetRes, error)
	QueryUserDPDataSetList(ctx context.Context, userDid string, dataSetName string, status string, page int64, size int64, labels model.LabelsInfo) (*model.DPDataSetList, error)
	QueryDPLabels(ctx context.Context) (*model.LabelsInfos, error)
	QuerySig(ctx context.Context, addr string, nftType int64, score int64) (*model.SigResp, error)
	GetClaimNFTRecords(ctx context.Context, first *int64, skip *int64, where *model.ClaimNFTWhere, orderBy *string, orderDirection *string) (*model.ClaimNFTRecordsResp, error)
	GetNFTSettings(ctx context.Context, first *int64, skip *int64, where *model.NFTSettingWhere, orderBy *string, orderDirection *string) (*model.NFTSettingResp, error)
	GetUserClaimedNft(ctx context.Context, first *int64, skip *int64, where *model.UserClaimedNFTWhere, orderBy *string, orderDirection *string) (*model.UserClaimedNFTResp, error)
	GetNFTClaimedCount(ctx context.Context, nftType int64, userDid string) (*model.NFTClaimedCountResp, error)
	QueryUserPublishedAp(ctx context.Context, userDid string) (*model.ApInfoRes, error)
	QueryUserLatestAPInfo(ctx context.Context, userDid string) (*model.ApInfoRes, error)
	QueryAPDataSetInfo(ctx context.Context, userDid string, dataSetID int64) (*model.ApDataSetRes, error)
	QueryUserAPDataSetList(ctx context.Context, userDid string, dataSetName string, status string, page int64, size int64, labels model.LabelsInfo) (*model.APDataSetList, error)
	QueryAPLabels(ctx context.Context) (*model.LabelsInfos, error)
	QueryUserSNSBinding(ctx context.Context, callerDid string, address string, encrypt bool) (*model.SNSBindingResp, error)
	QueryUserBasicInfo(ctx context.Context, userDid string) (*model.UserBasicInfoResp, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "APDataSetList.apDataSetData":
		if e.complexity.APDataSetList.ApDataSetData == nil {
			break
		}

		return e.complexity.APDataSetList.ApDataSetData(childComplexity), true

	case "APDataSetList.curPageNum":
		if e.complexity.APDataSetList.CurPageNum == nil {
			break
		}

		return e.complexity.APDataSetList.CurPageNum(childComplexity), true

	case "APDataSetList.totalNum":
		if e.complexity.APDataSetList.TotalNum == nil {
			break
		}

		return e.complexity.APDataSetList.TotalNum(childComplexity), true

	case "APMethodWithAp.did":
		if e.complexity.APMethodWithAp.Did == nil {
			break
		}

		return e.complexity.APMethodWithAp.Did(childComplexity), true

	case "APMethodWithAp.icon":
		if e.complexity.APMethodWithAp.Icon == nil {
			break
		}

		return e.complexity.APMethodWithAp.Icon(childComplexity), true

	case "APMethodWithAp.labels":
		if e.complexity.APMethodWithAp.Labels == nil {
			break
		}

		return e.complexity.APMethodWithAp.Labels(childComplexity), true

	case "APMethodWithAp.method":
		if e.complexity.APMethodWithAp.Method == nil {
			break
		}

		return e.complexity.APMethodWithAp.Method(childComplexity), true

	case "APMethodWithAp.methodDescription":
		if e.complexity.APMethodWithAp.MethodDescription == nil {
			break
		}

		return e.complexity.APMethodWithAp.MethodDescription(childComplexity), true

	case "APMethodWithAp.methodName":
		if e.complexity.APMethodWithAp.MethodName == nil {
			break
		}

		return e.complexity.APMethodWithAp.MethodName(childComplexity), true

	case "APMethodWithAp.name":
		if e.complexity.APMethodWithAp.Name == nil {
			break
		}

		return e.complexity.APMethodWithAp.Name(childComplexity), true

	case "APMethodWithAp.used":
		if e.complexity.APMethodWithAp.Used == nil {
			break
		}

		return e.complexity.APMethodWithAp.Used(childComplexity), true

	case "AlgorithmProvider.apiState":
		if e.complexity.AlgorithmProvider.APIState == nil {
			break
		}

		return e.complexity.AlgorithmProvider.APIState(childComplexity), true

	case "AlgorithmProvider.author":
		if e.complexity.AlgorithmProvider.Author == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Author(childComplexity), true

	case "AlgorithmProvider.createTime":
		if e.complexity.AlgorithmProvider.CreateTime == nil {
			break
		}

		return e.complexity.AlgorithmProvider.CreateTime(childComplexity), true

	case "AlgorithmProvider.delay":
		if e.complexity.AlgorithmProvider.Delay == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Delay(childComplexity), true

	case "AlgorithmProvider.did":
		if e.complexity.AlgorithmProvider.Did == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Did(childComplexity), true

	case "AlgorithmProvider.icon":
		if e.complexity.AlgorithmProvider.Icon == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Icon(childComplexity), true

	case "AlgorithmProvider.introduction":
		if e.complexity.AlgorithmProvider.Introduction == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Introduction(childComplexity), true

	case "AlgorithmProvider.invokeFrequency":
		if e.complexity.AlgorithmProvider.InvokeFrequency == nil {
			break
		}

		return e.complexity.AlgorithmProvider.InvokeFrequency(childComplexity), true

	case "AlgorithmProvider.name":
		if e.complexity.AlgorithmProvider.Name == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Name(childComplexity), true

	case "AlgorithmProvider.popularity":
		if e.complexity.AlgorithmProvider.Popularity == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Popularity(childComplexity), true

	case "AlgorithmProvider.provider":
		if e.complexity.AlgorithmProvider.Provider == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Provider(childComplexity), true

	case "AlgorithmProvider.title":
		if e.complexity.AlgorithmProvider.Title == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Title(childComplexity), true

	case "AlgorithmProvider.type":
		if e.complexity.AlgorithmProvider.Type == nil {
			break
		}

		return e.complexity.AlgorithmProvider.Type(childComplexity), true

	case "ApDataSetRes.apDid":
		if e.complexity.ApDataSetRes.ApDid == nil {
			break
		}

		return e.complexity.ApDataSetRes.ApDid(childComplexity), true

	case "ApDataSetRes.dataSetDesc":
		if e.complexity.ApDataSetRes.DataSetDesc == nil {
			break
		}

		return e.complexity.ApDataSetRes.DataSetDesc(childComplexity), true

	case "ApDataSetRes.dataSetID":
		if e.complexity.ApDataSetRes.DataSetID == nil {
			break
		}

		return e.complexity.ApDataSetRes.DataSetID(childComplexity), true

	case "ApDataSetRes.dataSetMethodName":
		if e.complexity.ApDataSetRes.DataSetMethodName == nil {
			break
		}

		return e.complexity.ApDataSetRes.DataSetMethodName(childComplexity), true

	case "ApDataSetRes.dataSetName":
		if e.complexity.ApDataSetRes.DataSetName == nil {
			break
		}

		return e.complexity.ApDataSetRes.DataSetName(childComplexity), true

	case "ApDataSetRes.httpMethod":
		if e.complexity.ApDataSetRes.HTTPMethod == nil {
			break
		}

		return e.complexity.ApDataSetRes.HTTPMethod(childComplexity), true

	case "ApDataSetRes.httpURL":
		if e.complexity.ApDataSetRes.HTTPURL == nil {
			break
		}

		return e.complexity.ApDataSetRes.HTTPURL(childComplexity), true

	case "ApDataSetRes.Labels":
		if e.complexity.ApDataSetRes.Labels == nil {
			break
		}

		return e.complexity.ApDataSetRes.Labels(childComplexity), true

	case "ApDataSetRes.Params":
		if e.complexity.ApDataSetRes.Params == nil {
			break
		}

		return e.complexity.ApDataSetRes.Params(childComplexity), true

	case "ApDataSetRes.ResDesc":
		if e.complexity.ApDataSetRes.ResDesc == nil {
			break
		}

		return e.complexity.ApDataSetRes.ResDesc(childComplexity), true

	case "ApDataSetRes.Status":
		if e.complexity.ApDataSetRes.Status == nil {
			break
		}

		return e.complexity.ApDataSetRes.Status(childComplexity), true

	case "ApInfoRes.apDesc":
		if e.complexity.ApInfoRes.ApDesc == nil {
			break
		}

		return e.complexity.ApInfoRes.ApDesc(childComplexity), true

	case "ApInfoRes.apDid":
		if e.complexity.ApInfoRes.ApDid == nil {
			break
		}

		return e.complexity.ApInfoRes.ApDid(childComplexity), true

	case "ApInfoRes.apInfoID":
		if e.complexity.ApInfoRes.ApInfoID == nil {
			break
		}

		return e.complexity.ApInfoRes.ApInfoID(childComplexity), true

	case "ApInfoRes.apName":
		if e.complexity.ApInfoRes.ApName == nil {
			break
		}

		return e.complexity.ApInfoRes.ApName(childComplexity), true

	case "ApInfoRes.Avatar":
		if e.complexity.ApInfoRes.Avatar == nil {
			break
		}

		return e.complexity.ApInfoRes.Avatar(childComplexity), true

	case "ApInfoRes.ResDesc":
		if e.complexity.ApInfoRes.ResDesc == nil {
			break
		}

		return e.complexity.ApInfoRes.ResDesc(childComplexity), true

	case "ApInfoRes.Status":
		if e.complexity.ApInfoRes.Status == nil {
			break
		}

		return e.complexity.ApInfoRes.Status(childComplexity), true

	case "ApplicationInfo.did":
		if e.complexity.ApplicationInfo.Did == nil {
			break
		}

		return e.complexity.ApplicationInfo.Did(childComplexity), true

	case "ApplicationInfo.name":
		if e.complexity.ApplicationInfo.Name == nil {
			break
		}

		return e.complexity.ApplicationInfo.Name(childComplexity), true

	case "ApplicationInfo.website":
		if e.complexity.ApplicationInfo.Website == nil {
			break
		}

		return e.complexity.ApplicationInfo.Website(childComplexity), true

	case "ChainAddress.chain":
		if e.complexity.ChainAddress.Chain == nil {
			break
		}

		return e.complexity.ChainAddress.Chain(childComplexity), true

	case "ChainAddress.contract_address":
		if e.complexity.ChainAddress.ContractAddress == nil {
			break
		}

		return e.complexity.ChainAddress.ContractAddress(childComplexity), true

	case "ClaimNFTRecord.chain":
		if e.complexity.ClaimNFTRecord.Chain == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.Chain(childComplexity), true

	case "ClaimNFTRecord.contract_address":
		if e.complexity.ClaimNFTRecord.ContractAddress == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.ContractAddress(childComplexity), true

	case "ClaimNFTRecord.create_time":
		if e.complexity.ClaimNFTRecord.CreateTime == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.CreateTime(childComplexity), true

	case "ClaimNFTRecord.nft_type":
		if e.complexity.ClaimNFTRecord.NftType == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.NftType(childComplexity), true

	case "ClaimNFTRecord.result":
		if e.complexity.ClaimNFTRecord.Result == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.Result(childComplexity), true

	case "ClaimNFTRecord.score":
		if e.complexity.ClaimNFTRecord.Score == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.Score(childComplexity), true

	case "ClaimNFTRecord.tx_hash":
		if e.complexity.ClaimNFTRecord.TxHash == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.TxHash(childComplexity), true

	case "ClaimNFTRecord.user_address":
		if e.complexity.ClaimNFTRecord.UserAddress == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.UserAddress(childComplexity), true

	case "ClaimNFTRecord.user_did":
		if e.complexity.ClaimNFTRecord.UserDid == nil {
			break
		}

		return e.complexity.ClaimNFTRecord.UserDid(childComplexity), true

	case "ClaimNFTRecordsResp.count":
		if e.complexity.ClaimNFTRecordsResp.Count == nil {
			break
		}

		return e.complexity.ClaimNFTRecordsResp.Count(childComplexity), true

	case "ClaimNFTRecordsResp.records":
		if e.complexity.ClaimNFTRecordsResp.Records == nil {
			break
		}

		return e.complexity.ClaimNFTRecordsResp.Records(childComplexity), true

	case "ClaimNFTResponse.address":
		if e.complexity.ClaimNFTResponse.Address == nil {
			break
		}

		return e.complexity.ClaimNFTResponse.Address(childComplexity), true

	case "ClaimNFTResponse.errorCode":
		if e.complexity.ClaimNFTResponse.ErrorCode == nil {
			break
		}

		return e.complexity.ClaimNFTResponse.ErrorCode(childComplexity), true

	case "ClaimNFTResponse.param":
		if e.complexity.ClaimNFTResponse.Param == nil {
			break
		}

		return e.complexity.ClaimNFTResponse.Param(childComplexity), true

	case "DPAndMethod.dp":
		if e.complexity.DPAndMethod.Dp == nil {
			break
		}

		return e.complexity.DPAndMethod.Dp(childComplexity), true

	case "DPAndMethod.method":
		if e.complexity.DPAndMethod.Method == nil {
			break
		}

		return e.complexity.DPAndMethod.Method(childComplexity), true

	case "DPDataSetList.curPageNum":
		if e.complexity.DPDataSetList.CurPageNum == nil {
			break
		}

		return e.complexity.DPDataSetList.CurPageNum(childComplexity), true

	case "DPDataSetList.dpDataSetData":
		if e.complexity.DPDataSetList.DpDataSetData == nil {
			break
		}

		return e.complexity.DPDataSetList.DpDataSetData(childComplexity), true

	case "DPDataSetList.totalNum":
		if e.complexity.DPDataSetList.TotalNum == nil {
			break
		}

		return e.complexity.DPDataSetList.TotalNum(childComplexity), true

	case "DPMethodWithDp.did":
		if e.complexity.DPMethodWithDp.Did == nil {
			break
		}

		return e.complexity.DPMethodWithDp.Did(childComplexity), true

	case "DPMethodWithDp.icon":
		if e.complexity.DPMethodWithDp.Icon == nil {
			break
		}

		return e.complexity.DPMethodWithDp.Icon(childComplexity), true

	case "DPMethodWithDp.labels":
		if e.complexity.DPMethodWithDp.Labels == nil {
			break
		}

		return e.complexity.DPMethodWithDp.Labels(childComplexity), true

	case "DPMethodWithDp.method":
		if e.complexity.DPMethodWithDp.Method == nil {
			break
		}

		return e.complexity.DPMethodWithDp.Method(childComplexity), true

	case "DPMethodWithDp.methodDescription":
		if e.complexity.DPMethodWithDp.MethodDescription == nil {
			break
		}

		return e.complexity.DPMethodWithDp.MethodDescription(childComplexity), true

	case "DPMethodWithDp.methodName":
		if e.complexity.DPMethodWithDp.MethodName == nil {
			break
		}

		return e.complexity.DPMethodWithDp.MethodName(childComplexity), true

	case "DPMethodWithDp.name":
		if e.complexity.DPMethodWithDp.Name == nil {
			break
		}

		return e.complexity.DPMethodWithDp.Name(childComplexity), true

	case "DPMethodWithDp.used":
		if e.complexity.DPMethodWithDp.Used == nil {
			break
		}

		return e.complexity.DPMethodWithDp.Used(childComplexity), true

	case "DataProvider.apiState":
		if e.complexity.DataProvider.APIState == nil {
			break
		}

		return e.complexity.DataProvider.APIState(childComplexity), true

	case "DataProvider.author":
		if e.complexity.DataProvider.Author == nil {
			break
		}

		return e.complexity.DataProvider.Author(childComplexity), true

	case "DataProvider.createTime":
		if e.complexity.DataProvider.CreateTime == nil {
			break
		}

		return e.complexity.DataProvider.CreateTime(childComplexity), true

	case "DataProvider.delay":
		if e.complexity.DataProvider.Delay == nil {
			break
		}

		return e.complexity.DataProvider.Delay(childComplexity), true

	case "DataProvider.did":
		if e.complexity.DataProvider.Did == nil {
			break
		}

		return e.complexity.DataProvider.Did(childComplexity), true

	case "DataProvider.icon":
		if e.complexity.DataProvider.Icon == nil {
			break
		}

		return e.complexity.DataProvider.Icon(childComplexity), true

	case "DataProvider.introduction":
		if e.complexity.DataProvider.Introduction == nil {
			break
		}

		return e.complexity.DataProvider.Introduction(childComplexity), true

	case "DataProvider.invokeFrequency":
		if e.complexity.DataProvider.InvokeFrequency == nil {
			break
		}

		return e.complexity.DataProvider.InvokeFrequency(childComplexity), true

	case "DataProvider.name":
		if e.complexity.DataProvider.Name == nil {
			break
		}

		return e.complexity.DataProvider.Name(childComplexity), true

	case "DataProvider.popularity":
		if e.complexity.DataProvider.Popularity == nil {
			break
		}

		return e.complexity.DataProvider.Popularity(childComplexity), true

	case "DataProvider.provider":
		if e.complexity.DataProvider.Provider == nil {
			break
		}

		return e.complexity.DataProvider.Provider(childComplexity), true

	case "DataProvider.title":
		if e.complexity.DataProvider.Title == nil {
			break
		}

		return e.complexity.DataProvider.Title(childComplexity), true

	case "DataProvider.type":
		if e.complexity.DataProvider.Type == nil {
			break
		}

		return e.complexity.DataProvider.Type(childComplexity), true

	case "DpDataSetRes.dataSetDesc":
		if e.complexity.DpDataSetRes.DataSetDesc == nil {
			break
		}

		return e.complexity.DpDataSetRes.DataSetDesc(childComplexity), true

	case "DpDataSetRes.dataSetID":
		if e.complexity.DpDataSetRes.DataSetID == nil {
			break
		}

		return e.complexity.DpDataSetRes.DataSetID(childComplexity), true

	case "DpDataSetRes.dataSetMethodName":
		if e.complexity.DpDataSetRes.DataSetMethodName == nil {
			break
		}

		return e.complexity.DpDataSetRes.DataSetMethodName(childComplexity), true

	case "DpDataSetRes.dataSetName":
		if e.complexity.DpDataSetRes.DataSetName == nil {
			break
		}

		return e.complexity.DpDataSetRes.DataSetName(childComplexity), true

	case "DpDataSetRes.dpDid":
		if e.complexity.DpDataSetRes.DpDid == nil {
			break
		}

		return e.complexity.DpDataSetRes.DpDid(childComplexity), true

	case "DpDataSetRes.httpMethod":
		if e.complexity.DpDataSetRes.HTTPMethod == nil {
			break
		}

		return e.complexity.DpDataSetRes.HTTPMethod(childComplexity), true

	case "DpDataSetRes.httpURL":
		if e.complexity.DpDataSetRes.HTTPURL == nil {
			break
		}

		return e.complexity.DpDataSetRes.HTTPURL(childComplexity), true

	case "DpDataSetRes.Labels":
		if e.complexity.DpDataSetRes.Labels == nil {
			break
		}

		return e.complexity.DpDataSetRes.Labels(childComplexity), true

	case "DpDataSetRes.Params":
		if e.complexity.DpDataSetRes.Params == nil {
			break
		}

		return e.complexity.DpDataSetRes.Params(childComplexity), true

	case "DpDataSetRes.ResDesc":
		if e.complexity.DpDataSetRes.ResDesc == nil {
			break
		}

		return e.complexity.DpDataSetRes.ResDesc(childComplexity), true

	case "DpDataSetRes.Status":
		if e.complexity.DpDataSetRes.Status == nil {
			break
		}

		return e.complexity.DpDataSetRes.Status(childComplexity), true

	case "DpInfoRes.Avatar":
		if e.complexity.DpInfoRes.Avatar == nil {
			break
		}

		return e.complexity.DpInfoRes.Avatar(childComplexity), true

	case "DpInfoRes.dpDesc":
		if e.complexity.DpInfoRes.DpDesc == nil {
			break
		}

		return e.complexity.DpInfoRes.DpDesc(childComplexity), true

	case "DpInfoRes.dpDid":
		if e.complexity.DpInfoRes.DpDid == nil {
			break
		}

		return e.complexity.DpInfoRes.DpDid(childComplexity), true

	case "DpInfoRes.dpInfoID":
		if e.complexity.DpInfoRes.DpInfoID == nil {
			break
		}

		return e.complexity.DpInfoRes.DpInfoID(childComplexity), true

	case "DpInfoRes.dpName":
		if e.complexity.DpInfoRes.DpName == nil {
			break
		}

		return e.complexity.DpInfoRes.DpName(childComplexity), true

	case "DpInfoRes.ResDesc":
		if e.complexity.DpInfoRes.ResDesc == nil {
			break
		}

		return e.complexity.DpInfoRes.ResDesc(childComplexity), true

	case "DpInfoRes.Status":
		if e.complexity.DpInfoRes.Status == nil {
			break
		}

		return e.complexity.DpInfoRes.Status(childComplexity), true

	case "GenNFTCountResp.count":
		if e.complexity.GenNFTCountResp.Count == nil {
			break
		}

		return e.complexity.GenNFTCountResp.Count(childComplexity), true

	case "GenReputationCountResp.count":
		if e.complexity.GenReputationCountResp.Count == nil {
			break
		}

		return e.complexity.GenReputationCountResp.Count(childComplexity), true

	case "GetAllAlgorithmProviderMethodsResp.data":
		if e.complexity.GetAllAlgorithmProviderMethodsResp.Data == nil {
			break
		}

		return e.complexity.GetAllAlgorithmProviderMethodsResp.Data(childComplexity), true

	case "GetAllAlgorithmProviderMethodsResp.total":
		if e.complexity.GetAllAlgorithmProviderMethodsResp.Total == nil {
			break
		}

		return e.complexity.GetAllAlgorithmProviderMethodsResp.Total(childComplexity), true

	case "GetAllAlgorithmProvidersResp.data":
		if e.complexity.GetAllAlgorithmProvidersResp.Data == nil {
			break
		}

		return e.complexity.GetAllAlgorithmProvidersResp.Data(childComplexity), true

	case "GetAllAlgorithmProvidersResp.total":
		if e.complexity.GetAllAlgorithmProvidersResp.Total == nil {
			break
		}

		return e.complexity.GetAllAlgorithmProvidersResp.Total(childComplexity), true

	case "GetAllDataProviderMethodsResp.data":
		if e.complexity.GetAllDataProviderMethodsResp.Data == nil {
			break
		}

		return e.complexity.GetAllDataProviderMethodsResp.Data(childComplexity), true

	case "GetAllDataProviderMethodsResp.total":
		if e.complexity.GetAllDataProviderMethodsResp.Total == nil {
			break
		}

		return e.complexity.GetAllDataProviderMethodsResp.Total(childComplexity), true

	case "GetAllDataProviders.data":
		if e.complexity.GetAllDataProviders.Data == nil {
			break
		}

		return e.complexity.GetAllDataProviders.Data(childComplexity), true

	case "GetAllDataProviders.total":
		if e.complexity.GetAllDataProviders.Total == nil {
			break
		}

		return e.complexity.GetAllDataProviders.Total(childComplexity), true

	case "GetUserTasksResp.tasks":
		if e.complexity.GetUserTasksResp.Tasks == nil {
			break
		}

		return e.complexity.GetUserTasksResp.Tasks(childComplexity), true

	case "GetUserTasksResp.total_count":
		if e.complexity.GetUserTasksResp.TotalCount == nil {
			break
		}

		return e.complexity.GetUserTasksResp.TotalCount(childComplexity), true

	case "LabelsInfos.blockChain":
		if e.complexity.LabelsInfos.BlockChain == nil {
			break
		}

		return e.complexity.LabelsInfos.BlockChain(childComplexity), true

	case "LabelsInfos.category":
		if e.complexity.LabelsInfos.Category == nil {
			break
		}

		return e.complexity.LabelsInfos.Category(childComplexity), true

	case "LabelsInfos.scenario":
		if e.complexity.LabelsInfos.Scenario == nil {
			break
		}

		return e.complexity.LabelsInfos.Scenario(childComplexity), true

	case "MethodDetail.compositeData":
		if e.complexity.MethodDetail.CompositeData == nil {
			break
		}

		return e.complexity.MethodDetail.CompositeData(childComplexity), true

	case "MethodDetail.compositeSetting":
		if e.complexity.MethodDetail.CompositeSetting == nil {
			break
		}

		return e.complexity.MethodDetail.CompositeSetting(childComplexity), true

	case "MethodDetail.createTime":
		if e.complexity.MethodDetail.CreateTime == nil {
			break
		}

		return e.complexity.MethodDetail.CreateTime(childComplexity), true

	case "MethodDetail.description":
		if e.complexity.MethodDetail.Description == nil {
			break
		}

		return e.complexity.MethodDetail.Description(childComplexity), true

	case "MethodDetail.did":
		if e.complexity.MethodDetail.Did == nil {
			break
		}

		return e.complexity.MethodDetail.Did(childComplexity), true

	case "MethodDetail.httpMethod":
		if e.complexity.MethodDetail.HTTPMethod == nil {
			break
		}

		return e.complexity.MethodDetail.HTTPMethod(childComplexity), true

	case "MethodDetail.invoked":
		if e.complexity.MethodDetail.Invoked == nil {
			break
		}

		return e.complexity.MethodDetail.Invoked(childComplexity), true

	case "MethodDetail.labels":
		if e.complexity.MethodDetail.Labels == nil {
			break
		}

		return e.complexity.MethodDetail.Labels(childComplexity), true

	case "MethodDetail.latency":
		if e.complexity.MethodDetail.Latency == nil {
			break
		}

		return e.complexity.MethodDetail.Latency(childComplexity), true

	case "MethodDetail.method":
		if e.complexity.MethodDetail.Method == nil {
			break
		}

		return e.complexity.MethodDetail.Method(childComplexity), true

	case "MethodDetail.name":
		if e.complexity.MethodDetail.Name == nil {
			break
		}

		return e.complexity.MethodDetail.Name(childComplexity), true

	case "MethodDetail.param":
		if e.complexity.MethodDetail.Param == nil {
			break
		}

		return e.complexity.MethodDetail.Param(childComplexity), true

	case "MethodDetail.paramSchema":
		if e.complexity.MethodDetail.ParamSchema == nil {
			break
		}

		return e.complexity.MethodDetail.ParamSchema(childComplexity), true

	case "MethodDetail.resultSchema":
		if e.complexity.MethodDetail.ResultSchema == nil {
			break
		}

		return e.complexity.MethodDetail.ResultSchema(childComplexity), true

	case "MethodDetail.status":
		if e.complexity.MethodDetail.Status == nil {
			break
		}

		return e.complexity.MethodDetail.Status(childComplexity), true

	case "MethodDetail.url":
		if e.complexity.MethodDetail.URL == nil {
			break
		}

		return e.complexity.MethodDetail.URL(childComplexity), true

	case "MethodInfo.data":
		if e.complexity.MethodInfo.Data == nil {
			break
		}

		return e.complexity.MethodInfo.Data(childComplexity), true

	case "MethodInfo.did":
		if e.complexity.MethodInfo.Did == nil {
			break
		}

		return e.complexity.MethodInfo.Did(childComplexity), true

	case "MethodInfo.title":
		if e.complexity.MethodInfo.Title == nil {
			break
		}

		return e.complexity.MethodInfo.Title(childComplexity), true

	case "Mutation.addNewOuterTask":
		if e.complexity.Mutation.AddNewOuterTask == nil {
			break
		}

		args, err := ec.field_Mutation_addNewOuterTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddNewOuterTask(childComplexity, args["input"].(model.AddNewOuterTaskReq)), true

	case "Mutation.addTask":
		if e.complexity.Mutation.AddTask == nil {
			break
		}

		args, err := ec.field_Mutation_addTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTask(childComplexity, args["input"].(model.AddTask), args["overwrite"].(bool)), true

	case "Mutation.addUserBasicInfo":
		if e.complexity.Mutation.AddUserBasicInfo == nil {
			break
		}

		args, err := ec.field_Mutation_addUserBasicInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserBasicInfo(childComplexity, args["input"].(model.AddUserBasicInfoReq)), true

	case "Mutation.bindAddress":
		if e.complexity.Mutation.BindAddress == nil {
			break
		}

		args, err := ec.field_Mutation_bindAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BindAddress(childComplexity, args["input"].(model.BindAddress)), true

	case "Mutation.changeAddressVisible":
		if e.complexity.Mutation.ChangeAddressVisible == nil {
			break
		}

		args, err := ec.field_Mutation_changeAddressVisible_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeAddressVisible(childComplexity, args["userDID"].(string), args["chain"].(string), args["address"].(string), args["visible"].(bool)), true

	case "Mutation.claimNFT":
		if e.complexity.Mutation.ClaimNft == nil {
			break
		}

		args, err := ec.field_Mutation_claimNFT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClaimNft(childComplexity, args["did"].(string), args["chain"].(string), args["nftType"].(int64)), true

	case "Mutation.DeleteAPDataSet":
		if e.complexity.Mutation.DeleteAPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteAPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAPDataSet(childComplexity, args["userDID"].(string), args["dataSetID"].(int64)), true

	case "Mutation.DeleteDPDataSet":
		if e.complexity.Mutation.DeleteDPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteDPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDPDataSet(childComplexity, args["userDID"].(string), args["dataSetID"].(int64)), true

	case "Mutation.editAppNameAppInfo":
		if e.complexity.Mutation.EditAppNameAppInfo == nil {
			break
		}

		args, err := ec.field_Mutation_editAppNameAppInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditAppNameAppInfo(childComplexity, args["did"].(string), args["appName"].(string)), true

	case "Mutation.editEmailAddrBasicInfo":
		if e.complexity.Mutation.EditEmailAddrBasicInfo == nil {
			break
		}

		args, err := ec.field_Mutation_editEmailAddrBasicInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditEmailAddrBasicInfo(childComplexity, args["did"].(string), args["email"].(string), args["verifyCode"].(string)), true

	case "Mutation.editNickNameBasicInfo":
		if e.complexity.Mutation.EditNickNameBasicInfo == nil {
			break
		}

		args, err := ec.field_Mutation_editNickNameBasicInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditNickNameBasicInfo(childComplexity, args["did"].(string), args["nickName"].(string)), true

	case "Mutation.editWebsiteAppInfo":
		if e.complexity.Mutation.EditWebsiteAppInfo == nil {
			break
		}

		args, err := ec.field_Mutation_editWebsiteAppInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditWebsiteAppInfo(childComplexity, args["did"].(string), args["website"].(string)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(model.Login)), true

	case "Mutation.PublishAPDataSet":
		if e.complexity.Mutation.PublishAPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_PublishAPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PublishAPDataSet(childComplexity, args["userDID"].(string), args["input"].(*model.ApDataSetInfo)), true

	case "Mutation.PublishDPDataSet":
		if e.complexity.Mutation.PublishDPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_PublishDPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PublishDPDataSet(childComplexity, args["userDID"].(string), args["input"].(*model.DpDataSetInfo)), true

	case "Mutation.refreshToken":
		if e.complexity.Mutation.RefreshToken == nil {
			break
		}

		args, err := ec.field_Mutation_refreshToken_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefreshToken(childComplexity, args["input"].(model.RefreshTokenInput)), true

	case "Mutation.requestEmailVCode":
		if e.complexity.Mutation.RequestEmailVCode == nil {
			break
		}

		args, err := ec.field_Mutation_requestEmailVCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestEmailVCode(childComplexity, args["did"].(string), args["email"].(string)), true

	case "Mutation.requestOscore":
		if e.complexity.Mutation.RequestOscore == nil {
			break
		}

		args, err := ec.field_Mutation_requestOscore_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestOscore(childComplexity, args["input"].(*model.RequestOscoreReq)), true

	case "Mutation.RevokeAPDataSet":
		if e.complexity.Mutation.RevokeAPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_RevokeAPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeAPDataSet(childComplexity, args["userDID"].(string), args["dataSetID"].(int64)), true

	case "Mutation.RevokeAPInfo":
		if e.complexity.Mutation.RevokeAPInfo == nil {
			break
		}

		args, err := ec.field_Mutation_RevokeAPInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeAPInfo(childComplexity, args["userDID"].(string), args["apInfoID"].(int64)), true

	case "Mutation.RevokeDPDataSet":
		if e.complexity.Mutation.RevokeDPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_RevokeDPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeDPDataSet(childComplexity, args["userDID"].(string), args["dataSetID"].(int64)), true

	case "Mutation.RevokeDPInfo":
		if e.complexity.Mutation.RevokeDPInfo == nil {
			break
		}

		args, err := ec.field_Mutation_RevokeDPInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokeDPInfo(childComplexity, args["userDID"].(string), args["dpInfoID"].(int64)), true

	case "Mutation.RevokePublishedAPDataSet":
		if e.complexity.Mutation.RevokePublishedAPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_RevokePublishedAPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokePublishedAPDataSet(childComplexity, args["userDID"].(string), args["dataSetID"].(int64)), true

	case "Mutation.RevokePublishedDPDataSet":
		if e.complexity.Mutation.RevokePublishedDPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_RevokePublishedDPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RevokePublishedDPDataSet(childComplexity, args["userDID"].(string), args["dataSetID"].(int64)), true

	case "Mutation.SaveAPDataSet":
		if e.complexity.Mutation.SaveAPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_SaveAPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveAPDataSet(childComplexity, args["userDID"].(string), args["input"].(*model.ApDataSetInfo)), true

	case "Mutation.SaveAPInfo":
		if e.complexity.Mutation.SaveAPInfo == nil {
			break
		}

		args, err := ec.field_Mutation_SaveAPInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveAPInfo(childComplexity, args["userDID"].(string), args["input"].(*model.SubmitApInfo)), true

	case "Mutation.SaveDPDataSet":
		if e.complexity.Mutation.SaveDPDataSet == nil {
			break
		}

		args, err := ec.field_Mutation_SaveDPDataSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveDPDataSet(childComplexity, args["userDID"].(string), args["input"].(*model.DpDataSetInfo)), true

	case "Mutation.SaveDPInfo":
		if e.complexity.Mutation.SaveDPInfo == nil {
			break
		}

		args, err := ec.field_Mutation_SaveDPInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveDPInfo(childComplexity, args["userDID"].(string), args["input"].(*model.SubmitDpInfo)), true

	case "Mutation.SaveThirdPartyVc":
		if e.complexity.Mutation.SaveThirdPartyVc == nil {
			break
		}

		args, err := ec.field_Mutation_SaveThirdPartyVc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveThirdPartyVc(childComplexity, args["did"].(string), args["mediaType"].(string), args["credential"].(string)), true

	case "Mutation.SaveUserKycInfo":
		if e.complexity.Mutation.SaveUserKycInfo == nil {
			break
		}

		args, err := ec.field_Mutation_SaveUserKycInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SaveUserKycInfo(childComplexity, args["did"].(string), args["kyc"].(string)), true

	case "Mutation.SubmitAPInfo":
		if e.complexity.Mutation.SubmitAPInfo == nil {
			break
		}

		args, err := ec.field_Mutation_SubmitAPInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitAPInfo(childComplexity, args["userDID"].(string), args["input"].(*model.SubmitApInfo)), true

	case "Mutation.submitChanllenge":
		if e.complexity.Mutation.SubmitChanllenge == nil {
			break
		}

		args, err := ec.field_Mutation_submitChanllenge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitChanllenge(childComplexity, args["input"].(model.ClientResponse)), true

	case "Mutation.submitClaimTxInfo":
		if e.complexity.Mutation.SubmitClaimTxInfo == nil {
			break
		}

		args, err := ec.field_Mutation_submitClaimTxInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitClaimTxInfo(childComplexity, args["did"].(string), args["chain"].(string), args["addr"].(string), args["nftType"].(int64), args["txhash"].(string)), true

	case "Mutation.SubmitDPInfo":
		if e.complexity.Mutation.SubmitDPInfo == nil {
			break
		}

		args, err := ec.field_Mutation_SubmitDPInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitDPInfo(childComplexity, args["userDID"].(string), args["input"].(*model.SubmitDpInfo)), true

	case "Mutation.UnBindThirdParty":
		if e.complexity.Mutation.UnBindThirdParty == nil {
			break
		}

		args, err := ec.field_Mutation_UnBindThirdParty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnBindThirdParty(childComplexity, args["did"].(string), args["mediaType"].(string)), true

	case "Mutation.unbindAddress":
		if e.complexity.Mutation.UnbindAddress == nil {
			break
		}

		args, err := ec.field_Mutation_unbindAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnbindAddress(childComplexity, args["input"].(model.UnBindAddress)), true

	case "Mutation.updateApplicationInfo":
		if e.complexity.Mutation.UpdateApplicationInfo == nil {
			break
		}

		args, err := ec.field_Mutation_updateApplicationInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateApplicationInfo(childComplexity, args["input"].(*model.ApplicationInfoReq)), true

	case "Mutation.updateUserBasicInfo":
		if e.complexity.Mutation.UpdateUserBasicInfo == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserBasicInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserBasicInfo(childComplexity, args["input"].(*model.UpdateUserBasicInfoReq)), true

	case "Mutation.UploadAvatar":
		if e.complexity.Mutation.UploadAvatar == nil {
			break
		}

		args, err := ec.field_Mutation_UploadAvatar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadAvatar(childComplexity, args["file"].(graphql.Upload)), true

	case "NFTClaimedCountResp.total_count":
		if e.complexity.NFTClaimedCountResp.TotalCount == nil {
			break
		}

		return e.complexity.NFTClaimedCountResp.TotalCount(childComplexity), true

	case "NFTClaimedCountResp.user_count":
		if e.complexity.NFTClaimedCountResp.UserCount == nil {
			break
		}

		return e.complexity.NFTClaimedCountResp.UserCount(childComplexity), true

	case "NFTParam.hash":
		if e.complexity.NFTParam.Hash == nil {
			break
		}

		return e.complexity.NFTParam.Hash(childComplexity), true

	case "NFTParam.nftType":
		if e.complexity.NFTParam.NftType == nil {
			break
		}

		return e.complexity.NFTParam.NftType(childComplexity), true

	case "NFTParam.score":
		if e.complexity.NFTParam.Score == nil {
			break
		}

		return e.complexity.NFTParam.Score(childComplexity), true

	case "NFTParam.sig":
		if e.complexity.NFTParam.Sig == nil {
			break
		}

		return e.complexity.NFTParam.Sig(childComplexity), true

	case "NFTSetting.ap_did":
		if e.complexity.NFTSetting.ApDid == nil {
			break
		}

		return e.complexity.NFTSetting.ApDid(childComplexity), true

	case "NFTSetting.ap_method":
		if e.complexity.NFTSetting.ApMethod == nil {
			break
		}

		return e.complexity.NFTSetting.ApMethod(childComplexity), true

	case "NFTSetting.ap_method_name":
		if e.complexity.NFTSetting.ApMethodName == nil {
			break
		}

		return e.complexity.NFTSetting.ApMethodName(childComplexity), true

	case "NFTSetting.ap_name":
		if e.complexity.NFTSetting.ApName == nil {
			break
		}

		return e.complexity.NFTSetting.ApName(childComplexity), true

	case "NFTSetting.chain_addresses":
		if e.complexity.NFTSetting.ChainAddresses == nil {
			break
		}

		return e.complexity.NFTSetting.ChainAddresses(childComplexity), true

	case "NFTSetting.description":
		if e.complexity.NFTSetting.Description == nil {
			break
		}

		return e.complexity.NFTSetting.Description(childComplexity), true

	case "NFTSetting.dp_did":
		if e.complexity.NFTSetting.DpDid == nil {
			break
		}

		return e.complexity.NFTSetting.DpDid(childComplexity), true

	case "NFTSetting.dp_method":
		if e.complexity.NFTSetting.DpMethod == nil {
			break
		}

		return e.complexity.NFTSetting.DpMethod(childComplexity), true

	case "NFTSetting.id":
		if e.complexity.NFTSetting.ID == nil {
			break
		}

		return e.complexity.NFTSetting.ID(childComplexity), true

	case "NFTSetting.image":
		if e.complexity.NFTSetting.Image == nil {
			break
		}

		return e.complexity.NFTSetting.Image(childComplexity), true

	case "NFTSetting.issue_by":
		if e.complexity.NFTSetting.IssueBy == nil {
			break
		}

		return e.complexity.NFTSetting.IssueBy(childComplexity), true

	case "NFTSetting.lowest_score":
		if e.complexity.NFTSetting.LowestScore == nil {
			break
		}

		return e.complexity.NFTSetting.LowestScore(childComplexity), true

	case "NFTSetting.name":
		if e.complexity.NFTSetting.Name == nil {
			break
		}

		return e.complexity.NFTSetting.Name(childComplexity), true

	case "NFTSetting.restriction":
		if e.complexity.NFTSetting.Restriction == nil {
			break
		}

		return e.complexity.NFTSetting.Restriction(childComplexity), true

	case "NFTSetting.valid_days":
		if e.complexity.NFTSetting.ValidDays == nil {
			break
		}

		return e.complexity.NFTSetting.ValidDays(childComplexity), true

	case "NFTSettingResp.count":
		if e.complexity.NFTSettingResp.Count == nil {
			break
		}

		return e.complexity.NFTSettingResp.Count(childComplexity), true

	case "NFTSettingResp.records":
		if e.complexity.NFTSettingResp.Records == nil {
			break
		}

		return e.complexity.NFTSettingResp.Records(childComplexity), true

	case "PriceInfo.chargeType":
		if e.complexity.PriceInfo.ChargeType == nil {
			break
		}

		return e.complexity.PriceInfo.ChargeType(childComplexity), true

	case "PriceInfo.price":
		if e.complexity.PriceInfo.Price == nil {
			break
		}

		return e.complexity.PriceInfo.Price(childComplexity), true

	case "PriceInfo.priceType":
		if e.complexity.PriceInfo.PriceType == nil {
			break
		}

		return e.complexity.PriceInfo.PriceType(childComplexity), true

	case "ProviderMethod.createTime":
		if e.complexity.ProviderMethod.CreateTime == nil {
			break
		}

		return e.complexity.ProviderMethod.CreateTime(childComplexity), true

	case "ProviderMethod.description":
		if e.complexity.ProviderMethod.Description == nil {
			break
		}

		return e.complexity.ProviderMethod.Description(childComplexity), true

	case "ProviderMethod.hasDataSet":
		if e.complexity.ProviderMethod.HasDataSet == nil {
			break
		}

		return e.complexity.ProviderMethod.HasDataSet(childComplexity), true

	case "ProviderMethod.labels":
		if e.complexity.ProviderMethod.Labels == nil {
			break
		}

		return e.complexity.ProviderMethod.Labels(childComplexity), true

	case "ProviderMethod.name":
		if e.complexity.ProviderMethod.Name == nil {
			break
		}

		return e.complexity.ProviderMethod.Name(childComplexity), true

	case "ProviderMethod.nftType":
		if e.complexity.ProviderMethod.NftType == nil {
			break
		}

		return e.complexity.ProviderMethod.NftType(childComplexity), true

	case "ProviderMethod.paramSchema":
		if e.complexity.ProviderMethod.ParamSchema == nil {
			break
		}

		return e.complexity.ProviderMethod.ParamSchema(childComplexity), true

	case "ProviderMethod.resultSchema":
		if e.complexity.ProviderMethod.ResultSchema == nil {
			break
		}

		return e.complexity.ProviderMethod.ResultSchema(childComplexity), true

	case "ProviderMethod.status":
		if e.complexity.ProviderMethod.Status == nil {
			break
		}

		return e.complexity.ProviderMethod.Status(childComplexity), true

	case "ProviderMethod.supportMulti":
		if e.complexity.ProviderMethod.SupportMulti == nil {
			break
		}

		return e.complexity.ProviderMethod.SupportMulti(childComplexity), true

	case "ProviderMethod.title":
		if e.complexity.ProviderMethod.Title == nil {
			break
		}

		return e.complexity.ProviderMethod.Title(childComplexity), true

	case "ProviderMethod.totalUsed":
		if e.complexity.ProviderMethod.TotalUsed == nil {
			break
		}

		return e.complexity.ProviderMethod.TotalUsed(childComplexity), true

	case "Query.getAlgorithmMethods":
		if e.complexity.Query.GetAlgorithmMethods == nil {
			break
		}

		args, err := ec.field_Query_getAlgorithmMethods_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAlgorithmMethods(childComplexity, args["did"].(string)), true

	case "Query.getAlgorithmProvider":
		if e.complexity.Query.GetAlgorithmProvider == nil {
			break
		}

		args, err := ec.field_Query_getAlgorithmProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAlgorithmProvider(childComplexity, args["did"].(string)), true

	case "Query.getAlgorithmProviderMethod":
		if e.complexity.Query.GetAlgorithmProviderMethod == nil {
			break
		}

		args, err := ec.field_Query_getAlgorithmProviderMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAlgorithmProviderMethod(childComplexity, args["did"].(string), args["name"].(string)), true

	case "Query.getAllAPInfo":
		if e.complexity.Query.GetAllAPInfo == nil {
			break
		}

		return e.complexity.Query.GetAllAPInfo(childComplexity), true

	case "Query.getAllAlgorithmProviderMethod":
		if e.complexity.Query.GetAllAlgorithmProviderMethod == nil {
			break
		}

		args, err := ec.field_Query_getAllAlgorithmProviderMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAlgorithmProviderMethod(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.AlgorithmProviderMethodWhere), args["orderBy"].(*string), args["orderDirection"].(*string), args["labels"].(model.LabelsInfo)), true

	case "Query.getAllAlgorithmProviders":
		if e.complexity.Query.GetAllAlgorithmProviders == nil {
			break
		}

		args, err := ec.field_Query_getAllAlgorithmProviders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllAlgorithmProviders(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.AlgorithmProviderWhere), args["orderBy"].(*string), args["orderDirection"].(*string)), true

	case "Query.getAllDataProviderMethod":
		if e.complexity.Query.GetAllDataProviderMethod == nil {
			break
		}

		args, err := ec.field_Query_getAllDataProviderMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllDataProviderMethod(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.DataProviderMethodWhere), args["orderBy"].(*string), args["orderDirection"].(*string), args["labels"].(model.LabelsInfo)), true

	case "Query.getAllDataProviders":
		if e.complexity.Query.GetAllDataProviders == nil {
			break
		}

		args, err := ec.field_Query_getAllDataProviders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllDataProviders(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.DataProviderWhere), args["orderBy"].(*string), args["orderDirection"].(*string)), true

	case "Query.getApplicationInfo":
		if e.complexity.Query.GetApplicationInfo == nil {
			break
		}

		args, err := ec.field_Query_getApplicationInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetApplicationInfo(childComplexity, args["did"].(string)), true

	case "Query.getBasedVotingStrategy":
		if e.complexity.Query.GetBasedVotingStrategy == nil {
			break
		}

		args, err := ec.field_Query_getBasedVotingStrategy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBasedVotingStrategy(childComplexity, args["addrs"].([]string), args["space"].(string), args["snapshot"].(string), args["network"].(string), args["options"].(*model.SnapShotOptions)), true

	case "Query.getClaimNFTRecords":
		if e.complexity.Query.GetClaimNFTRecords == nil {
			break
		}

		args, err := ec.field_Query_getClaimNFTRecords_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetClaimNFTRecords(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.ClaimNFTWhere), args["orderBy"].(*string), args["orderDirection"].(*string)), true

	case "Query.getCompositeDpInfo":
		if e.complexity.Query.GetCompositeDpInfo == nil {
			break
		}

		args, err := ec.field_Query_getCompositeDpInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompositeDpInfo(childComplexity, args["did"].(string), args["method"].(string)), true

	case "Query.getDataMethods":
		if e.complexity.Query.GetDataMethods == nil {
			break
		}

		args, err := ec.field_Query_getDataMethods_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDataMethods(childComplexity, args["did"].(string)), true

	case "Query.getDataProvider":
		if e.complexity.Query.GetDataProvider == nil {
			break
		}

		args, err := ec.field_Query_getDataProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDataProvider(childComplexity, args["did"].(string)), true

	case "Query.getDataProviderMethod":
		if e.complexity.Query.GetDataProviderMethod == nil {
			break
		}

		args, err := ec.field_Query_getDataProviderMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDataProviderMethod(childComplexity, args["did"].(string), args["name"].(string)), true

	case "Query.getDataProvidersByAP":
		if e.complexity.Query.GetDataProvidersByAp == nil {
			break
		}

		args, err := ec.field_Query_getDataProvidersByAP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDataProvidersByAp(childComplexity, args["did"].(string), args["method"].(string)), true

	case "Query.getLatestOscore":
		if e.complexity.Query.GetLatestOscore == nil {
			break
		}

		args, err := ec.field_Query_getLatestOscore_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetLatestOscore(childComplexity, args["did"].(string)), true

	case "Query.getNFTClaimedCount":
		if e.complexity.Query.GetNFTClaimedCount == nil {
			break
		}

		args, err := ec.field_Query_getNFTClaimedCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNFTClaimedCount(childComplexity, args["nftType"].(int64), args["userDid"].(string)), true

	case "Query.getNFTSettings":
		if e.complexity.Query.GetNFTSettings == nil {
			break
		}

		args, err := ec.field_Query_getNFTSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNFTSettings(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.NFTSettingWhere), args["orderBy"].(*string), args["orderDirection"].(*string)), true

	case "Query.getTokenPrice":
		if e.complexity.Query.GetTokenPrice == nil {
			break
		}

		args, err := ec.field_Query_getTokenPrice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTokenPrice(childComplexity, args["input"].(model.TokenPrice)), true

	case "Query.getUserAssetBalance":
		if e.complexity.Query.GetUserAssetBalance == nil {
			break
		}

		args, err := ec.field_Query_getUserAssetBalance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserAssetBalance(childComplexity, args["did"].(string)), true

	case "Query.getUserBasicInfo":
		if e.complexity.Query.GetUserBasicInfo == nil {
			break
		}

		args, err := ec.field_Query_getUserBasicInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserBasicInfo(childComplexity, args["did"].(string)), true

	case "Query.getUserBindAddressInfo":
		if e.complexity.Query.GetUserBindAddressInfo == nil {
			break
		}

		args, err := ec.field_Query_getUserBindAddressInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserBindAddressInfo(childComplexity, args["input"].(string)), true

	case "Query.getUserClaimedNFT":
		if e.complexity.Query.GetUserClaimedNft == nil {
			break
		}

		args, err := ec.field_Query_getUserClaimedNFT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserClaimedNft(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.UserClaimedNFTWhere), args["orderBy"].(*string), args["orderDirection"].(*string)), true

	case "Query.getUserCredentials":
		if e.complexity.Query.GetUserCredentials == nil {
			break
		}

		args, err := ec.field_Query_getUserCredentials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserCredentials(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(model.UserCredntialWhere), args["orderBy"].(*string), args["orderDirection"].(*string)), true

	case "Query.getUserGenNFTCount":
		if e.complexity.Query.GetUserGenNFTCount == nil {
			break
		}

		args, err := ec.field_Query_getUserGenNFTCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserGenNFTCount(childComplexity, args["did"].(string)), true

	case "Query.getUserGenReputationCount":
		if e.complexity.Query.GetUserGenReputationCount == nil {
			break
		}

		args, err := ec.field_Query_getUserGenReputationCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserGenReputationCount(childComplexity, args["did"].(string)), true

	case "Query.getUserTask":
		if e.complexity.Query.GetUserTask == nil {
			break
		}

		args, err := ec.field_Query_getUserTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserTask(childComplexity, args["key"].(string), args["taskId"].(int64)), true

	case "Query.getUserTasks":
		if e.complexity.Query.GetUserTasks == nil {
			break
		}

		args, err := ec.field_Query_getUserTasks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserTasks(childComplexity, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.GetUserTasksWhere), args["orderBy"].(*string), args["orderDirection"].(*string)), true

	case "Query.getUserTotalValue":
		if e.complexity.Query.GetUserTotalValue == nil {
			break
		}

		args, err := ec.field_Query_getUserTotalValue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserTotalValue(childComplexity, args["did"].(string)), true

	case "Query.getUserVisibleBindAddressInfo":
		if e.complexity.Query.GetUserVisibleBindAddressInfo == nil {
			break
		}

		args, err := ec.field_Query_getUserVisibleBindAddressInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserVisibleBindAddressInfo(childComplexity, args["input"].(string)), true

	case "Query.queryAPDataSetInfo":
		if e.complexity.Query.QueryAPDataSetInfo == nil {
			break
		}

		args, err := ec.field_Query_queryAPDataSetInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryAPDataSetInfo(childComplexity, args["userDID"].(string), args["dataSetID"].(int64)), true

	case "Query.queryAPLabels":
		if e.complexity.Query.QueryAPLabels == nil {
			break
		}

		return e.complexity.Query.QueryAPLabels(childComplexity), true

	case "Query.queryAllThirdPartyVcStatus":
		if e.complexity.Query.QueryAllThirdPartyVcStatus == nil {
			break
		}

		args, err := ec.field_Query_queryAllThirdPartyVcStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryAllThirdPartyVcStatus(childComplexity, args["did"].(string)), true

	case "Query.queryDPDataSetInfo":
		if e.complexity.Query.QueryDPDataSetInfo == nil {
			break
		}

		args, err := ec.field_Query_queryDPDataSetInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryDPDataSetInfo(childComplexity, args["userDID"].(string), args["dataSetID"].(int64)), true

	case "Query.queryDPLabels":
		if e.complexity.Query.QueryDPLabels == nil {
			break
		}

		return e.complexity.Query.QueryDPLabels(childComplexity), true

	case "Query.queryOuterTask":
		if e.complexity.Query.QueryOuterTask == nil {
			break
		}

		args, err := ec.field_Query_queryOuterTask_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryOuterTask(childComplexity, args["input"].(*model.OuterTaskReq)), true

	case "Query.querySig":
		if e.complexity.Query.QuerySig == nil {
			break
		}

		args, err := ec.field_Query_querySig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QuerySig(childComplexity, args["addr"].(string), args["nftType"].(int64), args["score"].(int64)), true

	case "Query.queryTaskExist":
		if e.complexity.Query.QueryTaskExist == nil {
			break
		}

		args, err := ec.field_Query_queryTaskExist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryTaskExist(childComplexity, args["input"].(*model.AddTask)), true

	case "Query.queryThirdPartyVc":
		if e.complexity.Query.QueryThirdPartyVc == nil {
			break
		}

		args, err := ec.field_Query_queryThirdPartyVc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryThirdPartyVc(childComplexity, args["did"].(string), args["mediaType"].(string)), true

	case "Query.queryUserAPDataSetList":
		if e.complexity.Query.QueryUserAPDataSetList == nil {
			break
		}

		args, err := ec.field_Query_queryUserAPDataSetList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserAPDataSetList(childComplexity, args["userDID"].(string), args["dataSetName"].(string), args["status"].(string), args["page"].(int64), args["size"].(int64), args["labels"].(model.LabelsInfo)), true

	case "Query.queryUserBasicInfo":
		if e.complexity.Query.QueryUserBasicInfo == nil {
			break
		}

		args, err := ec.field_Query_queryUserBasicInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserBasicInfo(childComplexity, args["user_did"].(string)), true

	case "Query.queryUserDPDataSetList":
		if e.complexity.Query.QueryUserDPDataSetList == nil {
			break
		}

		args, err := ec.field_Query_queryUserDPDataSetList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserDPDataSetList(childComplexity, args["userDID"].(string), args["dataSetName"].(string), args["status"].(string), args["page"].(int64), args["size"].(int64), args["labels"].(model.LabelsInfo)), true

	case "Query.queryUserKycInfo":
		if e.complexity.Query.QueryUserKycInfo == nil {
			break
		}

		args, err := ec.field_Query_queryUserKycInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserKycInfo(childComplexity, args["did"].(string)), true

	case "Query.queryUserLatestAPInfo":
		if e.complexity.Query.QueryUserLatestAPInfo == nil {
			break
		}

		args, err := ec.field_Query_queryUserLatestAPInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserLatestAPInfo(childComplexity, args["userDID"].(string)), true

	case "Query.queryUserLatestDPInfo":
		if e.complexity.Query.QueryUserLatestDPInfo == nil {
			break
		}

		args, err := ec.field_Query_queryUserLatestDPInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserLatestDPInfo(childComplexity, args["userDID"].(string)), true

	case "Query.queryUserPublishedAP":
		if e.complexity.Query.QueryUserPublishedAp == nil {
			break
		}

		args, err := ec.field_Query_queryUserPublishedAP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserPublishedAp(childComplexity, args["userDID"].(string)), true

	case "Query.queryUserPublishedDP":
		if e.complexity.Query.QueryUserPublishedDp == nil {
			break
		}

		args, err := ec.field_Query_queryUserPublishedDP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserPublishedDp(childComplexity, args["userDID"].(string)), true

	case "Query.queryUserSNSBinding":
		if e.complexity.Query.QueryUserSNSBinding == nil {
			break
		}

		args, err := ec.field_Query_queryUserSNSBinding_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.QueryUserSNSBinding(childComplexity, args["caller_did"].(string), args["address"].(string), args["encrypt"].(bool)), true

	case "Query.requestChanllenge":
		if e.complexity.Query.RequestChanllenge == nil {
			break
		}

		args, err := ec.field_Query_requestChanllenge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RequestChanllenge(childComplexity, args["input"].(*model.ClientHello)), true

	case "SNSBindingData.bright_id":
		if e.complexity.SNSBindingData.BrightID == nil {
			break
		}

		return e.complexity.SNSBindingData.BrightID(childComplexity), true

	case "SNSBindingData.facebook":
		if e.complexity.SNSBindingData.Facebook == nil {
			break
		}

		return e.complexity.SNSBindingData.Facebook(childComplexity), true

	case "SNSBindingData.github":
		if e.complexity.SNSBindingData.Github == nil {
			break
		}

		return e.complexity.SNSBindingData.Github(childComplexity), true

	case "SNSBindingData.linkedin":
		if e.complexity.SNSBindingData.Linkedin == nil {
			break
		}

		return e.complexity.SNSBindingData.Linkedin(childComplexity), true

	case "SNSBindingData.shufti_pro":
		if e.complexity.SNSBindingData.ShuftiPro == nil {
			break
		}

		return e.complexity.SNSBindingData.ShuftiPro(childComplexity), true

	case "SNSBindingData.tweeter":
		if e.complexity.SNSBindingData.Tweeter == nil {
			break
		}

		return e.complexity.SNSBindingData.Tweeter(childComplexity), true

	case "SNSBindingDataWithSig.data":
		if e.complexity.SNSBindingDataWithSig.Data == nil {
			break
		}

		return e.complexity.SNSBindingDataWithSig.Data(childComplexity), true

	case "SNSBindingDataWithSig.sig":
		if e.complexity.SNSBindingDataWithSig.Sig == nil {
			break
		}

		return e.complexity.SNSBindingDataWithSig.Sig(childComplexity), true

	case "SNSBindingResp.data":
		if e.complexity.SNSBindingResp.Data == nil {
			break
		}

		return e.complexity.SNSBindingResp.Data(childComplexity), true

	case "SNSBindingResp.encrypted":
		if e.complexity.SNSBindingResp.Encrypted == nil {
			break
		}

		return e.complexity.SNSBindingResp.Encrypted(childComplexity), true

	case "ServerHello.alg":
		if e.complexity.ServerHello.Alg == nil {
			break
		}

		return e.complexity.ServerHello.Alg(childComplexity), true

	case "ServerHello.chain":
		if e.complexity.ServerHello.Chain == nil {
			break
		}

		return e.complexity.ServerHello.Chain(childComplexity), true

	case "ServerHello.nonce":
		if e.complexity.ServerHello.Nonce == nil {
			break
		}

		return e.complexity.ServerHello.Nonce(childComplexity), true

	case "ServerHello.server":
		if e.complexity.ServerHello.Server == nil {
			break
		}

		return e.complexity.ServerHello.Server(childComplexity), true

	case "ServerHello.type":
		if e.complexity.ServerHello.Type == nil {
			break
		}

		return e.complexity.ServerHello.Type(childComplexity), true

	case "ServerHello.vcFilters":
		if e.complexity.ServerHello.VcFilters == nil {
			break
		}

		return e.complexity.ServerHello.VcFilters(childComplexity), true

	case "ServerHello.ver":
		if e.complexity.ServerHello.Ver == nil {
			break
		}

		return e.complexity.ServerHello.Ver(childComplexity), true

	case "ServerInfo.did":
		if e.complexity.ServerInfo.Did == nil {
			break
		}

		return e.complexity.ServerInfo.Did(childComplexity), true

	case "ServerInfo.icon":
		if e.complexity.ServerInfo.Icon == nil {
			break
		}

		return e.complexity.ServerInfo.Icon(childComplexity), true

	case "ServerInfo.name":
		if e.complexity.ServerInfo.Name == nil {
			break
		}

		return e.complexity.ServerInfo.Name(childComplexity), true

	case "ServerInfo.url":
		if e.complexity.ServerInfo.URL == nil {
			break
		}

		return e.complexity.ServerInfo.URL(childComplexity), true

	case "ServerInfo.verificationMethod":
		if e.complexity.ServerInfo.VerificationMethod == nil {
			break
		}

		return e.complexity.ServerInfo.VerificationMethod(childComplexity), true

	case "SigResp.hash":
		if e.complexity.SigResp.Hash == nil {
			break
		}

		return e.complexity.SigResp.Hash(childComplexity), true

	case "SigResp.sig":
		if e.complexity.SigResp.Sig == nil {
			break
		}

		return e.complexity.SigResp.Sig(childComplexity), true

	case "StrategyResult.address":
		if e.complexity.StrategyResult.Address == nil {
			break
		}

		return e.complexity.StrategyResult.Address(childComplexity), true

	case "StrategyResult.score":
		if e.complexity.StrategyResult.Score == nil {
			break
		}

		return e.complexity.StrategyResult.Score(childComplexity), true

	case "ThirdPartyVcStatus.mediaType":
		if e.complexity.ThirdPartyVcStatus.MediaType == nil {
			break
		}

		return e.complexity.ThirdPartyVcStatus.MediaType(childComplexity), true

	case "ThirdPartyVcStatus.status":
		if e.complexity.ThirdPartyVcStatus.Status == nil {
			break
		}

		return e.complexity.ThirdPartyVcStatus.Status(childComplexity), true

	case "UserAddressInfo.address":
		if e.complexity.UserAddressInfo.Address == nil {
			break
		}

		return e.complexity.UserAddressInfo.Address(childComplexity), true

	case "UserAddressInfo.chain":
		if e.complexity.UserAddressInfo.Chain == nil {
			break
		}

		return e.complexity.UserAddressInfo.Chain(childComplexity), true

	case "UserAddressInfo.createTime":
		if e.complexity.UserAddressInfo.CreateTime == nil {
			break
		}

		return e.complexity.UserAddressInfo.CreateTime(childComplexity), true

	case "UserAddressInfo.visible":
		if e.complexity.UserAddressInfo.Visible == nil {
			break
		}

		return e.complexity.UserAddressInfo.Visible(childComplexity), true

	case "UserAsset.balance":
		if e.complexity.UserAsset.Balance == nil {
			break
		}

		return e.complexity.UserAsset.Balance(childComplexity), true

	case "UserAsset.chain":
		if e.complexity.UserAsset.Chain == nil {
			break
		}

		return e.complexity.UserAsset.Chain(childComplexity), true

	case "UserAsset.icon":
		if e.complexity.UserAsset.Icon == nil {
			break
		}

		return e.complexity.UserAsset.Icon(childComplexity), true

	case "UserAsset.name":
		if e.complexity.UserAsset.Name == nil {
			break
		}

		return e.complexity.UserAsset.Name(childComplexity), true

	case "UserAsset.price":
		if e.complexity.UserAsset.Price == nil {
			break
		}

		return e.complexity.UserAsset.Price(childComplexity), true

	case "UserAsset.tokenAddress":
		if e.complexity.UserAsset.TokenAddress == nil {
			break
		}

		return e.complexity.UserAsset.TokenAddress(childComplexity), true

	case "UserAsset.value":
		if e.complexity.UserAsset.Value == nil {
			break
		}

		return e.complexity.UserAsset.Value(childComplexity), true

	case "UserBasicInfo.avatar":
		if e.complexity.UserBasicInfo.Avatar == nil {
			break
		}

		return e.complexity.UserBasicInfo.Avatar(childComplexity), true

	case "UserBasicInfo.did":
		if e.complexity.UserBasicInfo.Did == nil {
			break
		}

		return e.complexity.UserBasicInfo.Did(childComplexity), true

	case "UserBasicInfo.email":
		if e.complexity.UserBasicInfo.Email == nil {
			break
		}

		return e.complexity.UserBasicInfo.Email(childComplexity), true

	case "UserBasicInfo.nick_name":
		if e.complexity.UserBasicInfo.NickName == nil {
			break
		}

		return e.complexity.UserBasicInfo.NickName(childComplexity), true

	case "UserBasicInfoResp.credentials":
		if e.complexity.UserBasicInfoResp.Credentials == nil {
			break
		}

		return e.complexity.UserBasicInfoResp.Credentials(childComplexity), true

	case "UserBasicInfoResp.datasetPublished":
		if e.complexity.UserBasicInfoResp.DatasetPublished == nil {
			break
		}

		return e.complexity.UserBasicInfoResp.DatasetPublished(childComplexity), true

	case "UserBasicInfoResp.modelPublished":
		if e.complexity.UserBasicInfoResp.ModelPublished == nil {
			break
		}

		return e.complexity.UserBasicInfoResp.ModelPublished(childComplexity), true

	case "UserBasicInfoResp.nfts":
		if e.complexity.UserBasicInfoResp.Nfts == nil {
			break
		}

		return e.complexity.UserBasicInfoResp.Nfts(childComplexity), true

	case "UserBasicInfoResp.verifications":
		if e.complexity.UserBasicInfoResp.Verifications == nil {
			break
		}

		return e.complexity.UserBasicInfoResp.Verifications(childComplexity), true

	case "UserBasicInfoResp.walletAddress":
		if e.complexity.UserBasicInfoResp.WalletAddress == nil {
			break
		}

		return e.complexity.UserBasicInfoResp.WalletAddress(childComplexity), true

	case "UserClaimedNFT.ap_did":
		if e.complexity.UserClaimedNft.ApDid == nil {
			break
		}

		return e.complexity.UserClaimedNft.ApDid(childComplexity), true

	case "UserClaimedNFT.ap_method":
		if e.complexity.UserClaimedNft.ApMethod == nil {
			break
		}

		return e.complexity.UserClaimedNft.ApMethod(childComplexity), true

	case "UserClaimedNFT.ap_method_title":
		if e.complexity.UserClaimedNft.ApMethodTitle == nil {
			break
		}

		return e.complexity.UserClaimedNft.ApMethodTitle(childComplexity), true

	case "UserClaimedNFT.ap_title":
		if e.complexity.UserClaimedNft.ApTitle == nil {
			break
		}

		return e.complexity.UserClaimedNft.ApTitle(childComplexity), true

	case "UserClaimedNFT.chain":
		if e.complexity.UserClaimedNft.Chain == nil {
			break
		}

		return e.complexity.UserClaimedNft.Chain(childComplexity), true

	case "UserClaimedNFT.claim_time":
		if e.complexity.UserClaimedNft.ClaimTime == nil {
			break
		}

		return e.complexity.UserClaimedNft.ClaimTime(childComplexity), true

	case "UserClaimedNFT.contract_address":
		if e.complexity.UserClaimedNft.ContractAddress == nil {
			break
		}

		return e.complexity.UserClaimedNft.ContractAddress(childComplexity), true

	case "UserClaimedNFT.description":
		if e.complexity.UserClaimedNft.Description == nil {
			break
		}

		return e.complexity.UserClaimedNft.Description(childComplexity), true

	case "UserClaimedNFT.dp_did":
		if e.complexity.UserClaimedNft.DpDid == nil {
			break
		}

		return e.complexity.UserClaimedNft.DpDid(childComplexity), true

	case "UserClaimedNFT.dp_method":
		if e.complexity.UserClaimedNft.DpMethod == nil {
			break
		}

		return e.complexity.UserClaimedNft.DpMethod(childComplexity), true

	case "UserClaimedNFT.dp_method_title":
		if e.complexity.UserClaimedNft.DpMethodTitle == nil {
			break
		}

		return e.complexity.UserClaimedNft.DpMethodTitle(childComplexity), true

	case "UserClaimedNFT.dp_title":
		if e.complexity.UserClaimedNft.DpTitle == nil {
			break
		}

		return e.complexity.UserClaimedNft.DpTitle(childComplexity), true

	case "UserClaimedNFT.image":
		if e.complexity.UserClaimedNft.Image == nil {
			break
		}

		return e.complexity.UserClaimedNft.Image(childComplexity), true

	case "UserClaimedNFT.is_expired":
		if e.complexity.UserClaimedNft.IsExpired == nil {
			break
		}

		return e.complexity.UserClaimedNft.IsExpired(childComplexity), true

	case "UserClaimedNFT.issue_by":
		if e.complexity.UserClaimedNft.IssueBy == nil {
			break
		}

		return e.complexity.UserClaimedNft.IssueBy(childComplexity), true

	case "UserClaimedNFT.lowest_score":
		if e.complexity.UserClaimedNft.LowestScore == nil {
			break
		}

		return e.complexity.UserClaimedNft.LowestScore(childComplexity), true

	case "UserClaimedNFT.name":
		if e.complexity.UserClaimedNft.Name == nil {
			break
		}

		return e.complexity.UserClaimedNft.Name(childComplexity), true

	case "UserClaimedNFT.nft_score":
		if e.complexity.UserClaimedNft.NftScore == nil {
			break
		}

		return e.complexity.UserClaimedNft.NftScore(childComplexity), true

	case "UserClaimedNFT.nft_type":
		if e.complexity.UserClaimedNft.NftType == nil {
			break
		}

		return e.complexity.UserClaimedNft.NftType(childComplexity), true

	case "UserClaimedNFT.owner":
		if e.complexity.UserClaimedNft.Owner == nil {
			break
		}

		return e.complexity.UserClaimedNft.Owner(childComplexity), true

	case "UserClaimedNFT.score":
		if e.complexity.UserClaimedNft.Score == nil {
			break
		}

		return e.complexity.UserClaimedNft.Score(childComplexity), true

	case "UserClaimedNFT.token_id":
		if e.complexity.UserClaimedNft.TokenID == nil {
			break
		}

		return e.complexity.UserClaimedNft.TokenID(childComplexity), true

	case "UserClaimedNFT.tx_hash":
		if e.complexity.UserClaimedNft.TxHash == nil {
			break
		}

		return e.complexity.UserClaimedNft.TxHash(childComplexity), true

	case "UserClaimedNFT.valid_days":
		if e.complexity.UserClaimedNft.ValidDays == nil {
			break
		}

		return e.complexity.UserClaimedNft.ValidDays(childComplexity), true

	case "UserClaimedNFT.valid_to":
		if e.complexity.UserClaimedNft.ValidTo == nil {
			break
		}

		return e.complexity.UserClaimedNft.ValidTo(childComplexity), true

	case "UserClaimedNFTResp.count":
		if e.complexity.UserClaimedNFTResp.Count == nil {
			break
		}

		return e.complexity.UserClaimedNFTResp.Count(childComplexity), true

	case "UserClaimedNFTResp.records":
		if e.complexity.UserClaimedNFTResp.Records == nil {
			break
		}

		return e.complexity.UserClaimedNFTResp.Records(childComplexity), true

	case "UserCredential.ap_method_name":
		if e.complexity.UserCredential.ApMethodName == nil {
			break
		}

		return e.complexity.UserCredential.ApMethodName(childComplexity), true

	case "UserCredential.ap_name":
		if e.complexity.UserCredential.ApName == nil {
			break
		}

		return e.complexity.UserCredential.ApName(childComplexity), true

	case "UserCredential.create_time":
		if e.complexity.UserCredential.CreateTime == nil {
			break
		}

		return e.complexity.UserCredential.CreateTime(childComplexity), true

	case "UserCredential.dp_method_name":
		if e.complexity.UserCredential.DpMethodName == nil {
			break
		}

		return e.complexity.UserCredential.DpMethodName(childComplexity), true

	case "UserCredential.dp_name":
		if e.complexity.UserCredential.DpName == nil {
			break
		}

		return e.complexity.UserCredential.DpName(childComplexity), true

	case "UserCredential.score":
		if e.complexity.UserCredential.Score == nil {
			break
		}

		return e.complexity.UserCredential.Score(childComplexity), true

	case "UserCredential.valid_to":
		if e.complexity.UserCredential.ValidTo == nil {
			break
		}

		return e.complexity.UserCredential.ValidTo(childComplexity), true

	case "UserCredentials.data":
		if e.complexity.UserCredentials.Data == nil {
			break
		}

		return e.complexity.UserCredentials.Data(childComplexity), true

	case "UserCredentials.total_count":
		if e.complexity.UserCredentials.TotalCount == nil {
			break
		}

		return e.complexity.UserCredentials.TotalCount(childComplexity), true

	case "UserLatestOscore.ApDID":
		if e.complexity.UserLatestOscore.ApDid == nil {
			break
		}

		return e.complexity.UserLatestOscore.ApDid(childComplexity), true

	case "UserLatestOscore.CreateTime":
		if e.complexity.UserLatestOscore.CreateTime == nil {
			break
		}

		return e.complexity.UserLatestOscore.CreateTime(childComplexity), true

	case "UserLatestOscore.DpDID":
		if e.complexity.UserLatestOscore.DpDid == nil {
			break
		}

		return e.complexity.UserLatestOscore.DpDid(childComplexity), true

	case "UserLatestOscore.Oscore":
		if e.complexity.UserLatestOscore.Oscore == nil {
			break
		}

		return e.complexity.UserLatestOscore.Oscore(childComplexity), true

	case "UserTasks.apDID":
		if e.complexity.UserTasks.ApDid == nil {
			break
		}

		return e.complexity.UserTasks.ApDid(childComplexity), true

	case "UserTasks.apIcon":
		if e.complexity.UserTasks.ApIcon == nil {
			break
		}

		return e.complexity.UserTasks.ApIcon(childComplexity), true

	case "UserTasks.apMethod":
		if e.complexity.UserTasks.ApMethod == nil {
			break
		}

		return e.complexity.UserTasks.ApMethod(childComplexity), true

	case "UserTasks.apMethodName":
		if e.complexity.UserTasks.ApMethodName == nil {
			break
		}

		return e.complexity.UserTasks.ApMethodName(childComplexity), true

	case "UserTasks.apName":
		if e.complexity.UserTasks.ApName == nil {
			break
		}

		return e.complexity.UserTasks.ApName(childComplexity), true

	case "UserTasks.createTime":
		if e.complexity.UserTasks.CreateTime == nil {
			break
		}

		return e.complexity.UserTasks.CreateTime(childComplexity), true

	case "UserTasks.dpDID":
		if e.complexity.UserTasks.DpDid == nil {
			break
		}

		return e.complexity.UserTasks.DpDid(childComplexity), true

	case "UserTasks.dpIcon":
		if e.complexity.UserTasks.DpIcon == nil {
			break
		}

		return e.complexity.UserTasks.DpIcon(childComplexity), true

	case "UserTasks.dpMethod":
		if e.complexity.UserTasks.DpMethod == nil {
			break
		}

		return e.complexity.UserTasks.DpMethod(childComplexity), true

	case "UserTasks.dpMethodName":
		if e.complexity.UserTasks.DpMethodName == nil {
			break
		}

		return e.complexity.UserTasks.DpMethodName(childComplexity), true

	case "UserTasks.dpName":
		if e.complexity.UserTasks.DpName == nil {
			break
		}

		return e.complexity.UserTasks.DpName(childComplexity), true

	case "UserTasks.involved_addresses":
		if e.complexity.UserTasks.InvolvedAddresses == nil {
			break
		}

		return e.complexity.UserTasks.InvolvedAddresses(childComplexity), true

	case "UserTasks.issueTxhash":
		if e.complexity.UserTasks.IssueTxhash == nil {
			break
		}

		return e.complexity.UserTasks.IssueTxhash(childComplexity), true

	case "UserTasks.nftType":
		if e.complexity.UserTasks.NftType == nil {
			break
		}

		return e.complexity.UserTasks.NftType(childComplexity), true

	case "UserTasks.resultFile":
		if e.complexity.UserTasks.ResultFile == nil {
			break
		}

		return e.complexity.UserTasks.ResultFile(childComplexity), true

	case "UserTasks.taskId":
		if e.complexity.UserTasks.TaskID == nil {
			break
		}

		return e.complexity.UserTasks.TaskID(childComplexity), true

	case "UserTasks.taskResult":
		if e.complexity.UserTasks.TaskResult == nil {
			break
		}

		return e.complexity.UserTasks.TaskResult(childComplexity), true

	case "UserTasks.taskStatus":
		if e.complexity.UserTasks.TaskStatus == nil {
			break
		}

		return e.complexity.UserTasks.TaskStatus(childComplexity), true

	case "UserTasks.updateTime":
		if e.complexity.UserTasks.UpdateTime == nil {
			break
		}

		return e.complexity.UserTasks.UpdateTime(childComplexity), true

	case "UserTasks.userDID":
		if e.complexity.UserTasks.UserDid == nil {
			break
		}

		return e.complexity.UserTasks.UserDid(childComplexity), true

	case "UserTasks.valid_to":
		if e.complexity.UserTasks.ValidTo == nil {
			break
		}

		return e.complexity.UserTasks.ValidTo(childComplexity), true

	case "VCFilter.express":
		if e.complexity.VCFilter.Express == nil {
			break
		}

		return e.complexity.VCFilter.Express(childComplexity), true

	case "VCFilter.required":
		if e.complexity.VCFilter.Required == nil {
			break
		}

		return e.complexity.VCFilter.Required(childComplexity), true

	case "VCFilter.trustRoots":
		if e.complexity.VCFilter.TrustRoots == nil {
			break
		}

		return e.complexity.VCFilter.TrustRoots(childComplexity), true

	case "VCFilter.type":
		if e.complexity.VCFilter.Type == nil {
			break
		}

		return e.complexity.VCFilter.Type(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schema.graphqls", Input: `scalar Upload

input RefreshTokenInput{
  token: String!
}

input Login {
  did: String!
  time: Int!
  sig: String!
}

input BindAddress {
    did: String!
    address: String!
    chain: String!
    pubkey:String!
    sig: String!
}

input UnBindAddress{
    did:String!
    chain:String!
    address:String!
}

type PriceInfo{
    priceType:Int!
    price:Int!
    chargeType:Int!
}

type AlgorithmProvider{
    name:String!
    type:String!
    introduction:String!
    did:String!
    createTime:Int!
    title:String!
    provider:String!
    invokeFrequency:Int!
    apiState:Int!
    author:String!
    popularity:Int!
    delay:Int!
    icon:String!
}

type DataProvider {
    name:String!
    type:String!
    introduction:String!
    did:String!
    createTime:Int!
    title:String!
    provider:String!
    invokeFrequency:Int!
    apiState:Int!
    author:String!
    popularity:Int!
    delay:Int!
    icon:String!
}

type UserAsset {
    name:String!
    tokenAddress:String!
    icon:String!
    chain:String!
    balance:String!
    price:String!
    value:String!
}

input TokenPrice {
    name:String!
    contractAddress:String!
    chain:String!
}

type UserAddressInfo {
    chain:String!
    address:String!
    createTime:Int!
    visible:Boolean!
}

type UserLatestOscore {
    Oscore:Int!
    ApDID:String!
    DpDID:String!
    CreateTime:Int!
}

type UserTasks {
    taskId:String!
    userDID:String!
    apDID:String!
    apName:String!
    apIcon:String!
    apMethod:String!
    apMethodName:String!
    dpDID:String!
    dpName:String!
    dpIcon:String!
    dpMethod:String!
    dpMethodName:String!
    createTime:String!
    updateTime:String!
    taskStatus:String!
    taskResult:String
    resultFile:String
    issueTxhash:String
    valid_to:Int!
    nftType:Int!
    involved_addresses:String!
}

type ProviderMethod {
    name:String!
    paramSchema:String!
    resultSchema:String!
    title:String!
    description:String!
    labels:LabelsInfos!
    createTime:Int!
    nftType:Int!
    totalUsed:Int!
    hasDataSet:Boolean!
    status:String!
    supportMulti:Boolean!
}

input UserWallet{
    chain:String!
    address:String!
    pubkey:String!
    sig:String!
}

input RequestOscoreData {
    userdid:String!
    apdid:String!
    apmethod:String!
    dpdid:String!
    dpmethod:String!
    overwriteOld:Boolean!
    wallets:[UserWallet!]!
}

input RequestOscoreReq{
    appdid:String!
    data:RequestOscoreData!
    sig:String!
}

input AddTask{
    userDID:String!
    apDID:String!
    apMethod:String!
    dpDID:String!
    dpMethod:String!
    bindInfo:String!
}

input getAllAlgorithmProvidersReq{
    nameLike:String
    orderBy:String
    orderDirection:String
}


# for ontlogin
input ClientHello{
    ver:String!
    type:String!
    action:Int!
}


type ServerHello{
    ver:String!
    type:String!
    nonce:String!
    server:ServerInfo!
    chain:[String!]!
    alg:[String!]!
    vcFilters:[VCFilter]

}
type ServerInfo{
    name:String!
    icon:String!
    url:String!
    did:String!
    verificationMethod:String!
}

type VCFilter{
    type :String!
    express:[String]
    trustRoots:[String!]!
    required:Boolean!
}

input ClientResponse {
    ver:String!
    type:String!
    did:String!
    nonce:String!
    proof:Proof!
    vps:[String!]
}

input Proof{
    type:String!
    verificationMethod:String!
    created:Int!
    value:String!
}

type DPAndMethod {
    dp:DataProvider!
    method:ProviderMethod!
}

type GenNFTCountResp{
    count:Int!
}

type GenReputationCountResp{
    count:Int!
}

input AlgorithmProviderWhere{
    name_like:String
}
input DataProviderWhere{
    name_like:String
}
input DataProviderMethodWhere{
    name_like:String
    did_like:String
}
input AlgorithmProviderMethodWhere{
    name_like:String
    did_like:String
}


type GetAllAlgorithmProvidersResp{
    total:Int!
    data:[AlgorithmProvider!]!
}
type GetAllDataProviders{
    total:Int!
    data:[DataProvider!]!
}
type GetAllDataProviderMethodsResp{
    total:Int!
    data:[DPMethodWithDp!]!
}
type GetAllAlgorithmProviderMethodsResp{
    total:Int!
    data:[APMethodWithAp!]!
}
type DPMethodWithDp{
    did:String!
    name:String!
    method:String!
    methodName:String!
    methodDescription:String!
    icon:String!
    used:Int!
    labels:LabelsInfos!
}

type APMethodWithAp{
    did:String!
    name:String!
    method:String!
    methodName:String!
    methodDescription:String!
    icon:String!
    used:Int!
    labels:LabelsInfos!
}

input AddNewOuterTaskReq{
    caller_did:String!
    data: AddNewOuterTaskReqData!
    sig:String!
}

input AddNewOuterTaskReqData{
    dp_did:String!
    dp_method:String!
    ap_did:String!
    ap_method:String!
    wallet:WalletInfo!
}

input WalletInfo{
    chain:String!
    address:String!
}

input OuterTaskReq{
    caller_did:String!
    data:OuterTaskReqData!
    sig:String!
}

input OuterTaskReqData{
    task_id:Int!
}

input UserCredntialWhere{
    user_did:String!
    dp_did:String
    dp_method:String
    ap_did:String
    ap_method:String
}

type UserCredentials{
    total_count:Int!
    data:[UserCredential!]!
}

type UserCredential{
    score:String!
    dp_name:String!
    dp_method_name:String!
    ap_name:String!
    ap_method_name:String!
    create_time:String!
    valid_to:Int!
}

input AddUserBasicInfoReq {
    did:String!
#    profile_img:String!
    nick_name:String!
    email:String!
    vcode:String!
}

input UpdateUserBasicInfoReq {
    did:String!
#    profile_img:String!
    nick_name:String
    email:String
    vcode:String
}

type UserBasicInfo {
    did:String!
    nick_name:String!
    avatar:String
    email:String!
}

type ApplicationInfo {
    did:String!
    name:String!
    website:String!
}
input ApplicationInfoReq {
    did:String!
    name:String!
    website:String!
}

type StrategyResult {
    address:String!
    score:Int!
}

type ThirdPartyVcStatus {
    mediaType:String!  #BrightID  Twitter ShuftiPro  Github  Linkedin
    status:Boolean!
}

#DPInfo use getCompositeDpInfo and getAllAPInfo Unified interface
type MethodInfo {
    did:String!
    title:String!
    data:[MethodDetail!]!
}
type MethodDetail{
    did:String!
    method:String!
    paramSchema:String!
    resultSchema:String!
    url:String!
    compositeSetting:String!
    param:String!
    name:String!
    description:String!
    invoked:String!
    latency:String!
    createTime:String!
    httpMethod:String
    compositeData:[MethodDetail!]!
    labels:LabelsInfos!
    status:String!
}

input SnapShotOptions {
    address:String!
    symbol:String!
    thirdMediaType:[String!]
}

type NFTParam {
    hash:String!
    sig:String!
    nftType:Int!
    score:Int!
}

type ClaimNFTResponse{
    errorCode:Int!
    address:String!
    param:NFTParam
}

type SigResp{
    hash:String!
    sig:String!
}

input ClaimNFTWhere{
    user_did:String
    user_address:String
    chain:String
    nft_type:Int
    result:String
}
type ClaimNFTRecord{
    tx_hash:String!
    chain:String!
    contract_address:String!
    nft_type:Int!
    user_did:String!
    user_address:String!
    create_time:Int!
    result:String!
    score:String!
}

type ClaimNFTRecordsResp{
    count:Int!
    records:[ClaimNFTRecord!]!
}

input NFTSettingWhere{
    id:Int
}

type NFTSettingResp{
    count:Int!
    records:[NFTSetting!]!
}

type NFTSetting{
    id:Int!
    name:String!
    description:String!
    image:String!
    dp_did:String!
    dp_method:String!
    ap_did:String!
    ap_name:String!
    ap_method:String!
    ap_method_name:String!
    lowest_score:Int!
    valid_days:Int!
    restriction:String!
    chain_addresses:[ChainAddress!]!
    issue_by:String!
}

type ChainAddress{
    chain:String!
    contract_address:String!
}

input UserClaimedNFTWhere{
    user_did:String
    address:String
    token_id:Int
    chain:String
    nft_type:Int
}


type UserClaimedNFTResp{
    count:Int!
    records:[UserClaimedNFT!]!
}

type UserClaimedNFT{
    owner: String!
    score: Int!
    valid_to:Int!
    dp_did         :String!
    dp_title       :String!
    dp_method      :String!
    dp_method_title :String!
    ap_did         :String!
    ap_title       :String!
    ap_method      :String!
    ap_method_title :String!
    valid_days     :Int!
    image         :String!
    tx_hash  :String!
    token_id:Int!
    name :String!
    issue_by:String!
    chain:String!
    lowest_score:Int!
    description:String!
    claim_time:Int!
    contract_address:String!
    nft_type:Int!
    nft_score:Int!
    is_expired:Boolean!
}

type NFTClaimedCountResp{
    total_count:Int!
    user_count:Int!
}

input GetUserTasksWhere{
    user_did:String!
    dp_did:String
    dp_method:String
    ap_did:String
    ap_method:String
}

type GetUserTasksResp {
    total_count:Int!
    tasks:[UserTasks!]!
}


input SubmitDpInfo {
    dpInfoID:Int!
    dpName:String!
    dpDid:String!
    dpDesc:String!
    Avatar:String
}

input SubmitApInfo {
    apInfoID:Int!
    apName:String!
    apDid:String!
    apDesc:String!
    Avatar:String
}

type DpInfoRes {
    dpInfoID:Int!
    dpDid:String
    dpName:String
    dpDesc:String!
    Status:String!
    ResDesc:String!
    Avatar:String
}

type ApInfoRes {
    apInfoID:Int!
    apDid:String
    apName:String
    apDesc:String!
    Status:String!
    ResDesc:String!
    Avatar:String
}

input DpDataSetInfo {
    dataSetID:Int!
    dataSetName:String!
    dataSetMethodName:String!
    dataSetDesc:String!
    httpMethod:String!
    httpURL:String!
    Params:String!
    Labels:LabelsInfo!
}

input ApDataSetInfo {
    dataSetID:Int!
    dataSetName:String!
    dataSetMethodName:String!
    dataSetDesc:String!
    httpMethod:String!
    httpURL:String!
    Params:String!
    Labels:LabelsInfo!
}

type DpDataSetRes {
    dataSetID:Int!
    dpDid:String!
    dataSetName:String!
    dataSetMethodName:String!
    dataSetDesc:String!
    httpMethod:String!
    httpURL:String!
    Params:String!
    Status:String! #published，unsubmit,draft,failed,verifing
    ResDesc:String
    Labels:LabelsInfos!
}

type ApDataSetRes {
    dataSetID:Int!
    apDid:String!
    dataSetName:String!
    dataSetMethodName:String!
    dataSetDesc:String!
    httpMethod:String!
    httpURL:String!
    Params:String!
    Status:String! #published，unsubmit,draft,failed,verifing
    ResDesc:String
    Labels:LabelsInfos!
}


type DPDataSetList {
    dpDataSetData:[DpDataSetRes]
    curPageNum:Int!
    totalNum:Int!
}

type APDataSetList {
    apDataSetData:[ApDataSetRes]
    curPageNum:Int!
    totalNum:Int!
}

type SNSBindingResp {
    data:SNSBindingDataWithSig
    encrypted:String
}

type SNSBindingDataWithSig{
    data:SNSBindingData!
    sig:String!
}

type SNSBindingData{
    bright_id:Boolean!
    shufti_pro:Boolean!
    tweeter:Boolean!
    github:Boolean!
    linkedin:Boolean!
    facebook:Boolean!
}

type UserBasicInfoResp{
    walletAddress:Int!
    verifications:Int!
    credentials:Int!
    nfts:Int!
    modelPublished:Int!
    datasetPublished:Int!
}

input NftLeadBoardWhere{
    nftType:Int!
}

input LabelsInfo {
    blockChain:[String!]
    category:[String!]
    scenario:[String!]
}

type LabelsInfos {
    blockChain:[String!]
    category:[String!]
    scenario:[String!]
}

type Query {
  getAllAlgorithmProviders(first:Int,skip:Int,where:AlgorithmProviderWhere,orderBy:String,orderDirection:String):GetAllAlgorithmProvidersResp!
  getAllDataProviders(first:Int,skip:Int,where:DataProviderWhere,orderBy:String,orderDirection:String):GetAllDataProviders!
  getDataProvidersByAP(did:String!,method:String!):[DPAndMethod!]
  getUserAssetBalance(did:String!):[UserAsset!]!
  getUserTotalValue(did:String!):String!
  getTokenPrice(input:TokenPrice!):String!
  getUserBindAddressInfo(input:String!):[UserAddressInfo!]!
  getUserVisibleBindAddressInfo(input:String!):[UserAddressInfo!]!
  getUserTasks(first:Int,skip:Int,where:GetUserTasksWhere,orderBy:String,orderDirection:String):GetUserTasksResp!
  queryTaskExist(input:AddTask):Boolean!
  getLatestOscore(did:String!):UserLatestOscore
  getAlgorithmMethods(did:String!):[ProviderMethod!]!
  getDataMethods(did:String!):[ProviderMethod!]!
  getAlgorithmProvider(did:String!):AlgorithmProvider
  getDataProvider(did:String!):DataProvider
  getUserTask(key:String!,taskId:Int!):UserTasks
  getAlgorithmProviderMethod(did:String!,name:String!):ProviderMethod
  getDataProviderMethod(did:String!,name:String!):ProviderMethod
  getUserGenNFTCount(did:String!):GenNFTCountResp!
  getUserGenReputationCount(did:String!): GenReputationCountResp!

  getUserCredentials(first:Int,skip:Int,where:UserCredntialWhere!,orderBy:String,orderDirection:String):UserCredentials!

  getAllDataProviderMethod(first:Int,skip:Int,where:DataProviderMethodWhere,orderBy:String,orderDirection:String,labels:LabelsInfo!):GetAllDataProviderMethodsResp!
  getAllAlgorithmProviderMethod(first:Int,skip:Int,where:AlgorithmProviderMethodWhere,orderBy:String,orderDirection:String,labels:LabelsInfo!):GetAllAlgorithmProviderMethodsResp!

  getCompositeDpInfo(did:String!,method:String!):[MethodInfo!]!
  getAllAPInfo:[MethodInfo!]!
  getBasedVotingStrategy(addrs:[String!]!,space:String!,snapshot:String!, network:String!,options:SnapShotOptions):[StrategyResult!]!

  getUserBasicInfo(did:String!):UserBasicInfo!
  getApplicationInfo(did:String!):ApplicationInfo!
  # ontlogin
  queryOuterTask(input:OuterTaskReq):UserTasks
    # ontlogin
  requestChanllenge(input:ClientHello):ServerHello!

    #third party credential
  queryThirdPartyVc(did:String!,mediaType:String!) :String!
  queryAllThirdPartyVcStatus(did:String!) :[ThirdPartyVcStatus!]!
  queryUserKycInfo(did:String!):String!
  queryUserPublishedDP(userDID:String!):DpInfoRes
  queryUserLatestDPInfo(userDID:String!):DpInfoRes
  queryDPDataSetInfo(userDID:String!,dataSetID:Int!) :DpDataSetRes!
  queryUserDPDataSetList(userDID:String!,dataSetName:String!,status:String!,page:Int!,size:Int!,labels:LabelsInfo!) :DPDataSetList!
  queryDPLabels :LabelsInfos
    # only for test!!!!
  querySig(addr:String!,nftType:Int!,score:Int!):SigResp!
  getClaimNFTRecords(first:Int,skip:Int,where:ClaimNFTWhere,orderBy:String,orderDirection:String):ClaimNFTRecordsResp!
  getNFTSettings(first:Int,skip:Int,where:NFTSettingWhere,orderBy:String,orderDirection:String):NFTSettingResp!
  getUserClaimedNFT(first:Int,skip:Int,where:UserClaimedNFTWhere,orderBy:String,orderDirection:String):UserClaimedNFTResp!

  getNFTClaimedCount(nftType:Int!,userDid:String!):NFTClaimedCountResp!
  queryUserPublishedAP(userDID:String!):ApInfoRes
  queryUserLatestAPInfo(userDID:String!):ApInfoRes
  queryAPDataSetInfo(userDID:String!,dataSetID:Int!) :ApDataSetRes!
  queryUserAPDataSetList(userDID:String!,dataSetName:String!,status:String!,page:Int!,size:Int!,labels:LabelsInfo!) :APDataSetList!
  queryAPLabels :LabelsInfos

  # as DP for 3rd party binding
  queryUserSNSBinding(caller_did:String!,address:String!,encrypt:Boolean!):SNSBindingResp!

  queryUserBasicInfo(user_did:String!):UserBasicInfoResp!

}

type Mutation {
    # ontlogin
  submitChanllenge(input:ClientResponse!):String!
  login(input: Login!): String!
  refreshToken(input: RefreshTokenInput!): String!
  bindAddress(input:BindAddress!):String!
  unbindAddress(input:UnBindAddress!):String!
  addTask(input:AddTask!,overwrite:Boolean!): Int!
  changeAddressVisible(userDID:String!,chain:String!,address:String!,visible:Boolean!):Boolean!

  requestEmailVCode(did:String!,email:String!):Boolean!
  addUserBasicInfo(input:AddUserBasicInfoReq!):Boolean!
  updateUserBasicInfo(input:UpdateUserBasicInfoReq):Boolean!
  updateApplicationInfo(input:ApplicationInfoReq):Boolean!
  editNickNameBasicInfo(did:String!,nickName:String!):Boolean!
  editEmailAddrBasicInfo(did:String!,email:String!,verifyCode:String!):Boolean!
  editAppNameAppInfo(did:String!,appName:String!):Boolean!
  editWebsiteAppInfo(did:String!,website:String!):Boolean!
    #for sdk
  requestOscore(input:RequestOscoreReq):Int!
  addNewOuterTask(input:AddNewOuterTaskReq!):Int!

  SaveThirdPartyVc(did:String!,mediaType:String!,credential:String!) :Boolean!
  UnBindThirdParty(did:String!,mediaType:String!) :Boolean!
  SaveUserKycInfo(did:String!,kyc:String!) :Boolean!

  claimNFT(did:String!,chain:String!,nftType:Int!):ClaimNFTResponse!
  submitClaimTxInfo(did:String!,chain:String!,addr:String!,nftType:Int!,txhash:String!):Boolean!


  SaveDPInfo(userDID:String!,input:SubmitDpInfo) :Boolean!
  SubmitDPInfo(userDID:String!,input:SubmitDpInfo) :Boolean!
  RevokeDPInfo(userDID:String!,dpInfoID:Int!) :Boolean!
  UploadAvatar(file: Upload!) :String!
  SaveDPDataSet(userDID:String!,input:DpDataSetInfo) :Boolean!
  PublishDPDataSet(userDID:String!,input:DpDataSetInfo) :Boolean!
  RevokeDPDataSet(userDID:String!,dataSetID:Int!) :Boolean!
  DeleteDPDataSet(userDID:String!,dataSetID:Int!) :Boolean!
  RevokePublishedDPDataSet(userDID:String!,dataSetID:Int!) :Boolean!

  SaveAPInfo(userDID:String!,input:SubmitApInfo) :Boolean!
  SubmitAPInfo(userDID:String!,input:SubmitApInfo) :Boolean!
  RevokeAPInfo(userDID:String!,apInfoID:Int!) :Boolean!
  SaveAPDataSet(userDID:String!,input:ApDataSetInfo) :Boolean!
  PublishAPDataSet(userDID:String!,input:ApDataSetInfo) :Boolean!
  RevokeAPDataSet(userDID:String!,,dataSetID:Int!) :Boolean!
  DeleteAPDataSet(userDID:String!,,dataSetID:Int!) :Boolean!
  RevokePublishedAPDataSet(userDID:String!,dataSetID:Int!) :Boolean!
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_DeleteAPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dataSetID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_DeleteDPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dataSetID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_PublishAPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 *model.ApDataSetInfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOApDataSetInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_PublishDPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 *model.DpDataSetInfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalODpDataSetInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_RevokeAPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dataSetID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_RevokeAPInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["apInfoID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apInfoID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["apInfoID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_RevokeDPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dataSetID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_RevokeDPInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dpInfoID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpInfoID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dpInfoID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_RevokePublishedAPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dataSetID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_RevokePublishedDPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dataSetID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_SaveAPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 *model.ApDataSetInfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOApDataSetInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_SaveAPInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 *model.SubmitApInfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOSubmitApInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSubmitApInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_SaveDPDataSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 *model.DpDataSetInfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalODpDataSetInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_SaveDPInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 *model.SubmitDpInfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOSubmitDpInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSubmitDpInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_SaveThirdPartyVc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["mediaType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mediaType"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mediaType"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["credential"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credential"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["credential"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_SaveUserKycInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["kyc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kyc"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kyc"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_SubmitAPInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 *model.SubmitApInfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOSubmitApInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSubmitApInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_SubmitDPInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 *model.SubmitDpInfo
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOSubmitDpInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSubmitDpInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UnBindThirdParty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["mediaType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mediaType"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mediaType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_UploadAvatar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNewOuterTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AddNewOuterTaskReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddNewOuterTaskReq2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddNewOuterTaskReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AddTask
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddTask2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddTask(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["overwrite"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overwrite"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["overwrite"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserBasicInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AddUserBasicInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddUserBasicInfoReq2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddUserBasicInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bindAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BindAddress
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBindAddress2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐBindAddress(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changeAddressVisible_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["chain"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chain"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg2
	var arg3 bool
	if tmp, ok := rawArgs["visible"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visible"))
		arg3, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["visible"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_claimNFT_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["chain"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chain"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["nftType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nftType"))
		arg2, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nftType"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_editAppNameAppInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["appName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_editEmailAddrBasicInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["verifyCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verifyCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["verifyCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_editNickNameBasicInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["nickName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nickName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nickName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_editWebsiteAppInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["website"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["website"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Login
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLogin2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLogin(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refreshToken_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RefreshTokenInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRefreshTokenInput2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐRefreshTokenInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_requestEmailVCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_requestOscore_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RequestOscoreReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalORequestOscoreReq2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐRequestOscoreReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitChanllenge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ClientResponse
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNClientResponse2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClientResponse(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitClaimTxInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["chain"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["chain"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["addr"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addr"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr"] = arg2
	var arg3 int64
	if tmp, ok := rawArgs["nftType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nftType"))
		arg3, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nftType"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["txhash"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("txhash"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["txhash"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_unbindAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UnBindAddress
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUnBindAddress2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUnBindAddress(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateApplicationInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ApplicationInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOApplicationInfoReq2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApplicationInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserBasicInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateUserBasicInfoReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdateUserBasicInfoReq2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUpdateUserBasicInfoReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAlgorithmMethods_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAlgorithmProviderMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getAlgorithmProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllAlgorithmProviderMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 *model.AlgorithmProviderMethodWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOAlgorithmProviderMethodWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProviderMethodWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	var arg5 model.LabelsInfo
	if tmp, ok := rawArgs["labels"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
		arg5, err = ec.unmarshalNLabelsInfo2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["labels"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_getAllAlgorithmProviders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 *model.AlgorithmProviderWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOAlgorithmProviderWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProviderWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getAllDataProviderMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 *model.DataProviderMethodWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalODataProviderMethodWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProviderMethodWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	var arg5 model.LabelsInfo
	if tmp, ok := rawArgs["labels"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
		arg5, err = ec.unmarshalNLabelsInfo2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["labels"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_getAllDataProviders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 *model.DataProviderWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalODataProviderWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProviderWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getApplicationInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBasedVotingStrategy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["addrs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addrs"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addrs"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["space"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("space"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["space"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["snapshot"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("snapshot"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["snapshot"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["network"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("network"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["network"] = arg3
	var arg4 *model.SnapShotOptions
	if tmp, ok := rawArgs["options"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("options"))
		arg4, err = ec.unmarshalOSnapShotOptions2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSnapShotOptions(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["options"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getClaimNFTRecords_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 *model.ClaimNFTWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOClaimNFTWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getCompositeDpInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["method"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["method"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getDataMethods_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDataProviderMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getDataProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDataProvidersByAP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["method"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["method"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getLatestOscore_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getNFTClaimedCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int64
	if tmp, ok := rawArgs["nftType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nftType"))
		arg0, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nftType"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userDid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDid"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDid"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getNFTSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 *model.NFTSettingWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalONFTSettingWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSettingWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getTokenPrice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TokenPrice
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTokenPrice2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐTokenPrice(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserAssetBalance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserBasicInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserBindAddressInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserClaimedNFT_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 *model.UserClaimedNFTWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOUserClaimedNFTWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNFTWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getUserCredentials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 model.UserCredntialWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalNUserCredntialWhere2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredntialWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getUserGenNFTCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserGenReputationCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["taskId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskId"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["taskId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getUserTasks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int64
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	var arg1 *int64
	if tmp, ok := rawArgs["skip"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
		arg1, err = ec.unmarshalOInt2ᚖint64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["skip"] = arg1
	var arg2 *model.GetUserTasksWhere
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg2, err = ec.unmarshalOGetUserTasksWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetUserTasksWhere(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_getUserTotalValue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserVisibleBindAddressInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryAPDataSetInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dataSetID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_queryAllThirdPartyVcStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryDPDataSetInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["dataSetID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_queryOuterTask_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.OuterTaskReq
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOOuterTaskReq2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐOuterTaskReq(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_querySig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["addr"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addr"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addr"] = arg0
	var arg1 int64
	if tmp, ok := rawArgs["nftType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nftType"))
		arg1, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nftType"] = arg1
	var arg2 int64
	if tmp, ok := rawArgs["score"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
		arg2, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["score"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_queryTaskExist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AddTask
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOAddTask2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddTask(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryThirdPartyVc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["mediaType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mediaType"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mediaType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_queryUserAPDataSetList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["dataSetName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg2
	var arg3 int64
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg3, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg3
	var arg4 int64
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
		arg4, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg4
	var arg5 model.LabelsInfo
	if tmp, ok := rawArgs["labels"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
		arg5, err = ec.unmarshalNLabelsInfo2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["labels"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_queryUserBasicInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["user_did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user_did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryUserDPDataSetList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["dataSetName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataSetName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg2
	var arg3 int64
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg3, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg3
	var arg4 int64
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
		arg4, err = ec.unmarshalNInt2int64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg4
	var arg5 model.LabelsInfo
	if tmp, ok := rawArgs["labels"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
		arg5, err = ec.unmarshalNLabelsInfo2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfo(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["labels"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_queryUserKycInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["did"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryUserLatestAPInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryUserLatestDPInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryUserPublishedAP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryUserPublishedDP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userDID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userDID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_queryUserSNSBinding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["caller_did"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caller_did"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["caller_did"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["address"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["address"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["encrypt"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encrypt"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encrypt"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_requestChanllenge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ClientHello
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOClientHello2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClientHello(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _APDataSetList_apDataSetData(ctx context.Context, field graphql.CollectedField, obj *model.APDataSetList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APDataSetList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApDataSetData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ApDataSetRes)
	fc.Result = res
	return ec.marshalOApDataSetRes2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetRes(ctx, field.Selections, res)
}

func (ec *executionContext) _APDataSetList_curPageNum(ctx context.Context, field graphql.CollectedField, obj *model.APDataSetList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APDataSetList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurPageNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _APDataSetList_totalNum(ctx context.Context, field graphql.CollectedField, obj *model.APDataSetList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APDataSetList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _APMethodWithAp_did(ctx context.Context, field graphql.CollectedField, obj *model.APMethodWithAp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APMethodWithAp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _APMethodWithAp_name(ctx context.Context, field graphql.CollectedField, obj *model.APMethodWithAp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APMethodWithAp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _APMethodWithAp_method(ctx context.Context, field graphql.CollectedField, obj *model.APMethodWithAp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APMethodWithAp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _APMethodWithAp_methodName(ctx context.Context, field graphql.CollectedField, obj *model.APMethodWithAp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APMethodWithAp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _APMethodWithAp_methodDescription(ctx context.Context, field graphql.CollectedField, obj *model.APMethodWithAp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APMethodWithAp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MethodDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _APMethodWithAp_icon(ctx context.Context, field graphql.CollectedField, obj *model.APMethodWithAp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APMethodWithAp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _APMethodWithAp_used(ctx context.Context, field graphql.CollectedField, obj *model.APMethodWithAp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APMethodWithAp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Used, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _APMethodWithAp_labels(ctx context.Context, field graphql.CollectedField, obj *model.APMethodWithAp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "APMethodWithAp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LabelsInfos)
	fc.Result = res
	return ec.marshalNLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_name(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_type(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_introduction(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Introduction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_did(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_createTime(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_title(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_provider(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_invokeFrequency(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvokeFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_apiState(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_author(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_popularity(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_delay(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _AlgorithmProvider_icon(ctx context.Context, field graphql.CollectedField, obj *model.AlgorithmProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AlgorithmProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_dataSetID(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_apDid(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_dataSetName(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSetName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_dataSetMethodName(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSetMethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_dataSetDesc(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSetDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_httpMethod(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_httpURL(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_Params(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Params, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_Status(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_ResDesc(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApDataSetRes_Labels(ctx context.Context, field graphql.CollectedField, obj *model.ApDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LabelsInfos)
	fc.Result = res
	return ec.marshalNLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _ApInfoRes_apInfoID(ctx context.Context, field graphql.CollectedField, obj *model.ApInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ApInfoRes_apDid(ctx context.Context, field graphql.CollectedField, obj *model.ApInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApInfoRes_apName(ctx context.Context, field graphql.CollectedField, obj *model.ApInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApInfoRes_apDesc(ctx context.Context, field graphql.CollectedField, obj *model.ApInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApInfoRes_Status(ctx context.Context, field graphql.CollectedField, obj *model.ApInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApInfoRes_ResDesc(ctx context.Context, field graphql.CollectedField, obj *model.ApInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApInfoRes_Avatar(ctx context.Context, field graphql.CollectedField, obj *model.ApInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationInfo_did(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ApplicationInfo_website(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ApplicationInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChainAddress_chain(ctx context.Context, field graphql.CollectedField, obj *model.ChainAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChainAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ChainAddress_contract_address(ctx context.Context, field graphql.CollectedField, obj *model.ChainAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ChainAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_tx_hash(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_chain(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_contract_address(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_nft_type(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NftType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_user_did(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_user_address(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_create_time(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_result(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecord_score(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecordsResp_count(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecordsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecordsResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTRecordsResp_records(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTRecordsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTRecordsResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Records, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ClaimNFTRecord)
	fc.Result = res
	return ec.marshalNClaimNFTRecord2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTResponse_errorCode(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTResponse_address(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClaimNFTResponse_param(ctx context.Context, field graphql.CollectedField, obj *model.ClaimNFTResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClaimNFTResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Param, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NFTParam)
	fc.Result = res
	return ec.marshalONFTParam2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTParam(ctx, field.Selections, res)
}

func (ec *executionContext) _DPAndMethod_dp(ctx context.Context, field graphql.CollectedField, obj *model.DPAndMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPAndMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DataProvider)
	fc.Result = res
	return ec.marshalNDataProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _DPAndMethod_method(ctx context.Context, field graphql.CollectedField, obj *model.DPAndMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPAndMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProviderMethod)
	fc.Result = res
	return ec.marshalNProviderMethod2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethod(ctx, field.Selections, res)
}

func (ec *executionContext) _DPDataSetList_dpDataSetData(ctx context.Context, field graphql.CollectedField, obj *model.DPDataSetList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPDataSetList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpDataSetData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DpDataSetRes)
	fc.Result = res
	return ec.marshalODpDataSetRes2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetRes(ctx, field.Selections, res)
}

func (ec *executionContext) _DPDataSetList_curPageNum(ctx context.Context, field graphql.CollectedField, obj *model.DPDataSetList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPDataSetList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurPageNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DPDataSetList_totalNum(ctx context.Context, field graphql.CollectedField, obj *model.DPDataSetList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPDataSetList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalNum, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DPMethodWithDp_did(ctx context.Context, field graphql.CollectedField, obj *model.DPMethodWithDp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPMethodWithDp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DPMethodWithDp_name(ctx context.Context, field graphql.CollectedField, obj *model.DPMethodWithDp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPMethodWithDp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DPMethodWithDp_method(ctx context.Context, field graphql.CollectedField, obj *model.DPMethodWithDp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPMethodWithDp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DPMethodWithDp_methodName(ctx context.Context, field graphql.CollectedField, obj *model.DPMethodWithDp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPMethodWithDp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DPMethodWithDp_methodDescription(ctx context.Context, field graphql.CollectedField, obj *model.DPMethodWithDp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPMethodWithDp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MethodDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DPMethodWithDp_icon(ctx context.Context, field graphql.CollectedField, obj *model.DPMethodWithDp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPMethodWithDp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DPMethodWithDp_used(ctx context.Context, field graphql.CollectedField, obj *model.DPMethodWithDp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPMethodWithDp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Used, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DPMethodWithDp_labels(ctx context.Context, field graphql.CollectedField, obj *model.DPMethodWithDp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DPMethodWithDp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LabelsInfos)
	fc.Result = res
	return ec.marshalNLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_name(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_type(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_introduction(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Introduction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_did(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_createTime(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_title(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_provider(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_invokeFrequency(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvokeFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_apiState(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_author(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_popularity(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_delay(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DataProvider_icon(ctx context.Context, field graphql.CollectedField, obj *model.DataProvider) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DataProvider",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_dataSetID(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_dpDid(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_dataSetName(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSetName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_dataSetMethodName(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSetMethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_dataSetDesc(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSetDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_httpMethod(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_httpURL(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_Params(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Params, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_Status(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_ResDesc(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DpDataSetRes_Labels(ctx context.Context, field graphql.CollectedField, obj *model.DpDataSetRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpDataSetRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LabelsInfos)
	fc.Result = res
	return ec.marshalNLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _DpInfoRes_dpInfoID(ctx context.Context, field graphql.CollectedField, obj *model.DpInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpInfoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _DpInfoRes_dpDid(ctx context.Context, field graphql.CollectedField, obj *model.DpInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DpInfoRes_dpName(ctx context.Context, field graphql.CollectedField, obj *model.DpInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DpInfoRes_dpDesc(ctx context.Context, field graphql.CollectedField, obj *model.DpInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpInfoRes_Status(ctx context.Context, field graphql.CollectedField, obj *model.DpInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpInfoRes_ResDesc(ctx context.Context, field graphql.CollectedField, obj *model.DpInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DpInfoRes_Avatar(ctx context.Context, field graphql.CollectedField, obj *model.DpInfoRes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DpInfoRes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GenNFTCountResp_count(ctx context.Context, field graphql.CollectedField, obj *model.GenNFTCountResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenNFTCountResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GenReputationCountResp_count(ctx context.Context, field graphql.CollectedField, obj *model.GenReputationCountResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GenReputationCountResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAllAlgorithmProviderMethodsResp_total(ctx context.Context, field graphql.CollectedField, obj *model.GetAllAlgorithmProviderMethodsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetAllAlgorithmProviderMethodsResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAllAlgorithmProviderMethodsResp_data(ctx context.Context, field graphql.CollectedField, obj *model.GetAllAlgorithmProviderMethodsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetAllAlgorithmProviderMethodsResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.APMethodWithAp)
	fc.Result = res
	return ec.marshalNAPMethodWithAp2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAPMethodWithApᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAllAlgorithmProvidersResp_total(ctx context.Context, field graphql.CollectedField, obj *model.GetAllAlgorithmProvidersResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetAllAlgorithmProvidersResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAllAlgorithmProvidersResp_data(ctx context.Context, field graphql.CollectedField, obj *model.GetAllAlgorithmProvidersResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetAllAlgorithmProvidersResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AlgorithmProvider)
	fc.Result = res
	return ec.marshalNAlgorithmProvider2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProviderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAllDataProviderMethodsResp_total(ctx context.Context, field graphql.CollectedField, obj *model.GetAllDataProviderMethodsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetAllDataProviderMethodsResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAllDataProviderMethodsResp_data(ctx context.Context, field graphql.CollectedField, obj *model.GetAllDataProviderMethodsResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetAllDataProviderMethodsResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DPMethodWithDp)
	fc.Result = res
	return ec.marshalNDPMethodWithDp2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPMethodWithDpᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAllDataProviders_total(ctx context.Context, field graphql.CollectedField, obj *model.GetAllDataProviders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetAllDataProviders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetAllDataProviders_data(ctx context.Context, field graphql.CollectedField, obj *model.GetAllDataProviders) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetAllDataProviders",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DataProvider)
	fc.Result = res
	return ec.marshalNDataProvider2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProviderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserTasksResp_total_count(ctx context.Context, field graphql.CollectedField, obj *model.GetUserTasksResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserTasksResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserTasksResp_tasks(ctx context.Context, field graphql.CollectedField, obj *model.GetUserTasksResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserTasksResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tasks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserTasks)
	fc.Result = res
	return ec.marshalNUserTasks2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserTasksᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LabelsInfos_blockChain(ctx context.Context, field graphql.CollectedField, obj *model.LabelsInfos) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LabelsInfos",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockChain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LabelsInfos_category(ctx context.Context, field graphql.CollectedField, obj *model.LabelsInfos) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LabelsInfos",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LabelsInfos_scenario(ctx context.Context, field graphql.CollectedField, obj *model.LabelsInfos) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LabelsInfos",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scenario, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_did(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_method(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_paramSchema(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamSchema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_resultSchema(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResultSchema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_url(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_compositeSetting(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompositeSetting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_param(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Param, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_name(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_description(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_invoked(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Invoked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_latency(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_createTime(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_httpMethod(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_compositeData(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompositeData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MethodDetail)
	fc.Result = res
	return ec.marshalNMethodDetail2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_labels(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LabelsInfos)
	fc.Result = res
	return ec.marshalNLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodDetail_status(ctx context.Context, field graphql.CollectedField, obj *model.MethodDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodInfo_did(ctx context.Context, field graphql.CollectedField, obj *model.MethodInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodInfo_title(ctx context.Context, field graphql.CollectedField, obj *model.MethodInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MethodInfo_data(ctx context.Context, field graphql.CollectedField, obj *model.MethodInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MethodInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MethodDetail)
	fc.Result = res
	return ec.marshalNMethodDetail2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodDetailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitChanllenge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitChanllenge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitChanllenge(rctx, args["input"].(model.ClientResponse))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, args["input"].(model.Login))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_refreshToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_refreshToken_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RefreshToken(rctx, args["input"].(model.RefreshTokenInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_bindAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_bindAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BindAddress(rctx, args["input"].(model.BindAddress))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_unbindAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_unbindAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnbindAddress(rctx, args["input"].(model.UnBindAddress))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddTask(rctx, args["input"].(model.AddTask), args["overwrite"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_changeAddressVisible(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_changeAddressVisible_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ChangeAddressVisible(rctx, args["userDID"].(string), args["chain"].(string), args["address"].(string), args["visible"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestEmailVCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestEmailVCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestEmailVCode(rctx, args["did"].(string), args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addUserBasicInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addUserBasicInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserBasicInfo(rctx, args["input"].(model.AddUserBasicInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserBasicInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserBasicInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserBasicInfo(rctx, args["input"].(*model.UpdateUserBasicInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateApplicationInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateApplicationInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateApplicationInfo(rctx, args["input"].(*model.ApplicationInfoReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editNickNameBasicInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editNickNameBasicInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditNickNameBasicInfo(rctx, args["did"].(string), args["nickName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editEmailAddrBasicInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editEmailAddrBasicInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditEmailAddrBasicInfo(rctx, args["did"].(string), args["email"].(string), args["verifyCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editAppNameAppInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editAppNameAppInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditAppNameAppInfo(rctx, args["did"].(string), args["appName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editWebsiteAppInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editWebsiteAppInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditWebsiteAppInfo(rctx, args["did"].(string), args["website"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestOscore(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestOscore_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestOscore(rctx, args["input"].(*model.RequestOscoreReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addNewOuterTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addNewOuterTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNewOuterTask(rctx, args["input"].(model.AddNewOuterTaskReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SaveThirdPartyVc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SaveThirdPartyVc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveThirdPartyVc(rctx, args["did"].(string), args["mediaType"].(string), args["credential"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UnBindThirdParty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UnBindThirdParty_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnBindThirdParty(rctx, args["did"].(string), args["mediaType"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SaveUserKycInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SaveUserKycInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveUserKycInfo(rctx, args["did"].(string), args["kyc"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_claimNFT(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_claimNFT_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ClaimNft(rctx, args["did"].(string), args["chain"].(string), args["nftType"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ClaimNFTResponse)
	fc.Result = res
	return ec.marshalNClaimNFTResponse2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitClaimTxInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitClaimTxInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitClaimTxInfo(rctx, args["did"].(string), args["chain"].(string), args["addr"].(string), args["nftType"].(int64), args["txhash"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SaveDPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SaveDPInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveDPInfo(rctx, args["userDID"].(string), args["input"].(*model.SubmitDpInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SubmitDPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SubmitDPInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitDPInfo(rctx, args["userDID"].(string), args["input"].(*model.SubmitDpInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_RevokeDPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_RevokeDPInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokeDPInfo(rctx, args["userDID"].(string), args["dpInfoID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_UploadAvatar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_UploadAvatar_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadAvatar(rctx, args["file"].(graphql.Upload))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SaveDPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SaveDPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveDPDataSet(rctx, args["userDID"].(string), args["input"].(*model.DpDataSetInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_PublishDPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_PublishDPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PublishDPDataSet(rctx, args["userDID"].(string), args["input"].(*model.DpDataSetInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_RevokeDPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_RevokeDPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokeDPDataSet(rctx, args["userDID"].(string), args["dataSetID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DeleteDPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DeleteDPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDPDataSet(rctx, args["userDID"].(string), args["dataSetID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_RevokePublishedDPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_RevokePublishedDPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokePublishedDPDataSet(rctx, args["userDID"].(string), args["dataSetID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SaveAPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SaveAPInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveAPInfo(rctx, args["userDID"].(string), args["input"].(*model.SubmitApInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SubmitAPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SubmitAPInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitAPInfo(rctx, args["userDID"].(string), args["input"].(*model.SubmitApInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_RevokeAPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_RevokeAPInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokeAPInfo(rctx, args["userDID"].(string), args["apInfoID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SaveAPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SaveAPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SaveAPDataSet(rctx, args["userDID"].(string), args["input"].(*model.ApDataSetInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_PublishAPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_PublishAPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PublishAPDataSet(rctx, args["userDID"].(string), args["input"].(*model.ApDataSetInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_RevokeAPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_RevokeAPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokeAPDataSet(rctx, args["userDID"].(string), args["dataSetID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_DeleteAPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_DeleteAPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAPDataSet(rctx, args["userDID"].(string), args["dataSetID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_RevokePublishedAPDataSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_RevokePublishedAPDataSet_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RevokePublishedAPDataSet(rctx, args["userDID"].(string), args["dataSetID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTClaimedCountResp_total_count(ctx context.Context, field graphql.CollectedField, obj *model.NFTClaimedCountResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTClaimedCountResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTClaimedCountResp_user_count(ctx context.Context, field graphql.CollectedField, obj *model.NFTClaimedCountResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTClaimedCountResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTParam_hash(ctx context.Context, field graphql.CollectedField, obj *model.NFTParam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTParam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTParam_sig(ctx context.Context, field graphql.CollectedField, obj *model.NFTParam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTParam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTParam_nftType(ctx context.Context, field graphql.CollectedField, obj *model.NFTParam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTParam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NftType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTParam_score(ctx context.Context, field graphql.CollectedField, obj *model.NFTParam) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTParam",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_id(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_name(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_description(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_image(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_dp_did(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_dp_method(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_ap_did(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_ap_name(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_ap_method(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_ap_method_name(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApMethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_lowest_score(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LowestScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_valid_days(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidDays, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_restriction(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Restriction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_chain_addresses(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChainAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ChainAddress)
	fc.Result = res
	return ec.marshalNChainAddress2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐChainAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSetting_issue_by(ctx context.Context, field graphql.CollectedField, obj *model.NFTSetting) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSetting",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSettingResp_count(ctx context.Context, field graphql.CollectedField, obj *model.NFTSettingResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSettingResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _NFTSettingResp_records(ctx context.Context, field graphql.CollectedField, obj *model.NFTSettingResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NFTSettingResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Records, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NFTSetting)
	fc.Result = res
	return ec.marshalNNFTSetting2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSettingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceInfo_priceType(ctx context.Context, field graphql.CollectedField, obj *model.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PriceInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceInfo_price(ctx context.Context, field graphql.CollectedField, obj *model.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PriceInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceInfo_chargeType(ctx context.Context, field graphql.CollectedField, obj *model.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PriceInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_name(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_paramSchema(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParamSchema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_resultSchema(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResultSchema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_title(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_description(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_labels(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LabelsInfos)
	fc.Result = res
	return ec.marshalNLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_createTime(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_nftType(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NftType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_totalUsed(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalUsed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_hasDataSet(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasDataSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_status(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ProviderMethod_supportMulti(ctx context.Context, field graphql.CollectedField, obj *model.ProviderMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProviderMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportMulti, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllAlgorithmProviders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAllAlgorithmProviders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAlgorithmProviders(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.AlgorithmProviderWhere), args["orderBy"].(*string), args["orderDirection"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetAllAlgorithmProvidersResp)
	fc.Result = res
	return ec.marshalNGetAllAlgorithmProvidersResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllAlgorithmProvidersResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllDataProviders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAllDataProviders_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllDataProviders(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.DataProviderWhere), args["orderBy"].(*string), args["orderDirection"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetAllDataProviders)
	fc.Result = res
	return ec.marshalNGetAllDataProviders2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllDataProviders(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDataProvidersByAP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDataProvidersByAP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDataProvidersByAp(rctx, args["did"].(string), args["method"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DPAndMethod)
	fc.Result = res
	return ec.marshalODPAndMethod2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPAndMethodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserAssetBalance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserAssetBalance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserAssetBalance(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserAsset)
	fc.Result = res
	return ec.marshalNUserAsset2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAssetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserTotalValue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserTotalValue_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserTotalValue(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getTokenPrice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getTokenPrice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTokenPrice(rctx, args["input"].(model.TokenPrice))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserBindAddressInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserBindAddressInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserBindAddressInfo(rctx, args["input"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserAddressInfo)
	fc.Result = res
	return ec.marshalNUserAddressInfo2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAddressInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserVisibleBindAddressInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserVisibleBindAddressInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserVisibleBindAddressInfo(rctx, args["input"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserAddressInfo)
	fc.Result = res
	return ec.marshalNUserAddressInfo2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAddressInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserTasks_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserTasks(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.GetUserTasksWhere), args["orderBy"].(*string), args["orderDirection"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetUserTasksResp)
	fc.Result = res
	return ec.marshalNGetUserTasksResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetUserTasksResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryTaskExist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryTaskExist_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryTaskExist(rctx, args["input"].(*model.AddTask))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getLatestOscore(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getLatestOscore_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLatestOscore(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserLatestOscore)
	fc.Result = res
	return ec.marshalOUserLatestOscore2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserLatestOscore(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAlgorithmMethods(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAlgorithmMethods_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAlgorithmMethods(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProviderMethod)
	fc.Result = res
	return ec.marshalNProviderMethod2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDataMethods(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDataMethods_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDataMethods(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ProviderMethod)
	fc.Result = res
	return ec.marshalNProviderMethod2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAlgorithmProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAlgorithmProvider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAlgorithmProvider(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AlgorithmProvider)
	fc.Result = res
	return ec.marshalOAlgorithmProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDataProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDataProvider_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDataProvider(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataProvider)
	fc.Result = res
	return ec.marshalODataProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProvider(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserTask(rctx, args["key"].(string), args["taskId"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserTasks)
	fc.Result = res
	return ec.marshalOUserTasks2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserTasks(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAlgorithmProviderMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAlgorithmProviderMethod_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAlgorithmProviderMethod(rctx, args["did"].(string), args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProviderMethod)
	fc.Result = res
	return ec.marshalOProviderMethod2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethod(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDataProviderMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDataProviderMethod_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDataProviderMethod(rctx, args["did"].(string), args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProviderMethod)
	fc.Result = res
	return ec.marshalOProviderMethod2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethod(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserGenNFTCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserGenNFTCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserGenNFTCount(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GenNFTCountResp)
	fc.Result = res
	return ec.marshalNGenNFTCountResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGenNFTCountResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserGenReputationCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserGenReputationCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserGenReputationCount(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GenReputationCountResp)
	fc.Result = res
	return ec.marshalNGenReputationCountResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGenReputationCountResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserCredentials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserCredentials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserCredentials(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(model.UserCredntialWhere), args["orderBy"].(*string), args["orderDirection"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserCredentials)
	fc.Result = res
	return ec.marshalNUserCredentials2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredentials(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllDataProviderMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAllDataProviderMethod_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllDataProviderMethod(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.DataProviderMethodWhere), args["orderBy"].(*string), args["orderDirection"].(*string), args["labels"].(model.LabelsInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetAllDataProviderMethodsResp)
	fc.Result = res
	return ec.marshalNGetAllDataProviderMethodsResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllDataProviderMethodsResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllAlgorithmProviderMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAllAlgorithmProviderMethod_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAlgorithmProviderMethod(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.AlgorithmProviderMethodWhere), args["orderBy"].(*string), args["orderDirection"].(*string), args["labels"].(model.LabelsInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetAllAlgorithmProviderMethodsResp)
	fc.Result = res
	return ec.marshalNGetAllAlgorithmProviderMethodsResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllAlgorithmProviderMethodsResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCompositeDpInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCompositeDpInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCompositeDpInfo(rctx, args["did"].(string), args["method"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MethodInfo)
	fc.Result = res
	return ec.marshalNMethodInfo2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllAPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllAPInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MethodInfo)
	fc.Result = res
	return ec.marshalNMethodInfo2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBasedVotingStrategy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBasedVotingStrategy_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBasedVotingStrategy(rctx, args["addrs"].([]string), args["space"].(string), args["snapshot"].(string), args["network"].(string), args["options"].(*model.SnapShotOptions))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.StrategyResult)
	fc.Result = res
	return ec.marshalNStrategyResult2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐStrategyResultᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserBasicInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserBasicInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserBasicInfo(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserBasicInfo)
	fc.Result = res
	return ec.marshalNUserBasicInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserBasicInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getApplicationInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getApplicationInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetApplicationInfo(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationInfo)
	fc.Result = res
	return ec.marshalNApplicationInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApplicationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryOuterTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryOuterTask_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryOuterTask(rctx, args["input"].(*model.OuterTaskReq))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserTasks)
	fc.Result = res
	return ec.marshalOUserTasks2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserTasks(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_requestChanllenge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_requestChanllenge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RequestChanllenge(rctx, args["input"].(*model.ClientHello))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ServerHello)
	fc.Result = res
	return ec.marshalNServerHello2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐServerHello(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryThirdPartyVc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryThirdPartyVc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryThirdPartyVc(rctx, args["did"].(string), args["mediaType"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryAllThirdPartyVcStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryAllThirdPartyVcStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryAllThirdPartyVcStatus(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ThirdPartyVcStatus)
	fc.Result = res
	return ec.marshalNThirdPartyVcStatus2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐThirdPartyVcStatusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserKycInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserKycInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserKycInfo(rctx, args["did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserPublishedDP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserPublishedDP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserPublishedDp(rctx, args["userDID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DpInfoRes)
	fc.Result = res
	return ec.marshalODpInfoRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpInfoRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserLatestDPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserLatestDPInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserLatestDPInfo(rctx, args["userDID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DpInfoRes)
	fc.Result = res
	return ec.marshalODpInfoRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpInfoRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryDPDataSetInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryDPDataSetInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryDPDataSetInfo(rctx, args["userDID"].(string), args["dataSetID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DpDataSetRes)
	fc.Result = res
	return ec.marshalNDpDataSetRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserDPDataSetList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserDPDataSetList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserDPDataSetList(rctx, args["userDID"].(string), args["dataSetName"].(string), args["status"].(string), args["page"].(int64), args["size"].(int64), args["labels"].(model.LabelsInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DPDataSetList)
	fc.Result = res
	return ec.marshalNDPDataSetList2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPDataSetList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryDPLabels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryDPLabels(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LabelsInfos)
	fc.Result = res
	return ec.marshalOLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_querySig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_querySig_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QuerySig(rctx, args["addr"].(string), args["nftType"].(int64), args["score"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SigResp)
	fc.Result = res
	return ec.marshalNSigResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSigResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getClaimNFTRecords(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getClaimNFTRecords_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetClaimNFTRecords(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.ClaimNFTWhere), args["orderBy"].(*string), args["orderDirection"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ClaimNFTRecordsResp)
	fc.Result = res
	return ec.marshalNClaimNFTRecordsResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTRecordsResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getNFTSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getNFTSettings_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNFTSettings(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.NFTSettingWhere), args["orderBy"].(*string), args["orderDirection"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NFTSettingResp)
	fc.Result = res
	return ec.marshalNNFTSettingResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSettingResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserClaimedNFT(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserClaimedNFT_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserClaimedNft(rctx, args["first"].(*int64), args["skip"].(*int64), args["where"].(*model.UserClaimedNFTWhere), args["orderBy"].(*string), args["orderDirection"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserClaimedNFTResp)
	fc.Result = res
	return ec.marshalNUserClaimedNFTResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNFTResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getNFTClaimedCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getNFTClaimedCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNFTClaimedCount(rctx, args["nftType"].(int64), args["userDid"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NFTClaimedCountResp)
	fc.Result = res
	return ec.marshalNNFTClaimedCountResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTClaimedCountResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserPublishedAP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserPublishedAP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserPublishedAp(rctx, args["userDID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApInfoRes)
	fc.Result = res
	return ec.marshalOApInfoRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApInfoRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserLatestAPInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserLatestAPInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserLatestAPInfo(rctx, args["userDID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApInfoRes)
	fc.Result = res
	return ec.marshalOApInfoRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApInfoRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryAPDataSetInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryAPDataSetInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryAPDataSetInfo(rctx, args["userDID"].(string), args["dataSetID"].(int64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ApDataSetRes)
	fc.Result = res
	return ec.marshalNApDataSetRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetRes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserAPDataSetList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserAPDataSetList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserAPDataSetList(rctx, args["userDID"].(string), args["dataSetName"].(string), args["status"].(string), args["page"].(int64), args["size"].(int64), args["labels"].(model.LabelsInfo))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.APDataSetList)
	fc.Result = res
	return ec.marshalNAPDataSetList2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAPDataSetList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryAPLabels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryAPLabels(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LabelsInfos)
	fc.Result = res
	return ec.marshalOLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserSNSBinding(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserSNSBinding_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserSNSBinding(rctx, args["caller_did"].(string), args["address"].(string), args["encrypt"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SNSBindingResp)
	fc.Result = res
	return ec.marshalNSNSBindingResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSNSBindingResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_queryUserBasicInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_queryUserBasicInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().QueryUserBasicInfo(rctx, args["user_did"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserBasicInfoResp)
	fc.Result = res
	return ec.marshalNUserBasicInfoResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserBasicInfoResp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingData_bright_id(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BrightID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingData_shufti_pro(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShuftiPro, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingData_tweeter(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tweeter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingData_github(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Github, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingData_linkedin(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Linkedin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingData_facebook(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facebook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingDataWithSig_data(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingDataWithSig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingDataWithSig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SNSBindingData)
	fc.Result = res
	return ec.marshalNSNSBindingData2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSNSBindingData(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingDataWithSig_sig(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingDataWithSig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingDataWithSig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingResp_data(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SNSBindingDataWithSig)
	fc.Result = res
	return ec.marshalOSNSBindingDataWithSig2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSNSBindingDataWithSig(ctx, field.Selections, res)
}

func (ec *executionContext) _SNSBindingResp_encrypted(ctx context.Context, field graphql.CollectedField, obj *model.SNSBindingResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SNSBindingResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encrypted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerHello_ver(ctx context.Context, field graphql.CollectedField, obj *model.ServerHello) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerHello",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerHello_type(ctx context.Context, field graphql.CollectedField, obj *model.ServerHello) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerHello",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerHello_nonce(ctx context.Context, field graphql.CollectedField, obj *model.ServerHello) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerHello",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nonce, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerHello_server(ctx context.Context, field graphql.CollectedField, obj *model.ServerHello) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerHello",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Server, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ServerInfo)
	fc.Result = res
	return ec.marshalNServerInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐServerInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerHello_chain(ctx context.Context, field graphql.CollectedField, obj *model.ServerHello) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerHello",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerHello_alg(ctx context.Context, field graphql.CollectedField, obj *model.ServerHello) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerHello",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerHello_vcFilters(ctx context.Context, field graphql.CollectedField, obj *model.ServerHello) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerHello",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VcFilters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.VCFilter)
	fc.Result = res
	return ec.marshalOVCFilter2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐVCFilter(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ServerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerInfo_icon(ctx context.Context, field graphql.CollectedField, obj *model.ServerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerInfo_url(ctx context.Context, field graphql.CollectedField, obj *model.ServerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerInfo_did(ctx context.Context, field graphql.CollectedField, obj *model.ServerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ServerInfo_verificationMethod(ctx context.Context, field graphql.CollectedField, obj *model.ServerInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ServerInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerificationMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SigResp_hash(ctx context.Context, field graphql.CollectedField, obj *model.SigResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SigResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SigResp_sig(ctx context.Context, field graphql.CollectedField, obj *model.SigResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SigResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StrategyResult_address(ctx context.Context, field graphql.CollectedField, obj *model.StrategyResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StrategyResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StrategyResult_score(ctx context.Context, field graphql.CollectedField, obj *model.StrategyResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StrategyResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyVcStatus_mediaType(ctx context.Context, field graphql.CollectedField, obj *model.ThirdPartyVcStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyVcStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ThirdPartyVcStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.ThirdPartyVcStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ThirdPartyVcStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAddressInfo_chain(ctx context.Context, field graphql.CollectedField, obj *model.UserAddressInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAddressInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAddressInfo_address(ctx context.Context, field graphql.CollectedField, obj *model.UserAddressInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAddressInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAddressInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *model.UserAddressInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAddressInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAddressInfo_visible(ctx context.Context, field graphql.CollectedField, obj *model.UserAddressInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAddressInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAsset_name(ctx context.Context, field graphql.CollectedField, obj *model.UserAsset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAsset",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAsset_tokenAddress(ctx context.Context, field graphql.CollectedField, obj *model.UserAsset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAsset",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAsset_icon(ctx context.Context, field graphql.CollectedField, obj *model.UserAsset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAsset",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAsset_chain(ctx context.Context, field graphql.CollectedField, obj *model.UserAsset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAsset",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAsset_balance(ctx context.Context, field graphql.CollectedField, obj *model.UserAsset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAsset",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Balance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAsset_price(ctx context.Context, field graphql.CollectedField, obj *model.UserAsset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAsset",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserAsset_value(ctx context.Context, field graphql.CollectedField, obj *model.UserAsset) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserAsset",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfo_did(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Did, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfo_nick_name(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NickName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfo_avatar(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Avatar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfo_email(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfoResp_walletAddress(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfoResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WalletAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfoResp_verifications(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfoResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Verifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfoResp_credentials(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfoResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credentials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfoResp_nfts(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfoResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nfts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfoResp_modelPublished(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfoResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModelPublished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserBasicInfoResp_datasetPublished(ctx context.Context, field graphql.CollectedField, obj *model.UserBasicInfoResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserBasicInfoResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatasetPublished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_owner(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_score(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_valid_to(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_dp_did(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_dp_title(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_dp_method(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_dp_method_title(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpMethodTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_ap_did(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_ap_title(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_ap_method(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_ap_method_title(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApMethodTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_valid_days(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidDays, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_image(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_tx_hash(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TxHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_token_id(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TokenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_name(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_issue_by(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_chain(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_lowest_score(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LowestScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_description(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_claim_time(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClaimTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_contract_address(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_nft_type(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NftType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_nft_score(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NftScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFT_is_expired(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExpired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFTResp_count(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNFTResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFTResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserClaimedNFTResp_records(ctx context.Context, field graphql.CollectedField, obj *model.UserClaimedNFTResp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserClaimedNFTResp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Records, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserClaimedNft)
	fc.Result = res
	return ec.marshalNUserClaimedNFT2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNftᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredential_score(ctx context.Context, field graphql.CollectedField, obj *model.UserCredential) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredential",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredential_dp_name(ctx context.Context, field graphql.CollectedField, obj *model.UserCredential) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredential",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredential_dp_method_name(ctx context.Context, field graphql.CollectedField, obj *model.UserCredential) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredential",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpMethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredential_ap_name(ctx context.Context, field graphql.CollectedField, obj *model.UserCredential) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredential",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredential_ap_method_name(ctx context.Context, field graphql.CollectedField, obj *model.UserCredential) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredential",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApMethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredential_create_time(ctx context.Context, field graphql.CollectedField, obj *model.UserCredential) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredential",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredential_valid_to(ctx context.Context, field graphql.CollectedField, obj *model.UserCredential) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredential",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredentials_total_count(ctx context.Context, field graphql.CollectedField, obj *model.UserCredentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserCredentials_data(ctx context.Context, field graphql.CollectedField, obj *model.UserCredentials) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserCredentials",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserCredential)
	fc.Result = res
	return ec.marshalNUserCredential2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredentialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLatestOscore_Oscore(ctx context.Context, field graphql.CollectedField, obj *model.UserLatestOscore) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLatestOscore",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Oscore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLatestOscore_ApDID(ctx context.Context, field graphql.CollectedField, obj *model.UserLatestOscore) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLatestOscore",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLatestOscore_DpDID(ctx context.Context, field graphql.CollectedField, obj *model.UserLatestOscore) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLatestOscore",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserLatestOscore_CreateTime(ctx context.Context, field graphql.CollectedField, obj *model.UserLatestOscore) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserLatestOscore",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_taskId(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_userDID(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_apDID(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_apName(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_apIcon(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApIcon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_apMethod(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_apMethodName(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApMethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_dpDID(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpDid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_dpName(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_dpIcon(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpIcon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_dpMethod(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_dpMethodName(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DpMethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_createTime(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_updateTime(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_taskStatus(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_taskResult(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_resultFile(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResultFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_issueTxhash(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IssueTxhash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_valid_to(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_nftType(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NftType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _UserTasks_involved_addresses(ctx context.Context, field graphql.CollectedField, obj *model.UserTasks) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserTasks",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvolvedAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VCFilter_type(ctx context.Context, field graphql.CollectedField, obj *model.VCFilter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VCFilter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VCFilter_express(ctx context.Context, field graphql.CollectedField, obj *model.VCFilter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VCFilter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Express, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VCFilter_trustRoots(ctx context.Context, field graphql.CollectedField, obj *model.VCFilter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VCFilter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrustRoots, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _VCFilter_required(ctx context.Context, field graphql.CollectedField, obj *model.VCFilter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VCFilter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Required, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddNewOuterTaskReq(ctx context.Context, obj interface{}) (model.AddNewOuterTaskReq, error) {
	var it model.AddNewOuterTaskReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "caller_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caller_did"))
			it.CallerDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNAddNewOuterTaskReqData2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddNewOuterTaskReqData(ctx, v)
			if err != nil {
				return it, err
			}
		case "sig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sig"))
			it.Sig, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddNewOuterTaskReqData(ctx context.Context, obj interface{}) (model.AddNewOuterTaskReqData, error) {
	var it model.AddNewOuterTaskReqData
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "dp_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dp_did"))
			it.DpDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dp_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dp_method"))
			it.DpMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ap_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ap_did"))
			it.ApDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ap_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ap_method"))
			it.ApMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallet"))
			it.Wallet, err = ec.unmarshalNWalletInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐWalletInfo(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddTask(ctx context.Context, obj interface{}) (model.AddTask, error) {
	var it model.AddTask
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "userDID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userDID"))
			it.UserDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apDID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apDID"))
			it.ApDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apMethod"))
			it.ApMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dpDID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpDID"))
			it.DpDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dpMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpMethod"))
			it.DpMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindInfo"))
			it.BindInfo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddUserBasicInfoReq(ctx context.Context, obj interface{}) (model.AddUserBasicInfoReq, error) {
	var it model.AddUserBasicInfoReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
			it.Did, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nick_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nick_name"))
			it.NickName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "vcode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vcode"))
			it.Vcode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlgorithmProviderMethodWhere(ctx context.Context, obj interface{}) (model.AlgorithmProviderMethodWhere, error) {
	var it model.AlgorithmProviderMethodWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "did_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did_like"))
			it.DidLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAlgorithmProviderWhere(ctx context.Context, obj interface{}) (model.AlgorithmProviderWhere, error) {
	var it model.AlgorithmProviderWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApDataSetInfo(ctx context.Context, obj interface{}) (model.ApDataSetInfo, error) {
	var it model.ApDataSetInfo
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "dataSetID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
			it.DataSetID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dataSetName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetName"))
			it.DataSetName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dataSetMethodName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetMethodName"))
			it.DataSetMethodName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dataSetDesc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetDesc"))
			it.DataSetDesc, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "httpMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpMethod"))
			it.HTTPMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "httpURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpURL"))
			it.HTTPURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Params":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Params"))
			it.Params, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Labels"))
			it.Labels, err = ec.unmarshalNLabelsInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfo(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputApplicationInfoReq(ctx context.Context, obj interface{}) (model.ApplicationInfoReq, error) {
	var it model.ApplicationInfoReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
			it.Did, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBindAddress(ctx context.Context, obj interface{}) (model.BindAddress, error) {
	var it model.BindAddress
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
			it.Did, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "chain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
			it.Chain, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pubkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pubkey"))
			it.Pubkey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sig"))
			it.Sig, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClaimNFTWhere(ctx context.Context, obj interface{}) (model.ClaimNFTWhere, error) {
	var it model.ClaimNFTWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_did"))
			it.UserDid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "user_address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_address"))
			it.UserAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "chain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
			it.Chain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nft_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nft_type"))
			it.NftType, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "result":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("result"))
			it.Result, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClientHello(ctx context.Context, obj interface{}) (model.ClientHello, error) {
	var it model.ClientHello
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ver"))
			it.Ver, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClientResponse(ctx context.Context, obj interface{}) (model.ClientResponse, error) {
	var it model.ClientResponse
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ver":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ver"))
			it.Ver, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
			it.Did, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nonce":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nonce"))
			it.Nonce, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "proof":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proof"))
			it.Proof, err = ec.unmarshalNProof2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProof(ctx, v)
			if err != nil {
				return it, err
			}
		case "vps":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vps"))
			it.Vps, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataProviderMethodWhere(ctx context.Context, obj interface{}) (model.DataProviderMethodWhere, error) {
	var it model.DataProviderMethodWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "did_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did_like"))
			it.DidLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataProviderWhere(ctx context.Context, obj interface{}) (model.DataProviderWhere, error) {
	var it model.DataProviderWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name_like":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name_like"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDpDataSetInfo(ctx context.Context, obj interface{}) (model.DpDataSetInfo, error) {
	var it model.DpDataSetInfo
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "dataSetID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetID"))
			it.DataSetID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dataSetName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetName"))
			it.DataSetName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dataSetMethodName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetMethodName"))
			it.DataSetMethodName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dataSetDesc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSetDesc"))
			it.DataSetDesc, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "httpMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpMethod"))
			it.HTTPMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "httpURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("httpURL"))
			it.HTTPURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Params":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Params"))
			it.Params, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Labels"))
			it.Labels, err = ec.unmarshalNLabelsInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfo(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetUserTasksWhere(ctx context.Context, obj interface{}) (model.GetUserTasksWhere, error) {
	var it model.GetUserTasksWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_did"))
			it.UserDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dp_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dp_did"))
			it.DpDid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dp_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dp_method"))
			it.DpMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ap_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ap_did"))
			it.ApDid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ap_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ap_method"))
			it.ApMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLabelsInfo(ctx context.Context, obj interface{}) (model.LabelsInfo, error) {
	var it model.LabelsInfo
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "blockChain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockChain"))
			it.BlockChain, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "scenario":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scenario"))
			it.Scenario, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogin(ctx context.Context, obj interface{}) (model.Login, error) {
	var it model.Login
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
			it.Did, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			it.Time, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sig"))
			it.Sig, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNFTSettingWhere(ctx context.Context, obj interface{}) (model.NFTSettingWhere, error) {
	var it model.NFTSettingWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNftLeadBoardWhere(ctx context.Context, obj interface{}) (model.NftLeadBoardWhere, error) {
	var it model.NftLeadBoardWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "nftType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nftType"))
			it.NftType, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOuterTaskReq(ctx context.Context, obj interface{}) (model.OuterTaskReq, error) {
	var it model.OuterTaskReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "caller_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caller_did"))
			it.CallerDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNOuterTaskReqData2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐOuterTaskReqData(ctx, v)
			if err != nil {
				return it, err
			}
		case "sig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sig"))
			it.Sig, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOuterTaskReqData(ctx context.Context, obj interface{}) (model.OuterTaskReqData, error) {
	var it model.OuterTaskReqData
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "task_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("task_id"))
			it.TaskID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProof(ctx context.Context, obj interface{}) (model.Proof, error) {
	var it model.Proof
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "verificationMethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verificationMethod"))
			it.VerificationMethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "created":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("created"))
			it.Created, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRefreshTokenInput(ctx context.Context, obj interface{}) (model.RefreshTokenInput, error) {
	var it model.RefreshTokenInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRequestOscoreData(ctx context.Context, obj interface{}) (model.RequestOscoreData, error) {
	var it model.RequestOscoreData
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "userdid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userdid"))
			it.Userdid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apdid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apdid"))
			it.Apdid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apmethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apmethod"))
			it.Apmethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dpdid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpdid"))
			it.Dpdid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dpmethod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpmethod"))
			it.Dpmethod, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "overwriteOld":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("overwriteOld"))
			it.OverwriteOld, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "wallets":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wallets"))
			it.Wallets, err = ec.unmarshalNUserWallet2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserWalletᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRequestOscoreReq(ctx context.Context, obj interface{}) (model.RequestOscoreReq, error) {
	var it model.RequestOscoreReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "appdid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appdid"))
			it.Appdid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNRequestOscoreData2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐRequestOscoreData(ctx, v)
			if err != nil {
				return it, err
			}
		case "sig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sig"))
			it.Sig, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSnapShotOptions(ctx context.Context, obj interface{}) (model.SnapShotOptions, error) {
	var it model.SnapShotOptions
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "symbol":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("symbol"))
			it.Symbol, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "thirdMediaType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("thirdMediaType"))
			it.ThirdMediaType, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubmitApInfo(ctx context.Context, obj interface{}) (model.SubmitApInfo, error) {
	var it model.SubmitApInfo
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "apInfoID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apInfoID"))
			it.ApInfoID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "apName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apName"))
			it.ApName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apDid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apDid"))
			it.ApDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "apDesc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apDesc"))
			it.ApDesc, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Avatar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Avatar"))
			it.Avatar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubmitDpInfo(ctx context.Context, obj interface{}) (model.SubmitDpInfo, error) {
	var it model.SubmitDpInfo
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "dpInfoID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpInfoID"))
			it.DpInfoID, err = ec.unmarshalNInt2int64(ctx, v)
			if err != nil {
				return it, err
			}
		case "dpName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpName"))
			it.DpName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dpDid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpDid"))
			it.DpDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dpDesc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dpDesc"))
			it.DpDesc, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Avatar":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Avatar"))
			it.Avatar, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTokenPrice(ctx context.Context, obj interface{}) (model.TokenPrice, error) {
	var it model.TokenPrice
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "contractAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractAddress"))
			it.ContractAddress, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "chain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
			it.Chain, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUnBindAddress(ctx context.Context, obj interface{}) (model.UnBindAddress, error) {
	var it model.UnBindAddress
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
			it.Did, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "chain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
			it.Chain, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserBasicInfoReq(ctx context.Context, obj interface{}) (model.UpdateUserBasicInfoReq, error) {
	var it model.UpdateUserBasicInfoReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("did"))
			it.Did, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "nick_name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nick_name"))
			it.NickName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "vcode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vcode"))
			it.Vcode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserClaimedNFTWhere(ctx context.Context, obj interface{}) (model.UserClaimedNFTWhere, error) {
	var it model.UserClaimedNFTWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_did"))
			it.UserDid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "token_id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token_id"))
			it.TokenID, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "chain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
			it.Chain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nft_type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nft_type"))
			it.NftType, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCredntialWhere(ctx context.Context, obj interface{}) (model.UserCredntialWhere, error) {
	var it model.UserCredntialWhere
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "user_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_did"))
			it.UserDid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dp_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dp_did"))
			it.DpDid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dp_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dp_method"))
			it.DpMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ap_did":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ap_did"))
			it.ApDid, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ap_method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ap_method"))
			it.ApMethod, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWallet(ctx context.Context, obj interface{}) (model.UserWallet, error) {
	var it model.UserWallet
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "chain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
			it.Chain, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pubkey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pubkey"))
			it.Pubkey, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sig"))
			it.Sig, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWalletInfo(ctx context.Context, obj interface{}) (model.WalletInfo, error) {
	var it model.WalletInfo
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "chain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chain"))
			it.Chain, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputgetAllAlgorithmProvidersReq(ctx context.Context, obj interface{}) (model.GetAllAlgorithmProvidersReq, error) {
	var it model.GetAllAlgorithmProvidersReq
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "nameLike":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameLike"))
			it.NameLike, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
			it.OrderBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderDirection":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
			it.OrderDirection, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var aPDataSetListImplementors = []string{"APDataSetList"}

func (ec *executionContext) _APDataSetList(ctx context.Context, sel ast.SelectionSet, obj *model.APDataSetList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aPDataSetListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("APDataSetList")
		case "apDataSetData":
			out.Values[i] = ec._APDataSetList_apDataSetData(ctx, field, obj)
		case "curPageNum":
			out.Values[i] = ec._APDataSetList_curPageNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalNum":
			out.Values[i] = ec._APDataSetList_totalNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var aPMethodWithApImplementors = []string{"APMethodWithAp"}

func (ec *executionContext) _APMethodWithAp(ctx context.Context, sel ast.SelectionSet, obj *model.APMethodWithAp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aPMethodWithApImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("APMethodWithAp")
		case "did":
			out.Values[i] = ec._APMethodWithAp_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._APMethodWithAp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._APMethodWithAp_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "methodName":
			out.Values[i] = ec._APMethodWithAp_methodName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "methodDescription":
			out.Values[i] = ec._APMethodWithAp_methodDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._APMethodWithAp_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "used":
			out.Values[i] = ec._APMethodWithAp_used(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "labels":
			out.Values[i] = ec._APMethodWithAp_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var algorithmProviderImplementors = []string{"AlgorithmProvider"}

func (ec *executionContext) _AlgorithmProvider(ctx context.Context, sel ast.SelectionSet, obj *model.AlgorithmProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, algorithmProviderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AlgorithmProvider")
		case "name":
			out.Values[i] = ec._AlgorithmProvider_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._AlgorithmProvider_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "introduction":
			out.Values[i] = ec._AlgorithmProvider_introduction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "did":
			out.Values[i] = ec._AlgorithmProvider_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._AlgorithmProvider_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._AlgorithmProvider_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provider":
			out.Values[i] = ec._AlgorithmProvider_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "invokeFrequency":
			out.Values[i] = ec._AlgorithmProvider_invokeFrequency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apiState":
			out.Values[i] = ec._AlgorithmProvider_apiState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "author":
			out.Values[i] = ec._AlgorithmProvider_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "popularity":
			out.Values[i] = ec._AlgorithmProvider_popularity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delay":
			out.Values[i] = ec._AlgorithmProvider_delay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._AlgorithmProvider_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var apDataSetResImplementors = []string{"ApDataSetRes"}

func (ec *executionContext) _ApDataSetRes(ctx context.Context, sel ast.SelectionSet, obj *model.ApDataSetRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apDataSetResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApDataSetRes")
		case "dataSetID":
			out.Values[i] = ec._ApDataSetRes_dataSetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apDid":
			out.Values[i] = ec._ApDataSetRes_apDid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataSetName":
			out.Values[i] = ec._ApDataSetRes_dataSetName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataSetMethodName":
			out.Values[i] = ec._ApDataSetRes_dataSetMethodName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataSetDesc":
			out.Values[i] = ec._ApDataSetRes_dataSetDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "httpMethod":
			out.Values[i] = ec._ApDataSetRes_httpMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "httpURL":
			out.Values[i] = ec._ApDataSetRes_httpURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Params":
			out.Values[i] = ec._ApDataSetRes_Params(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._ApDataSetRes_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ResDesc":
			out.Values[i] = ec._ApDataSetRes_ResDesc(ctx, field, obj)
		case "Labels":
			out.Values[i] = ec._ApDataSetRes_Labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var apInfoResImplementors = []string{"ApInfoRes"}

func (ec *executionContext) _ApInfoRes(ctx context.Context, sel ast.SelectionSet, obj *model.ApInfoRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apInfoResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApInfoRes")
		case "apInfoID":
			out.Values[i] = ec._ApInfoRes_apInfoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apDid":
			out.Values[i] = ec._ApInfoRes_apDid(ctx, field, obj)
		case "apName":
			out.Values[i] = ec._ApInfoRes_apName(ctx, field, obj)
		case "apDesc":
			out.Values[i] = ec._ApInfoRes_apDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._ApInfoRes_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ResDesc":
			out.Values[i] = ec._ApInfoRes_ResDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Avatar":
			out.Values[i] = ec._ApInfoRes_Avatar(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var applicationInfoImplementors = []string{"ApplicationInfo"}

func (ec *executionContext) _ApplicationInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ApplicationInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationInfo")
		case "did":
			out.Values[i] = ec._ApplicationInfo_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ApplicationInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "website":
			out.Values[i] = ec._ApplicationInfo_website(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var chainAddressImplementors = []string{"ChainAddress"}

func (ec *executionContext) _ChainAddress(ctx context.Context, sel ast.SelectionSet, obj *model.ChainAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chainAddressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChainAddress")
		case "chain":
			out.Values[i] = ec._ChainAddress_chain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contract_address":
			out.Values[i] = ec._ChainAddress_contract_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var claimNFTRecordImplementors = []string{"ClaimNFTRecord"}

func (ec *executionContext) _ClaimNFTRecord(ctx context.Context, sel ast.SelectionSet, obj *model.ClaimNFTRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, claimNFTRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClaimNFTRecord")
		case "tx_hash":
			out.Values[i] = ec._ClaimNFTRecord_tx_hash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chain":
			out.Values[i] = ec._ClaimNFTRecord_chain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contract_address":
			out.Values[i] = ec._ClaimNFTRecord_contract_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nft_type":
			out.Values[i] = ec._ClaimNFTRecord_nft_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_did":
			out.Values[i] = ec._ClaimNFTRecord_user_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_address":
			out.Values[i] = ec._ClaimNFTRecord_user_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_time":
			out.Values[i] = ec._ClaimNFTRecord_create_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "result":
			out.Values[i] = ec._ClaimNFTRecord_result(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._ClaimNFTRecord_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var claimNFTRecordsRespImplementors = []string{"ClaimNFTRecordsResp"}

func (ec *executionContext) _ClaimNFTRecordsResp(ctx context.Context, sel ast.SelectionSet, obj *model.ClaimNFTRecordsResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, claimNFTRecordsRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClaimNFTRecordsResp")
		case "count":
			out.Values[i] = ec._ClaimNFTRecordsResp_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "records":
			out.Values[i] = ec._ClaimNFTRecordsResp_records(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var claimNFTResponseImplementors = []string{"ClaimNFTResponse"}

func (ec *executionContext) _ClaimNFTResponse(ctx context.Context, sel ast.SelectionSet, obj *model.ClaimNFTResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, claimNFTResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClaimNFTResponse")
		case "errorCode":
			out.Values[i] = ec._ClaimNFTResponse_errorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._ClaimNFTResponse_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "param":
			out.Values[i] = ec._ClaimNFTResponse_param(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dPAndMethodImplementors = []string{"DPAndMethod"}

func (ec *executionContext) _DPAndMethod(ctx context.Context, sel ast.SelectionSet, obj *model.DPAndMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dPAndMethodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DPAndMethod")
		case "dp":
			out.Values[i] = ec._DPAndMethod_dp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._DPAndMethod_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dPDataSetListImplementors = []string{"DPDataSetList"}

func (ec *executionContext) _DPDataSetList(ctx context.Context, sel ast.SelectionSet, obj *model.DPDataSetList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dPDataSetListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DPDataSetList")
		case "dpDataSetData":
			out.Values[i] = ec._DPDataSetList_dpDataSetData(ctx, field, obj)
		case "curPageNum":
			out.Values[i] = ec._DPDataSetList_curPageNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalNum":
			out.Values[i] = ec._DPDataSetList_totalNum(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dPMethodWithDpImplementors = []string{"DPMethodWithDp"}

func (ec *executionContext) _DPMethodWithDp(ctx context.Context, sel ast.SelectionSet, obj *model.DPMethodWithDp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dPMethodWithDpImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DPMethodWithDp")
		case "did":
			out.Values[i] = ec._DPMethodWithDp_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._DPMethodWithDp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._DPMethodWithDp_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "methodName":
			out.Values[i] = ec._DPMethodWithDp_methodName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "methodDescription":
			out.Values[i] = ec._DPMethodWithDp_methodDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._DPMethodWithDp_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "used":
			out.Values[i] = ec._DPMethodWithDp_used(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "labels":
			out.Values[i] = ec._DPMethodWithDp_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataProviderImplementors = []string{"DataProvider"}

func (ec *executionContext) _DataProvider(ctx context.Context, sel ast.SelectionSet, obj *model.DataProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataProviderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataProvider")
		case "name":
			out.Values[i] = ec._DataProvider_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._DataProvider_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "introduction":
			out.Values[i] = ec._DataProvider_introduction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "did":
			out.Values[i] = ec._DataProvider_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._DataProvider_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._DataProvider_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provider":
			out.Values[i] = ec._DataProvider_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "invokeFrequency":
			out.Values[i] = ec._DataProvider_invokeFrequency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apiState":
			out.Values[i] = ec._DataProvider_apiState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "author":
			out.Values[i] = ec._DataProvider_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "popularity":
			out.Values[i] = ec._DataProvider_popularity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "delay":
			out.Values[i] = ec._DataProvider_delay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._DataProvider_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dpDataSetResImplementors = []string{"DpDataSetRes"}

func (ec *executionContext) _DpDataSetRes(ctx context.Context, sel ast.SelectionSet, obj *model.DpDataSetRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dpDataSetResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DpDataSetRes")
		case "dataSetID":
			out.Values[i] = ec._DpDataSetRes_dataSetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dpDid":
			out.Values[i] = ec._DpDataSetRes_dpDid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataSetName":
			out.Values[i] = ec._DpDataSetRes_dataSetName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataSetMethodName":
			out.Values[i] = ec._DpDataSetRes_dataSetMethodName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataSetDesc":
			out.Values[i] = ec._DpDataSetRes_dataSetDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "httpMethod":
			out.Values[i] = ec._DpDataSetRes_httpMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "httpURL":
			out.Values[i] = ec._DpDataSetRes_httpURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Params":
			out.Values[i] = ec._DpDataSetRes_Params(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._DpDataSetRes_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ResDesc":
			out.Values[i] = ec._DpDataSetRes_ResDesc(ctx, field, obj)
		case "Labels":
			out.Values[i] = ec._DpDataSetRes_Labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dpInfoResImplementors = []string{"DpInfoRes"}

func (ec *executionContext) _DpInfoRes(ctx context.Context, sel ast.SelectionSet, obj *model.DpInfoRes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dpInfoResImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DpInfoRes")
		case "dpInfoID":
			out.Values[i] = ec._DpInfoRes_dpInfoID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dpDid":
			out.Values[i] = ec._DpInfoRes_dpDid(ctx, field, obj)
		case "dpName":
			out.Values[i] = ec._DpInfoRes_dpName(ctx, field, obj)
		case "dpDesc":
			out.Values[i] = ec._DpInfoRes_dpDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._DpInfoRes_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ResDesc":
			out.Values[i] = ec._DpInfoRes_ResDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Avatar":
			out.Values[i] = ec._DpInfoRes_Avatar(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var genNFTCountRespImplementors = []string{"GenNFTCountResp"}

func (ec *executionContext) _GenNFTCountResp(ctx context.Context, sel ast.SelectionSet, obj *model.GenNFTCountResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, genNFTCountRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenNFTCountResp")
		case "count":
			out.Values[i] = ec._GenNFTCountResp_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var genReputationCountRespImplementors = []string{"GenReputationCountResp"}

func (ec *executionContext) _GenReputationCountResp(ctx context.Context, sel ast.SelectionSet, obj *model.GenReputationCountResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, genReputationCountRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GenReputationCountResp")
		case "count":
			out.Values[i] = ec._GenReputationCountResp_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getAllAlgorithmProviderMethodsRespImplementors = []string{"GetAllAlgorithmProviderMethodsResp"}

func (ec *executionContext) _GetAllAlgorithmProviderMethodsResp(ctx context.Context, sel ast.SelectionSet, obj *model.GetAllAlgorithmProviderMethodsResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getAllAlgorithmProviderMethodsRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetAllAlgorithmProviderMethodsResp")
		case "total":
			out.Values[i] = ec._GetAllAlgorithmProviderMethodsResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._GetAllAlgorithmProviderMethodsResp_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getAllAlgorithmProvidersRespImplementors = []string{"GetAllAlgorithmProvidersResp"}

func (ec *executionContext) _GetAllAlgorithmProvidersResp(ctx context.Context, sel ast.SelectionSet, obj *model.GetAllAlgorithmProvidersResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getAllAlgorithmProvidersRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetAllAlgorithmProvidersResp")
		case "total":
			out.Values[i] = ec._GetAllAlgorithmProvidersResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._GetAllAlgorithmProvidersResp_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getAllDataProviderMethodsRespImplementors = []string{"GetAllDataProviderMethodsResp"}

func (ec *executionContext) _GetAllDataProviderMethodsResp(ctx context.Context, sel ast.SelectionSet, obj *model.GetAllDataProviderMethodsResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getAllDataProviderMethodsRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetAllDataProviderMethodsResp")
		case "total":
			out.Values[i] = ec._GetAllDataProviderMethodsResp_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._GetAllDataProviderMethodsResp_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getAllDataProvidersImplementors = []string{"GetAllDataProviders"}

func (ec *executionContext) _GetAllDataProviders(ctx context.Context, sel ast.SelectionSet, obj *model.GetAllDataProviders) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getAllDataProvidersImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetAllDataProviders")
		case "total":
			out.Values[i] = ec._GetAllDataProviders_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._GetAllDataProviders_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getUserTasksRespImplementors = []string{"GetUserTasksResp"}

func (ec *executionContext) _GetUserTasksResp(ctx context.Context, sel ast.SelectionSet, obj *model.GetUserTasksResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getUserTasksRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetUserTasksResp")
		case "total_count":
			out.Values[i] = ec._GetUserTasksResp_total_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tasks":
			out.Values[i] = ec._GetUserTasksResp_tasks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var labelsInfosImplementors = []string{"LabelsInfos"}

func (ec *executionContext) _LabelsInfos(ctx context.Context, sel ast.SelectionSet, obj *model.LabelsInfos) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, labelsInfosImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LabelsInfos")
		case "blockChain":
			out.Values[i] = ec._LabelsInfos_blockChain(ctx, field, obj)
		case "category":
			out.Values[i] = ec._LabelsInfos_category(ctx, field, obj)
		case "scenario":
			out.Values[i] = ec._LabelsInfos_scenario(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var methodDetailImplementors = []string{"MethodDetail"}

func (ec *executionContext) _MethodDetail(ctx context.Context, sel ast.SelectionSet, obj *model.MethodDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, methodDetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MethodDetail")
		case "did":
			out.Values[i] = ec._MethodDetail_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._MethodDetail_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paramSchema":
			out.Values[i] = ec._MethodDetail_paramSchema(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resultSchema":
			out.Values[i] = ec._MethodDetail_resultSchema(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._MethodDetail_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "compositeSetting":
			out.Values[i] = ec._MethodDetail_compositeSetting(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "param":
			out.Values[i] = ec._MethodDetail_param(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._MethodDetail_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._MethodDetail_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "invoked":
			out.Values[i] = ec._MethodDetail_invoked(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "latency":
			out.Values[i] = ec._MethodDetail_latency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._MethodDetail_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "httpMethod":
			out.Values[i] = ec._MethodDetail_httpMethod(ctx, field, obj)
		case "compositeData":
			out.Values[i] = ec._MethodDetail_compositeData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "labels":
			out.Values[i] = ec._MethodDetail_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._MethodDetail_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var methodInfoImplementors = []string{"MethodInfo"}

func (ec *executionContext) _MethodInfo(ctx context.Context, sel ast.SelectionSet, obj *model.MethodInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, methodInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MethodInfo")
		case "did":
			out.Values[i] = ec._MethodInfo_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._MethodInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._MethodInfo_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "submitChanllenge":
			out.Values[i] = ec._Mutation_submitChanllenge(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "login":
			out.Values[i] = ec._Mutation_login(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshToken":
			out.Values[i] = ec._Mutation_refreshToken(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bindAddress":
			out.Values[i] = ec._Mutation_bindAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unbindAddress":
			out.Values[i] = ec._Mutation_unbindAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addTask":
			out.Values[i] = ec._Mutation_addTask(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "changeAddressVisible":
			out.Values[i] = ec._Mutation_changeAddressVisible(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestEmailVCode":
			out.Values[i] = ec._Mutation_requestEmailVCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addUserBasicInfo":
			out.Values[i] = ec._Mutation_addUserBasicInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserBasicInfo":
			out.Values[i] = ec._Mutation_updateUserBasicInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateApplicationInfo":
			out.Values[i] = ec._Mutation_updateApplicationInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editNickNameBasicInfo":
			out.Values[i] = ec._Mutation_editNickNameBasicInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editEmailAddrBasicInfo":
			out.Values[i] = ec._Mutation_editEmailAddrBasicInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editAppNameAppInfo":
			out.Values[i] = ec._Mutation_editAppNameAppInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "editWebsiteAppInfo":
			out.Values[i] = ec._Mutation_editWebsiteAppInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestOscore":
			out.Values[i] = ec._Mutation_requestOscore(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addNewOuterTask":
			out.Values[i] = ec._Mutation_addNewOuterTask(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SaveThirdPartyVc":
			out.Values[i] = ec._Mutation_SaveThirdPartyVc(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UnBindThirdParty":
			out.Values[i] = ec._Mutation_UnBindThirdParty(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SaveUserKycInfo":
			out.Values[i] = ec._Mutation_SaveUserKycInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "claimNFT":
			out.Values[i] = ec._Mutation_claimNFT(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitClaimTxInfo":
			out.Values[i] = ec._Mutation_submitClaimTxInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SaveDPInfo":
			out.Values[i] = ec._Mutation_SaveDPInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SubmitDPInfo":
			out.Values[i] = ec._Mutation_SubmitDPInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RevokeDPInfo":
			out.Values[i] = ec._Mutation_RevokeDPInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UploadAvatar":
			out.Values[i] = ec._Mutation_UploadAvatar(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SaveDPDataSet":
			out.Values[i] = ec._Mutation_SaveDPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PublishDPDataSet":
			out.Values[i] = ec._Mutation_PublishDPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RevokeDPDataSet":
			out.Values[i] = ec._Mutation_RevokeDPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteDPDataSet":
			out.Values[i] = ec._Mutation_DeleteDPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RevokePublishedDPDataSet":
			out.Values[i] = ec._Mutation_RevokePublishedDPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SaveAPInfo":
			out.Values[i] = ec._Mutation_SaveAPInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SubmitAPInfo":
			out.Values[i] = ec._Mutation_SubmitAPInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RevokeAPInfo":
			out.Values[i] = ec._Mutation_RevokeAPInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SaveAPDataSet":
			out.Values[i] = ec._Mutation_SaveAPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PublishAPDataSet":
			out.Values[i] = ec._Mutation_PublishAPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RevokeAPDataSet":
			out.Values[i] = ec._Mutation_RevokeAPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DeleteAPDataSet":
			out.Values[i] = ec._Mutation_DeleteAPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RevokePublishedAPDataSet":
			out.Values[i] = ec._Mutation_RevokePublishedAPDataSet(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nFTClaimedCountRespImplementors = []string{"NFTClaimedCountResp"}

func (ec *executionContext) _NFTClaimedCountResp(ctx context.Context, sel ast.SelectionSet, obj *model.NFTClaimedCountResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nFTClaimedCountRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NFTClaimedCountResp")
		case "total_count":
			out.Values[i] = ec._NFTClaimedCountResp_total_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_count":
			out.Values[i] = ec._NFTClaimedCountResp_user_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nFTParamImplementors = []string{"NFTParam"}

func (ec *executionContext) _NFTParam(ctx context.Context, sel ast.SelectionSet, obj *model.NFTParam) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nFTParamImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NFTParam")
		case "hash":
			out.Values[i] = ec._NFTParam_hash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sig":
			out.Values[i] = ec._NFTParam_sig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nftType":
			out.Values[i] = ec._NFTParam_nftType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._NFTParam_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nFTSettingImplementors = []string{"NFTSetting"}

func (ec *executionContext) _NFTSetting(ctx context.Context, sel ast.SelectionSet, obj *model.NFTSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nFTSettingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NFTSetting")
		case "id":
			out.Values[i] = ec._NFTSetting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._NFTSetting_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._NFTSetting_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "image":
			out.Values[i] = ec._NFTSetting_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dp_did":
			out.Values[i] = ec._NFTSetting_dp_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dp_method":
			out.Values[i] = ec._NFTSetting_dp_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_did":
			out.Values[i] = ec._NFTSetting_ap_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_name":
			out.Values[i] = ec._NFTSetting_ap_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_method":
			out.Values[i] = ec._NFTSetting_ap_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_method_name":
			out.Values[i] = ec._NFTSetting_ap_method_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lowest_score":
			out.Values[i] = ec._NFTSetting_lowest_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "valid_days":
			out.Values[i] = ec._NFTSetting_valid_days(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "restriction":
			out.Values[i] = ec._NFTSetting_restriction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chain_addresses":
			out.Values[i] = ec._NFTSetting_chain_addresses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issue_by":
			out.Values[i] = ec._NFTSetting_issue_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nFTSettingRespImplementors = []string{"NFTSettingResp"}

func (ec *executionContext) _NFTSettingResp(ctx context.Context, sel ast.SelectionSet, obj *model.NFTSettingResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nFTSettingRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NFTSettingResp")
		case "count":
			out.Values[i] = ec._NFTSettingResp_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "records":
			out.Values[i] = ec._NFTSettingResp_records(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceInfoImplementors = []string{"PriceInfo"}

func (ec *executionContext) _PriceInfo(ctx context.Context, sel ast.SelectionSet, obj *model.PriceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriceInfo")
		case "priceType":
			out.Values[i] = ec._PriceInfo_priceType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._PriceInfo_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chargeType":
			out.Values[i] = ec._PriceInfo_chargeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var providerMethodImplementors = []string{"ProviderMethod"}

func (ec *executionContext) _ProviderMethod(ctx context.Context, sel ast.SelectionSet, obj *model.ProviderMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, providerMethodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProviderMethod")
		case "name":
			out.Values[i] = ec._ProviderMethod_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paramSchema":
			out.Values[i] = ec._ProviderMethod_paramSchema(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resultSchema":
			out.Values[i] = ec._ProviderMethod_resultSchema(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._ProviderMethod_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._ProviderMethod_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "labels":
			out.Values[i] = ec._ProviderMethod_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._ProviderMethod_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nftType":
			out.Values[i] = ec._ProviderMethod_nftType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalUsed":
			out.Values[i] = ec._ProviderMethod_totalUsed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasDataSet":
			out.Values[i] = ec._ProviderMethod_hasDataSet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ProviderMethod_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportMulti":
			out.Values[i] = ec._ProviderMethod_supportMulti(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getAllAlgorithmProviders":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAlgorithmProviders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAllDataProviders":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllDataProviders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDataProvidersByAP":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDataProvidersByAP(ctx, field)
				return res
			})
		case "getUserAssetBalance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserAssetBalance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserTotalValue":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserTotalValue(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getTokenPrice":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTokenPrice(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserBindAddressInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserBindAddressInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserVisibleBindAddressInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserVisibleBindAddressInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserTasks":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserTasks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryTaskExist":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryTaskExist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getLatestOscore":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLatestOscore(ctx, field)
				return res
			})
		case "getAlgorithmMethods":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAlgorithmMethods(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getDataMethods":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDataMethods(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAlgorithmProvider":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAlgorithmProvider(ctx, field)
				return res
			})
		case "getDataProvider":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDataProvider(ctx, field)
				return res
			})
		case "getUserTask":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserTask(ctx, field)
				return res
			})
		case "getAlgorithmProviderMethod":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAlgorithmProviderMethod(ctx, field)
				return res
			})
		case "getDataProviderMethod":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDataProviderMethod(ctx, field)
				return res
			})
		case "getUserGenNFTCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserGenNFTCount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserGenReputationCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserGenReputationCount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserCredentials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserCredentials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAllDataProviderMethod":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllDataProviderMethod(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAllAlgorithmProviderMethod":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAlgorithmProviderMethod(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getCompositeDpInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCompositeDpInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAllAPInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllAPInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getBasedVotingStrategy":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBasedVotingStrategy(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserBasicInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserBasicInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getApplicationInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getApplicationInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryOuterTask":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryOuterTask(ctx, field)
				return res
			})
		case "requestChanllenge":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_requestChanllenge(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryThirdPartyVc":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryThirdPartyVc(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryAllThirdPartyVcStatus":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryAllThirdPartyVcStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryUserKycInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserKycInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryUserPublishedDP":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserPublishedDP(ctx, field)
				return res
			})
		case "queryUserLatestDPInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserLatestDPInfo(ctx, field)
				return res
			})
		case "queryDPDataSetInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryDPDataSetInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryUserDPDataSetList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserDPDataSetList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryDPLabels":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryDPLabels(ctx, field)
				return res
			})
		case "querySig":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_querySig(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getClaimNFTRecords":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getClaimNFTRecords(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getNFTSettings":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNFTSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserClaimedNFT":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserClaimedNFT(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getNFTClaimedCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getNFTClaimedCount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryUserPublishedAP":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserPublishedAP(ctx, field)
				return res
			})
		case "queryUserLatestAPInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserLatestAPInfo(ctx, field)
				return res
			})
		case "queryAPDataSetInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryAPDataSetInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryUserAPDataSetList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserAPDataSetList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryAPLabels":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryAPLabels(ctx, field)
				return res
			})
		case "queryUserSNSBinding":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserSNSBinding(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "queryUserBasicInfo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_queryUserBasicInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sNSBindingDataImplementors = []string{"SNSBindingData"}

func (ec *executionContext) _SNSBindingData(ctx context.Context, sel ast.SelectionSet, obj *model.SNSBindingData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sNSBindingDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SNSBindingData")
		case "bright_id":
			out.Values[i] = ec._SNSBindingData_bright_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shufti_pro":
			out.Values[i] = ec._SNSBindingData_shufti_pro(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tweeter":
			out.Values[i] = ec._SNSBindingData_tweeter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "github":
			out.Values[i] = ec._SNSBindingData_github(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linkedin":
			out.Values[i] = ec._SNSBindingData_linkedin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "facebook":
			out.Values[i] = ec._SNSBindingData_facebook(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sNSBindingDataWithSigImplementors = []string{"SNSBindingDataWithSig"}

func (ec *executionContext) _SNSBindingDataWithSig(ctx context.Context, sel ast.SelectionSet, obj *model.SNSBindingDataWithSig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sNSBindingDataWithSigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SNSBindingDataWithSig")
		case "data":
			out.Values[i] = ec._SNSBindingDataWithSig_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sig":
			out.Values[i] = ec._SNSBindingDataWithSig_sig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sNSBindingRespImplementors = []string{"SNSBindingResp"}

func (ec *executionContext) _SNSBindingResp(ctx context.Context, sel ast.SelectionSet, obj *model.SNSBindingResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sNSBindingRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SNSBindingResp")
		case "data":
			out.Values[i] = ec._SNSBindingResp_data(ctx, field, obj)
		case "encrypted":
			out.Values[i] = ec._SNSBindingResp_encrypted(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serverHelloImplementors = []string{"ServerHello"}

func (ec *executionContext) _ServerHello(ctx context.Context, sel ast.SelectionSet, obj *model.ServerHello) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serverHelloImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServerHello")
		case "ver":
			out.Values[i] = ec._ServerHello_ver(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._ServerHello_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nonce":
			out.Values[i] = ec._ServerHello_nonce(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "server":
			out.Values[i] = ec._ServerHello_server(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chain":
			out.Values[i] = ec._ServerHello_chain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "alg":
			out.Values[i] = ec._ServerHello_alg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "vcFilters":
			out.Values[i] = ec._ServerHello_vcFilters(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serverInfoImplementors = []string{"ServerInfo"}

func (ec *executionContext) _ServerInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ServerInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serverInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServerInfo")
		case "name":
			out.Values[i] = ec._ServerInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._ServerInfo_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._ServerInfo_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "did":
			out.Values[i] = ec._ServerInfo_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verificationMethod":
			out.Values[i] = ec._ServerInfo_verificationMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sigRespImplementors = []string{"SigResp"}

func (ec *executionContext) _SigResp(ctx context.Context, sel ast.SelectionSet, obj *model.SigResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sigRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SigResp")
		case "hash":
			out.Values[i] = ec._SigResp_hash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sig":
			out.Values[i] = ec._SigResp_sig(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var strategyResultImplementors = []string{"StrategyResult"}

func (ec *executionContext) _StrategyResult(ctx context.Context, sel ast.SelectionSet, obj *model.StrategyResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, strategyResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StrategyResult")
		case "address":
			out.Values[i] = ec._StrategyResult_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._StrategyResult_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var thirdPartyVcStatusImplementors = []string{"ThirdPartyVcStatus"}

func (ec *executionContext) _ThirdPartyVcStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ThirdPartyVcStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, thirdPartyVcStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ThirdPartyVcStatus")
		case "mediaType":
			out.Values[i] = ec._ThirdPartyVcStatus_mediaType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._ThirdPartyVcStatus_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAddressInfoImplementors = []string{"UserAddressInfo"}

func (ec *executionContext) _UserAddressInfo(ctx context.Context, sel ast.SelectionSet, obj *model.UserAddressInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAddressInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAddressInfo")
		case "chain":
			out.Values[i] = ec._UserAddressInfo_chain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._UserAddressInfo_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._UserAddressInfo_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visible":
			out.Values[i] = ec._UserAddressInfo_visible(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAssetImplementors = []string{"UserAsset"}

func (ec *executionContext) _UserAsset(ctx context.Context, sel ast.SelectionSet, obj *model.UserAsset) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAssetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAsset")
		case "name":
			out.Values[i] = ec._UserAsset_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tokenAddress":
			out.Values[i] = ec._UserAsset_tokenAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._UserAsset_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chain":
			out.Values[i] = ec._UserAsset_chain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "balance":
			out.Values[i] = ec._UserAsset_balance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._UserAsset_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._UserAsset_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userBasicInfoImplementors = []string{"UserBasicInfo"}

func (ec *executionContext) _UserBasicInfo(ctx context.Context, sel ast.SelectionSet, obj *model.UserBasicInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userBasicInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserBasicInfo")
		case "did":
			out.Values[i] = ec._UserBasicInfo_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nick_name":
			out.Values[i] = ec._UserBasicInfo_nick_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "avatar":
			out.Values[i] = ec._UserBasicInfo_avatar(ctx, field, obj)
		case "email":
			out.Values[i] = ec._UserBasicInfo_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userBasicInfoRespImplementors = []string{"UserBasicInfoResp"}

func (ec *executionContext) _UserBasicInfoResp(ctx context.Context, sel ast.SelectionSet, obj *model.UserBasicInfoResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userBasicInfoRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserBasicInfoResp")
		case "walletAddress":
			out.Values[i] = ec._UserBasicInfoResp_walletAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifications":
			out.Values[i] = ec._UserBasicInfoResp_verifications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "credentials":
			out.Values[i] = ec._UserBasicInfoResp_credentials(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nfts":
			out.Values[i] = ec._UserBasicInfoResp_nfts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "modelPublished":
			out.Values[i] = ec._UserBasicInfoResp_modelPublished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "datasetPublished":
			out.Values[i] = ec._UserBasicInfoResp_datasetPublished(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userClaimedNFTImplementors = []string{"UserClaimedNFT"}

func (ec *executionContext) _UserClaimedNFT(ctx context.Context, sel ast.SelectionSet, obj *model.UserClaimedNft) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userClaimedNFTImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserClaimedNFT")
		case "owner":
			out.Values[i] = ec._UserClaimedNFT_owner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._UserClaimedNFT_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "valid_to":
			out.Values[i] = ec._UserClaimedNFT_valid_to(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dp_did":
			out.Values[i] = ec._UserClaimedNFT_dp_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dp_title":
			out.Values[i] = ec._UserClaimedNFT_dp_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dp_method":
			out.Values[i] = ec._UserClaimedNFT_dp_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dp_method_title":
			out.Values[i] = ec._UserClaimedNFT_dp_method_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_did":
			out.Values[i] = ec._UserClaimedNFT_ap_did(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_title":
			out.Values[i] = ec._UserClaimedNFT_ap_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_method":
			out.Values[i] = ec._UserClaimedNFT_ap_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_method_title":
			out.Values[i] = ec._UserClaimedNFT_ap_method_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "valid_days":
			out.Values[i] = ec._UserClaimedNFT_valid_days(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "image":
			out.Values[i] = ec._UserClaimedNFT_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tx_hash":
			out.Values[i] = ec._UserClaimedNFT_tx_hash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token_id":
			out.Values[i] = ec._UserClaimedNFT_token_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._UserClaimedNFT_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "issue_by":
			out.Values[i] = ec._UserClaimedNFT_issue_by(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chain":
			out.Values[i] = ec._UserClaimedNFT_chain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lowest_score":
			out.Values[i] = ec._UserClaimedNFT_lowest_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._UserClaimedNFT_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "claim_time":
			out.Values[i] = ec._UserClaimedNFT_claim_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contract_address":
			out.Values[i] = ec._UserClaimedNFT_contract_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nft_type":
			out.Values[i] = ec._UserClaimedNFT_nft_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nft_score":
			out.Values[i] = ec._UserClaimedNFT_nft_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "is_expired":
			out.Values[i] = ec._UserClaimedNFT_is_expired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userClaimedNFTRespImplementors = []string{"UserClaimedNFTResp"}

func (ec *executionContext) _UserClaimedNFTResp(ctx context.Context, sel ast.SelectionSet, obj *model.UserClaimedNFTResp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userClaimedNFTRespImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserClaimedNFTResp")
		case "count":
			out.Values[i] = ec._UserClaimedNFTResp_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "records":
			out.Values[i] = ec._UserClaimedNFTResp_records(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCredentialImplementors = []string{"UserCredential"}

func (ec *executionContext) _UserCredential(ctx context.Context, sel ast.SelectionSet, obj *model.UserCredential) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCredentialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCredential")
		case "score":
			out.Values[i] = ec._UserCredential_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dp_name":
			out.Values[i] = ec._UserCredential_dp_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dp_method_name":
			out.Values[i] = ec._UserCredential_dp_method_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_name":
			out.Values[i] = ec._UserCredential_ap_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ap_method_name":
			out.Values[i] = ec._UserCredential_ap_method_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "create_time":
			out.Values[i] = ec._UserCredential_create_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "valid_to":
			out.Values[i] = ec._UserCredential_valid_to(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userCredentialsImplementors = []string{"UserCredentials"}

func (ec *executionContext) _UserCredentials(ctx context.Context, sel ast.SelectionSet, obj *model.UserCredentials) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userCredentialsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserCredentials")
		case "total_count":
			out.Values[i] = ec._UserCredentials_total_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._UserCredentials_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userLatestOscoreImplementors = []string{"UserLatestOscore"}

func (ec *executionContext) _UserLatestOscore(ctx context.Context, sel ast.SelectionSet, obj *model.UserLatestOscore) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userLatestOscoreImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserLatestOscore")
		case "Oscore":
			out.Values[i] = ec._UserLatestOscore_Oscore(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ApDID":
			out.Values[i] = ec._UserLatestOscore_ApDID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "DpDID":
			out.Values[i] = ec._UserLatestOscore_DpDID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateTime":
			out.Values[i] = ec._UserLatestOscore_CreateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userTasksImplementors = []string{"UserTasks"}

func (ec *executionContext) _UserTasks(ctx context.Context, sel ast.SelectionSet, obj *model.UserTasks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userTasksImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserTasks")
		case "taskId":
			out.Values[i] = ec._UserTasks_taskId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userDID":
			out.Values[i] = ec._UserTasks_userDID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apDID":
			out.Values[i] = ec._UserTasks_apDID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apName":
			out.Values[i] = ec._UserTasks_apName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apIcon":
			out.Values[i] = ec._UserTasks_apIcon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apMethod":
			out.Values[i] = ec._UserTasks_apMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "apMethodName":
			out.Values[i] = ec._UserTasks_apMethodName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dpDID":
			out.Values[i] = ec._UserTasks_dpDID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dpName":
			out.Values[i] = ec._UserTasks_dpName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dpIcon":
			out.Values[i] = ec._UserTasks_dpIcon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dpMethod":
			out.Values[i] = ec._UserTasks_dpMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dpMethodName":
			out.Values[i] = ec._UserTasks_dpMethodName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":
			out.Values[i] = ec._UserTasks_createTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateTime":
			out.Values[i] = ec._UserTasks_updateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskStatus":
			out.Values[i] = ec._UserTasks_taskStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "taskResult":
			out.Values[i] = ec._UserTasks_taskResult(ctx, field, obj)
		case "resultFile":
			out.Values[i] = ec._UserTasks_resultFile(ctx, field, obj)
		case "issueTxhash":
			out.Values[i] = ec._UserTasks_issueTxhash(ctx, field, obj)
		case "valid_to":
			out.Values[i] = ec._UserTasks_valid_to(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nftType":
			out.Values[i] = ec._UserTasks_nftType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "involved_addresses":
			out.Values[i] = ec._UserTasks_involved_addresses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vCFilterImplementors = []string{"VCFilter"}

func (ec *executionContext) _VCFilter(ctx context.Context, sel ast.SelectionSet, obj *model.VCFilter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vCFilterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VCFilter")
		case "type":
			out.Values[i] = ec._VCFilter_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "express":
			out.Values[i] = ec._VCFilter_express(ctx, field, obj)
		case "trustRoots":
			out.Values[i] = ec._VCFilter_trustRoots(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "required":
			out.Values[i] = ec._VCFilter_required(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAPDataSetList2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAPDataSetList(ctx context.Context, sel ast.SelectionSet, v model.APDataSetList) graphql.Marshaler {
	return ec._APDataSetList(ctx, sel, &v)
}

func (ec *executionContext) marshalNAPDataSetList2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAPDataSetList(ctx context.Context, sel ast.SelectionSet, v *model.APDataSetList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._APDataSetList(ctx, sel, v)
}

func (ec *executionContext) marshalNAPMethodWithAp2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAPMethodWithApᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.APMethodWithAp) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAPMethodWithAp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAPMethodWithAp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAPMethodWithAp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAPMethodWithAp(ctx context.Context, sel ast.SelectionSet, v *model.APMethodWithAp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._APMethodWithAp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAddNewOuterTaskReq2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddNewOuterTaskReq(ctx context.Context, v interface{}) (model.AddNewOuterTaskReq, error) {
	res, err := ec.unmarshalInputAddNewOuterTaskReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddNewOuterTaskReqData2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddNewOuterTaskReqData(ctx context.Context, v interface{}) (*model.AddNewOuterTaskReqData, error) {
	res, err := ec.unmarshalInputAddNewOuterTaskReqData(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddTask2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddTask(ctx context.Context, v interface{}) (model.AddTask, error) {
	res, err := ec.unmarshalInputAddTask(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddUserBasicInfoReq2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddUserBasicInfoReq(ctx context.Context, v interface{}) (model.AddUserBasicInfoReq, error) {
	res, err := ec.unmarshalInputAddUserBasicInfoReq(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlgorithmProvider2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProviderᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AlgorithmProvider) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlgorithmProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProvider(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAlgorithmProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProvider(ctx context.Context, sel ast.SelectionSet, v *model.AlgorithmProvider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AlgorithmProvider(ctx, sel, v)
}

func (ec *executionContext) marshalNApDataSetRes2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetRes(ctx context.Context, sel ast.SelectionSet, v model.ApDataSetRes) graphql.Marshaler {
	return ec._ApDataSetRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNApDataSetRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetRes(ctx context.Context, sel ast.SelectionSet, v *model.ApDataSetRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ApDataSetRes(ctx, sel, v)
}

func (ec *executionContext) marshalNApplicationInfo2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApplicationInfo(ctx context.Context, sel ast.SelectionSet, v model.ApplicationInfo) graphql.Marshaler {
	return ec._ApplicationInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNApplicationInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApplicationInfo(ctx context.Context, sel ast.SelectionSet, v *model.ApplicationInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ApplicationInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBindAddress2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐBindAddress(ctx context.Context, v interface{}) (model.BindAddress, error) {
	res, err := ec.unmarshalInputBindAddress(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNChainAddress2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐChainAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ChainAddress) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChainAddress2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐChainAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChainAddress2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐChainAddress(ctx context.Context, sel ast.SelectionSet, v *model.ChainAddress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ChainAddress(ctx, sel, v)
}

func (ec *executionContext) marshalNClaimNFTRecord2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ClaimNFTRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClaimNFTRecord2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClaimNFTRecord2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTRecord(ctx context.Context, sel ast.SelectionSet, v *model.ClaimNFTRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ClaimNFTRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNClaimNFTRecordsResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTRecordsResp(ctx context.Context, sel ast.SelectionSet, v model.ClaimNFTRecordsResp) graphql.Marshaler {
	return ec._ClaimNFTRecordsResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNClaimNFTRecordsResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTRecordsResp(ctx context.Context, sel ast.SelectionSet, v *model.ClaimNFTRecordsResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ClaimNFTRecordsResp(ctx, sel, v)
}

func (ec *executionContext) marshalNClaimNFTResponse2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTResponse(ctx context.Context, sel ast.SelectionSet, v model.ClaimNFTResponse) graphql.Marshaler {
	return ec._ClaimNFTResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNClaimNFTResponse2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTResponse(ctx context.Context, sel ast.SelectionSet, v *model.ClaimNFTResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ClaimNFTResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNClientResponse2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClientResponse(ctx context.Context, v interface{}) (model.ClientResponse, error) {
	res, err := ec.unmarshalInputClientResponse(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDPAndMethod2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPAndMethod(ctx context.Context, sel ast.SelectionSet, v *model.DPAndMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DPAndMethod(ctx, sel, v)
}

func (ec *executionContext) marshalNDPDataSetList2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPDataSetList(ctx context.Context, sel ast.SelectionSet, v model.DPDataSetList) graphql.Marshaler {
	return ec._DPDataSetList(ctx, sel, &v)
}

func (ec *executionContext) marshalNDPDataSetList2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPDataSetList(ctx context.Context, sel ast.SelectionSet, v *model.DPDataSetList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DPDataSetList(ctx, sel, v)
}

func (ec *executionContext) marshalNDPMethodWithDp2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPMethodWithDpᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DPMethodWithDp) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDPMethodWithDp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPMethodWithDp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDPMethodWithDp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPMethodWithDp(ctx context.Context, sel ast.SelectionSet, v *model.DPMethodWithDp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DPMethodWithDp(ctx, sel, v)
}

func (ec *executionContext) marshalNDataProvider2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProviderᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DataProvider) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProvider(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDataProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProvider(ctx context.Context, sel ast.SelectionSet, v *model.DataProvider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DataProvider(ctx, sel, v)
}

func (ec *executionContext) marshalNDpDataSetRes2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetRes(ctx context.Context, sel ast.SelectionSet, v model.DpDataSetRes) graphql.Marshaler {
	return ec._DpDataSetRes(ctx, sel, &v)
}

func (ec *executionContext) marshalNDpDataSetRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetRes(ctx context.Context, sel ast.SelectionSet, v *model.DpDataSetRes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DpDataSetRes(ctx, sel, v)
}

func (ec *executionContext) marshalNGenNFTCountResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGenNFTCountResp(ctx context.Context, sel ast.SelectionSet, v model.GenNFTCountResp) graphql.Marshaler {
	return ec._GenNFTCountResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGenNFTCountResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGenNFTCountResp(ctx context.Context, sel ast.SelectionSet, v *model.GenNFTCountResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GenNFTCountResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGenReputationCountResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGenReputationCountResp(ctx context.Context, sel ast.SelectionSet, v model.GenReputationCountResp) graphql.Marshaler {
	return ec._GenReputationCountResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGenReputationCountResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGenReputationCountResp(ctx context.Context, sel ast.SelectionSet, v *model.GenReputationCountResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GenReputationCountResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetAllAlgorithmProviderMethodsResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllAlgorithmProviderMethodsResp(ctx context.Context, sel ast.SelectionSet, v model.GetAllAlgorithmProviderMethodsResp) graphql.Marshaler {
	return ec._GetAllAlgorithmProviderMethodsResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetAllAlgorithmProviderMethodsResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllAlgorithmProviderMethodsResp(ctx context.Context, sel ast.SelectionSet, v *model.GetAllAlgorithmProviderMethodsResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetAllAlgorithmProviderMethodsResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetAllAlgorithmProvidersResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllAlgorithmProvidersResp(ctx context.Context, sel ast.SelectionSet, v model.GetAllAlgorithmProvidersResp) graphql.Marshaler {
	return ec._GetAllAlgorithmProvidersResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetAllAlgorithmProvidersResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllAlgorithmProvidersResp(ctx context.Context, sel ast.SelectionSet, v *model.GetAllAlgorithmProvidersResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetAllAlgorithmProvidersResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetAllDataProviderMethodsResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllDataProviderMethodsResp(ctx context.Context, sel ast.SelectionSet, v model.GetAllDataProviderMethodsResp) graphql.Marshaler {
	return ec._GetAllDataProviderMethodsResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetAllDataProviderMethodsResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllDataProviderMethodsResp(ctx context.Context, sel ast.SelectionSet, v *model.GetAllDataProviderMethodsResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetAllDataProviderMethodsResp(ctx, sel, v)
}

func (ec *executionContext) marshalNGetAllDataProviders2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllDataProviders(ctx context.Context, sel ast.SelectionSet, v model.GetAllDataProviders) graphql.Marshaler {
	return ec._GetAllDataProviders(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetAllDataProviders2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetAllDataProviders(ctx context.Context, sel ast.SelectionSet, v *model.GetAllDataProviders) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetAllDataProviders(ctx, sel, v)
}

func (ec *executionContext) marshalNGetUserTasksResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetUserTasksResp(ctx context.Context, sel ast.SelectionSet, v model.GetUserTasksResp) graphql.Marshaler {
	return ec._GetUserTasksResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetUserTasksResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetUserTasksResp(ctx context.Context, sel ast.SelectionSet, v *model.GetUserTasksResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetUserTasksResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLabelsInfo2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfo(ctx context.Context, v interface{}) (model.LabelsInfo, error) {
	res, err := ec.unmarshalInputLabelsInfo(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLabelsInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfo(ctx context.Context, v interface{}) (*model.LabelsInfo, error) {
	res, err := ec.unmarshalInputLabelsInfo(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx context.Context, sel ast.SelectionSet, v *model.LabelsInfos) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LabelsInfos(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLogin2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLogin(ctx context.Context, v interface{}) (model.Login, error) {
	res, err := ec.unmarshalInputLogin(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMethodDetail2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodDetailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MethodDetail) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMethodDetail2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodDetail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMethodDetail2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodDetail(ctx context.Context, sel ast.SelectionSet, v *model.MethodDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MethodDetail(ctx, sel, v)
}

func (ec *executionContext) marshalNMethodInfo2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MethodInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMethodInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMethodInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐMethodInfo(ctx context.Context, sel ast.SelectionSet, v *model.MethodInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MethodInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNNFTClaimedCountResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTClaimedCountResp(ctx context.Context, sel ast.SelectionSet, v model.NFTClaimedCountResp) graphql.Marshaler {
	return ec._NFTClaimedCountResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNNFTClaimedCountResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTClaimedCountResp(ctx context.Context, sel ast.SelectionSet, v *model.NFTClaimedCountResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NFTClaimedCountResp(ctx, sel, v)
}

func (ec *executionContext) marshalNNFTSetting2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSettingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.NFTSetting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNFTSetting2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSetting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNFTSetting2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSetting(ctx context.Context, sel ast.SelectionSet, v *model.NFTSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NFTSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNNFTSettingResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSettingResp(ctx context.Context, sel ast.SelectionSet, v model.NFTSettingResp) graphql.Marshaler {
	return ec._NFTSettingResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNNFTSettingResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSettingResp(ctx context.Context, sel ast.SelectionSet, v *model.NFTSettingResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NFTSettingResp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOuterTaskReqData2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐOuterTaskReqData(ctx context.Context, v interface{}) (*model.OuterTaskReqData, error) {
	res, err := ec.unmarshalInputOuterTaskReqData(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProof2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProof(ctx context.Context, v interface{}) (*model.Proof, error) {
	res, err := ec.unmarshalInputProof(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProviderMethod2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethodᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProviderMethod) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProviderMethod2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProviderMethod2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethod(ctx context.Context, sel ast.SelectionSet, v *model.ProviderMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProviderMethod(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRefreshTokenInput2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐRefreshTokenInput(ctx context.Context, v interface{}) (model.RefreshTokenInput, error) {
	res, err := ec.unmarshalInputRefreshTokenInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRequestOscoreData2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐRequestOscoreData(ctx context.Context, v interface{}) (*model.RequestOscoreData, error) {
	res, err := ec.unmarshalInputRequestOscoreData(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSNSBindingData2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSNSBindingData(ctx context.Context, sel ast.SelectionSet, v *model.SNSBindingData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SNSBindingData(ctx, sel, v)
}

func (ec *executionContext) marshalNSNSBindingResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSNSBindingResp(ctx context.Context, sel ast.SelectionSet, v model.SNSBindingResp) graphql.Marshaler {
	return ec._SNSBindingResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNSNSBindingResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSNSBindingResp(ctx context.Context, sel ast.SelectionSet, v *model.SNSBindingResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SNSBindingResp(ctx, sel, v)
}

func (ec *executionContext) marshalNServerHello2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐServerHello(ctx context.Context, sel ast.SelectionSet, v model.ServerHello) graphql.Marshaler {
	return ec._ServerHello(ctx, sel, &v)
}

func (ec *executionContext) marshalNServerHello2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐServerHello(ctx context.Context, sel ast.SelectionSet, v *model.ServerHello) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ServerHello(ctx, sel, v)
}

func (ec *executionContext) marshalNServerInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐServerInfo(ctx context.Context, sel ast.SelectionSet, v *model.ServerInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ServerInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNSigResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSigResp(ctx context.Context, sel ast.SelectionSet, v model.SigResp) graphql.Marshaler {
	return ec._SigResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNSigResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSigResp(ctx context.Context, sel ast.SelectionSet, v *model.SigResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SigResp(ctx, sel, v)
}

func (ec *executionContext) marshalNStrategyResult2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐStrategyResultᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StrategyResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStrategyResult2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐStrategyResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStrategyResult2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐStrategyResult(ctx context.Context, sel ast.SelectionSet, v *model.StrategyResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StrategyResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNThirdPartyVcStatus2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐThirdPartyVcStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ThirdPartyVcStatus) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNThirdPartyVcStatus2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐThirdPartyVcStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNThirdPartyVcStatus2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐThirdPartyVcStatus(ctx context.Context, sel ast.SelectionSet, v *model.ThirdPartyVcStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ThirdPartyVcStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTokenPrice2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐTokenPrice(ctx context.Context, v interface{}) (model.TokenPrice, error) {
	res, err := ec.unmarshalInputTokenPrice(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUnBindAddress2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUnBindAddress(ctx context.Context, v interface{}) (model.UnBindAddress, error) {
	res, err := ec.unmarshalInputUnBindAddress(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUserAddressInfo2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAddressInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserAddressInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserAddressInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAddressInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserAddressInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAddressInfo(ctx context.Context, sel ast.SelectionSet, v *model.UserAddressInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserAddressInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNUserAsset2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAssetᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserAsset) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserAsset2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAsset(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserAsset2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserAsset(ctx context.Context, sel ast.SelectionSet, v *model.UserAsset) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserAsset(ctx, sel, v)
}

func (ec *executionContext) marshalNUserBasicInfo2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserBasicInfo(ctx context.Context, sel ast.SelectionSet, v model.UserBasicInfo) graphql.Marshaler {
	return ec._UserBasicInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserBasicInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserBasicInfo(ctx context.Context, sel ast.SelectionSet, v *model.UserBasicInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserBasicInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNUserBasicInfoResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserBasicInfoResp(ctx context.Context, sel ast.SelectionSet, v model.UserBasicInfoResp) graphql.Marshaler {
	return ec._UserBasicInfoResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserBasicInfoResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserBasicInfoResp(ctx context.Context, sel ast.SelectionSet, v *model.UserBasicInfoResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserBasicInfoResp(ctx, sel, v)
}

func (ec *executionContext) marshalNUserClaimedNFT2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNftᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserClaimedNft) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserClaimedNFT2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNft(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserClaimedNFT2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNft(ctx context.Context, sel ast.SelectionSet, v *model.UserClaimedNft) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserClaimedNFT(ctx, sel, v)
}

func (ec *executionContext) marshalNUserClaimedNFTResp2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNFTResp(ctx context.Context, sel ast.SelectionSet, v model.UserClaimedNFTResp) graphql.Marshaler {
	return ec._UserClaimedNFTResp(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserClaimedNFTResp2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNFTResp(ctx context.Context, sel ast.SelectionSet, v *model.UserClaimedNFTResp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserClaimedNFTResp(ctx, sel, v)
}

func (ec *executionContext) marshalNUserCredential2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredentialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserCredential) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserCredential2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredential(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserCredential2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredential(ctx context.Context, sel ast.SelectionSet, v *model.UserCredential) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserCredential(ctx, sel, v)
}

func (ec *executionContext) marshalNUserCredentials2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredentials(ctx context.Context, sel ast.SelectionSet, v model.UserCredentials) graphql.Marshaler {
	return ec._UserCredentials(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserCredentials2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredentials(ctx context.Context, sel ast.SelectionSet, v *model.UserCredentials) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserCredentials(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserCredntialWhere2githubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserCredntialWhere(ctx context.Context, v interface{}) (model.UserCredntialWhere, error) {
	res, err := ec.unmarshalInputUserCredntialWhere(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserTasks2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserTasksᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserTasks) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserTasks2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserTasks(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserTasks2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserTasks(ctx context.Context, sel ast.SelectionSet, v *model.UserTasks) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserTasks(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserWallet2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserWalletᚄ(ctx context.Context, v interface{}) ([]*model.UserWallet, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.UserWallet, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserWallet2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserWallet(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserWallet2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserWallet(ctx context.Context, v interface{}) (*model.UserWallet, error) {
	res, err := ec.unmarshalInputUserWallet(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNWalletInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐWalletInfo(ctx context.Context, v interface{}) (*model.WalletInfo, error) {
	res, err := ec.unmarshalInputWalletInfo(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAddTask2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAddTask(ctx context.Context, v interface{}) (*model.AddTask, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddTask(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAlgorithmProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProvider(ctx context.Context, sel ast.SelectionSet, v *model.AlgorithmProvider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AlgorithmProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAlgorithmProviderMethodWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProviderMethodWhere(ctx context.Context, v interface{}) (*model.AlgorithmProviderMethodWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAlgorithmProviderMethodWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAlgorithmProviderWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐAlgorithmProviderWhere(ctx context.Context, v interface{}) (*model.AlgorithmProviderWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAlgorithmProviderWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOApDataSetInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetInfo(ctx context.Context, v interface{}) (*model.ApDataSetInfo, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApDataSetInfo(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOApDataSetRes2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetRes(ctx context.Context, sel ast.SelectionSet, v []*model.ApDataSetRes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApDataSetRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOApDataSetRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApDataSetRes(ctx context.Context, sel ast.SelectionSet, v *model.ApDataSetRes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApDataSetRes(ctx, sel, v)
}

func (ec *executionContext) marshalOApInfoRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApInfoRes(ctx context.Context, sel ast.SelectionSet, v *model.ApInfoRes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApInfoRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalOApplicationInfoReq2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐApplicationInfoReq(ctx context.Context, v interface{}) (*model.ApplicationInfoReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputApplicationInfoReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOClaimNFTWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClaimNFTWhere(ctx context.Context, v interface{}) (*model.ClaimNFTWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClaimNFTWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOClientHello2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐClientHello(ctx context.Context, v interface{}) (*model.ClientHello, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClientHello(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODPAndMethod2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPAndMethodᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DPAndMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDPAndMethod2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDPAndMethod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODataProvider2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProvider(ctx context.Context, sel ast.SelectionSet, v *model.DataProvider) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataProviderMethodWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProviderMethodWhere(ctx context.Context, v interface{}) (*model.DataProviderMethodWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataProviderMethodWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODataProviderWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDataProviderWhere(ctx context.Context, v interface{}) (*model.DataProviderWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataProviderWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODpDataSetInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetInfo(ctx context.Context, v interface{}) (*model.DpDataSetInfo, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDpDataSetInfo(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODpDataSetRes2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetRes(ctx context.Context, sel ast.SelectionSet, v []*model.DpDataSetRes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODpDataSetRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetRes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODpDataSetRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpDataSetRes(ctx context.Context, sel ast.SelectionSet, v *model.DpDataSetRes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DpDataSetRes(ctx, sel, v)
}

func (ec *executionContext) marshalODpInfoRes2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐDpInfoRes(ctx context.Context, sel ast.SelectionSet, v *model.DpInfoRes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DpInfoRes(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGetUserTasksWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐGetUserTasksWhere(ctx context.Context, v interface{}) (*model.GetUserTasksWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputGetUserTasksWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) marshalOLabelsInfos2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐLabelsInfos(ctx context.Context, sel ast.SelectionSet, v *model.LabelsInfos) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LabelsInfos(ctx, sel, v)
}

func (ec *executionContext) marshalONFTParam2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTParam(ctx context.Context, sel ast.SelectionSet, v *model.NFTParam) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NFTParam(ctx, sel, v)
}

func (ec *executionContext) unmarshalONFTSettingWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐNFTSettingWhere(ctx context.Context, v interface{}) (*model.NFTSettingWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNFTSettingWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOuterTaskReq2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐOuterTaskReq(ctx context.Context, v interface{}) (*model.OuterTaskReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOuterTaskReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProviderMethod2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐProviderMethod(ctx context.Context, sel ast.SelectionSet, v *model.ProviderMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProviderMethod(ctx, sel, v)
}

func (ec *executionContext) unmarshalORequestOscoreReq2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐRequestOscoreReq(ctx context.Context, v interface{}) (*model.RequestOscoreReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRequestOscoreReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSNSBindingDataWithSig2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSNSBindingDataWithSig(ctx context.Context, sel ast.SelectionSet, v *model.SNSBindingDataWithSig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SNSBindingDataWithSig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSnapShotOptions2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSnapShotOptions(ctx context.Context, v interface{}) (*model.SnapShotOptions, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSnapShotOptions(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOSubmitApInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSubmitApInfo(ctx context.Context, v interface{}) (*model.SubmitApInfo, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSubmitApInfo(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSubmitDpInfo2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐSubmitDpInfo(ctx context.Context, v interface{}) (*model.SubmitDpInfo, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSubmitDpInfo(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdateUserBasicInfoReq2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUpdateUserBasicInfoReq(ctx context.Context, v interface{}) (*model.UpdateUserBasicInfoReq, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateUserBasicInfoReq(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserClaimedNFTWhere2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserClaimedNFTWhere(ctx context.Context, v interface{}) (*model.UserClaimedNFTWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserClaimedNFTWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUserLatestOscore2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserLatestOscore(ctx context.Context, sel ast.SelectionSet, v *model.UserLatestOscore) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserLatestOscore(ctx, sel, v)
}

func (ec *executionContext) marshalOUserTasks2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐUserTasks(ctx context.Context, sel ast.SelectionSet, v *model.UserTasks) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserTasks(ctx, sel, v)
}

func (ec *executionContext) marshalOVCFilter2ᚕᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐVCFilter(ctx context.Context, sel ast.SelectionSet, v []*model.VCFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVCFilter2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐVCFilter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVCFilter2ᚖgithubᚗcomᚋoscoreᚋoscoreᚑserverᚋgraphᚋmodelᚐVCFilter(ctx context.Context, sel ast.SelectionSet, v *model.VCFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VCFilter(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
